{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Plex Meta Manager is a powerful tool designed to give you complete control over your media libraries. With Plex Meta Manager, you can take your customization to the next level, with granular control over metadata, collections, overlays, and much more.</p> <p>Unlock the full potential of your media library with Plex Meta Manager! Unlike any other tool, Plex Meta Manager lets you connect to third-party services such as TMDb, Trakt, IMDb, and more, giving you the power to create unique collections and overlays, allowing you to create media libraries that truly stand out and are tailored to your individual needs.</p>"},{"location":"#what-can-plex-meta-manager-do","title":"What Can Plex Meta Manager Do?","text":"<p>Unlock the potential of your libraries with Plex Meta Manager, which makes it easy to:</p> <ol> <li> <p>Create unique and powerful collections based on hand-crafted or pre-made lists from a variety of sources such as Trakt, Flixpatrol and MDBList.</p> </li> <li> <p>Elevate your library with beautifully crafted metadata - customize artwork, titles, summaries, and more to create a stunning library.</p> </li> <li> <p>Add overlays to artwork to display useful details such as ratings, resolution, edition, and more, to make browsing your library a breeze.</p> </li> <li> <p>Effortlessly send missing items from external lists, such as the IMDB 250, to Radarr or Sonarr for automatic downloading.</p> </li> <li> <p>And more. Plex Meta Manager is constantly evolving to bring you even more powerful features to take your library management experience to the next level.</p> </li> </ol> <p>Example Movie Collections using the Plex Meta Manager Defaults (click to enlarge):</p> <p></p> <p>Example Show Overlays using the Plex Meta Manager Defaults (click to enlarge):</p> <p></p>"},{"location":"#plex-meta-manager-defaults","title":"Plex Meta Manager Defaults","text":"<p>Want your library to look like the above images?  With the PMM Defaults you can! These powerful and modular files were designed by the Plex Meta Manager team to make it simple to create a personalized, one-of-a-kind media collection without the hassle of manually defining each one.</p> <p>Want to see what the community has to offer? Check out the Plex Meta Manager Configs repository on GitHub to see user-submitted configuration files, or even add your own to the mix!</p> <p>With Plex Meta Manager, you can also manage metadata for all your media types, from movies and shows to music and more. And since your metadata is managed outside of your libraries, you'll never have to worry about losing your customizations in the event of a media server database loss, you can simply reapply them! It is also easy to move your customizations between servers if you need to.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Plex Meta Manager, follow these simple steps:</p> <ol> <li> <p>Install Plex Meta Manager on your device. You can find the installation instructions for a variety of platforms here.</p> </li> <li> <p>Once you have installed Plex Meta Manager, create your Configuration File. This file contains important information such as URLs and credentials needed to connect to services like Plex and TMDb</p> </li> <li> <p>After creating the Configuration File, you can start updating Metadata and building automatic Collections by creating a Metadata File for each Library you want to work with. If you'd rather use some of our pre-made Metadata Files, take a look at the Plex Meta Manager Defaults</p> </li> <li> <p>Finally, check out the Wiki, you'll find new and exciting ways to truly unlock the potential of your libraries.</p> </li> </ol>"},{"location":"#step-by-step-guides","title":"Step-by-Step Guides","text":"<p>If you're a beginner to the concepts of Python, Git and/or Plex Meta Manager and find the above steps challenging, don't worry. We've got some step-by-step guides that can help you get started. These guides will take you through the process of installing Plex Meta Manager, creating your Configuration File and getting some basic Collections up and running.</p> <ol> <li>The Local Walkthrough covers installing Plex Meta Manager natively [not in docker] on your local computer or a remote server.</li> <li>The Docker Walkthrough covers installing Plex Meta Manager via Docker.</li> <li>The unRAID Walkthrough gets you started configuring Plex Meta Manager in UNRaid.  It doesn't go through the same steps with regard to creating the config file and metadata file, so you may want to go through the Docker Walkthrough first on your computer to gain that understanding.</li> </ol>"},{"location":"#example-usage","title":"Example Usage","text":"<p>Plex Meta Manager puts you in control of your media library by letting you create custom Collections that make discovering and organizing your content a breeze. With powerful search and filtering options, you can build Collections based on popular builders like TMDb, IMDb, Trakt, and many more.</p> <p>Imagine having Collections like these at your fingertips:</p> <ul> <li>Trending and Popular (based on TMDb, IMDb, Trakt, etc.)</li> <li>Streaming Services (like Netflix, Disney+, and more)</li> <li>Networks</li> <li>Studios</li> <li>Genres</li> <li>Actors</li> <li>Decades</li> </ul> <p>Plex Meta Manager gives you endless possibilities to curate and organize your media library any way you want. Create custom Collections and Overlays that fit your unique preferences and make discovering your content effortless.</p> <p>But if you don't want to spend time manually creating Collections and Overlays, we've got you covered. Check out the PMM Defaults - a handcrafted selection of tried-and-tested Collections and Overlays made by the Plex Meta Manager team.</p>"},{"location":"#develop-nightly-branches","title":"Develop &amp; Nightly Branches","text":"<p>The Develop and Nightly branches are \"beta\" versions of Plex Meta Manager that are updated more frequently than the stable version (Master branch). These branches are where bug fixes, new features, and other changes are added before being released to the Master branch.</p> <p>However, these branches (especially Nightly) are recommended for more technical users who don't mind updating frequently to get the latest changes. Keep in mind that these beta branches may have bugs or other issues that could cause problems with Plex Meta Manager or your media server. So, if you're not comfortable with technical issues, it's best to stick with the Master branch.</p> Develop Branch - Click to Expand <p></p> <p>The develop branch has the most updated documented fixes and enhancements to Plex Meta Manager.  This version is tested and documented to some degree, but it is still an active Develop branch, so there may be rough edges.</p> <p>Switching to <code>develop</code>:</p> Running in DockerRunning on the Host <p>Add \":develop\" to the image name in your run command or configuration:     <pre><code>meisnate12/plex-meta-manager:develop\n</code></pre></p> <p>In the directory where you cloned PMM:     <pre><code>git checkout develop\n</code></pre> To switch back:     <pre><code>git checkout master\n</code></pre></p> <p>If switching to the develop branch, it is recommended to also use the develop branch of the wiki, which documents any changes made from the Master branch.</p> Nightly Branch - Click to Expand <p></p> <p>This branch will have squashed commits which can cause <code>git pull</code>/<code>git fetch</code> to error you can use <code>git reset origin/nightly --hard</code> to fix the branch.</p> <p>The nightly branch has the absolute latest version of Plex Meta Manager, but it could easily break, there is no guarantee that it even works, and any new features will not be documented until they have progressed enough to reach the develop branch.</p> <p>Switching to <code>nightly</code>:</p> Running in DockerRunning on the Host <p>Add \":develop\" to the image name in your run command or configuration:     <pre><code>meisnate12/plex-meta-manager:develop\n</code></pre></p> <p>In the directory where you cloned PMM:     <pre><code>git checkout develop\n</code></pre> To switch back:     <pre><code>git checkout master\n</code></pre></p> <p>As this branch is subject to extreme change, there is no promise of the feature being documented in the nightly branch of the wiki and all discussions relating to changes made in the nightly branch will be held within the Plex Meta Manager Discord Server.</p>"},{"location":"#discord-support-server","title":"Discord Support Server","text":"<p>If you're looking for support for any questions or issues you might have, or if you just want to be a part of our growing community, Join the Plex Meta Manager Discord Server.</p>"},{"location":"#feature-requests","title":"Feature Requests","text":"<p>At Plex Meta Manager, we value our community's input and actively seek feedback to drive the evolution of our product. We want to hear your ideas on how to enhance Plex Meta Manager, and we encourage you to visit our Feature Request page to share your thoughts or vote on what features you would like to see added next. Your voice matters and helps shape the future of Plex Meta Manager, so please don't hesitate to join in the conversation and be a part of our community-driven development process.</p>"},{"location":"#errors-and-configuration-questions","title":"Errors and Configuration Questions","text":"<p>If you're having trouble, we recommend first joining the Plex Meta Manager Discord Server and seeking support there. If that isn't possible for you, here's what you can do:</p> <ul> <li>If you get an error, update to the latest version and check if the issue persists. If it does, report the bug by filling out the Bug Report template.</li> <li>If you spot a mistake or have an idea to improve the Plex Meta Manager Wiki, submit a request using the Wiki Request template.</li> <li>If you have a question about metadata configuration, start a discussion on the Discussions. Remember, the community helps shape the future of Plex Meta Manager, so your input is valuable!</li> </ul> <p>For support on any of the above, visit the Discord server.</p>"},{"location":"builders/anidb/","title":"AniDB Builders","text":"<p>You can find anime using the features of AniDB.net (AniDB).</p> <p>No configuration is required for these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>anidb_id</code> Finds the anime specified by the AniDB ID \u2705 \u2705 \u274c <code>anidb_relation</code> Finds all anime in the relation graph of the specified AniDB ID \u2705 \u2705 \u274c <code>anidb_popular</code> Finds every anime in AniDB's Popular Anime list \u2705 \u2705 \u2705 <code>anidb_tags</code> Finds every anime in a AniDB Tag \u2705 \u2705 \u274c"},{"location":"builders/anidb/#anidb-id","title":"AniDB ID","text":"<p>Finds the anime specified by the AniDB ID.</p> <p>The expected input is an AniDB ID or AniDB Anime URL. Multiple values are supported as either a list or a comma-separated string.</p> <p><pre><code>collections:\nSword Art Online Shows:\nanidb_id: 8692, 8691, 13494\n</code></pre> <pre><code>collections:\nSword Art Online Shows:\nanidb_id: https://anidb.net/anime/8692, https://anidb.net/anime/8691, https://anidb.net/anime/13494\n</code></pre></p>"},{"location":"builders/anidb/#anidb-relation","title":"AniDB Relation","text":"<p>Finds all anime in the relation graph of the specified AniDB ID.</p> <p>To see the relation graph of an anime use: <code>https://anidb.net/anime/&lt;ANIDB_ID&gt;/relation/graph</code> but replace <code>&lt;ANIDB_ID&gt;</code> with the AniDB ID you want to see the relations for.</p> <p>The expected input is an AniDB ID, AniDB Anime URL, or AniDB Anime Relation URL. Multiple values are supported as either a list or a comma-separated string.</p> <p><pre><code>collections:\nAll Sword Art Online:\nanidb_relation: 8692\n</code></pre> <pre><code>collections:\nAll Sword Art Online:\nanidb_relation: https://anidb.net/anime/8692\n</code></pre> <pre><code>collections:\nAll Sword Art Online:\nanidb_relation: https://anidb.net/anime/8692/relation/graph\n</code></pre></p>"},{"location":"builders/anidb/#anidb-popular","title":"AniDB Popular","text":"<p>Finds every anime in AniDB's Popular Anime list.</p> <p>The expected input is a single integer value of how much anime to query with a max of 30.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nAniDB Popular:\nanidb_popular: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/anidb/#anidb-tag","title":"AniDB Tag","text":"<p>Finds anime with the specified AniDB Tag the options are detailed below. </p> Attribute Description Required Default <code>tag</code> AniDB Tag ID to search by \u2705 N/A <code>limit</code> Number of Anime to query from AniDB (use 0 for all; max: 500) \u274c 0 <pre><code>collections:\nPirates Anime:\nanidb_tag:\ntag: 1700\nlimit: 500\nsync_mode: sync\n</code></pre> <ul> <li>To find possible tags go to the AniDB Anime page to find the tags available. Copy the link and find the tag ID at the end of the url.</li> </ul>"},{"location":"builders/anilist/","title":"AniList Builders","text":"<p>You can find anime using the features of AniList.co (AniList).</p> <p>No configuration is required for these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>anilist_top_rated</code> Finds every anime in AniList's Top Rated Anime list \u2705 \u2705 \u2705 <code>anilist_popular</code> Finds every anime in AniList's Popular Anime list \u2705 \u2705 \u2705 <code>anilist_trending</code> Finds every anime in AniList's Trending Anime list \u2705 \u2705 \u2705 <code>anilist_relations</code> Finds the anime specified by the AniList ID and every relation in its relation tree except Character and Other relations \u2705 \u2705 \u274c <code>anilist_studio</code> Finds all anime specified by the AniList Studio ID \u2705 \u2705 \u274c <code>anilist_id</code> Finds the anime specified by the AniList ID \u2705 \u2705 \u274c <code>anilist_userlist</code> Finds the anime in AniList User's Anime list the options are detailed below \u2705 \u2705 \u2705 <code>anilist_search</code> Finds the anime specified by the AniList search parameters provided \u2705 \u2705 \u2705"},{"location":"builders/anilist/#anilist-top-rated","title":"AniList Top Rated","text":"<p>Finds every anime in AniList's Top Rated Anime list.</p> <p>The expected input is a single integer value of how many movies/shows to query. </p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop Rated Anime:\nanilist_top_rated: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/anilist/#anilist-popular","title":"AniList Popular","text":"<p>Finds every anime in AniList's Popular Anime list.</p> <p>The expected input is a single integer value of how many movies/shows to query. </p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nPopular Anime:\nanilist_popular: 10\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/anilist/#anilist-trending","title":"AniList Trending","text":"<p>Finds every anime in AniList's Trending Anime list.</p> <p>The expected input is a single integer value of how many movies/shows to query. </p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTrending Anime:\nanilist_trending: 10\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/anilist/#anilist-relations","title":"AniList Relations","text":"<p>Finds the anime specified by the AniList ID and every relation in its relation tree except Character and Other relations.</p> <p>The expected input is an AniList ID. Multiple values are supported as either a list or a comma-separated string.</p> <pre><code>collections:\nOne Piece:\nanilist_relations: 21\n</code></pre>"},{"location":"builders/anilist/#anilist-studio","title":"AniList Studio","text":"<p>Finds all anime specified by the AniList Studio ID.</p> <p>The expected input is an AniList ID. Multiple values are supported as either a list or a comma-separated string.</p> <pre><code>collections:\nStudio Ghibli:\nanilist_studio: 21\n</code></pre>"},{"location":"builders/anilist/#anilist-id","title":"AniList ID","text":"<p>Finds the anime specified by the AniList ID.</p> <p>The expected input is an AniList ID. Multiple values are supported as either a list or a comma-separated string.</p> <pre><code>collections:\nCowboy Bebop:\nanilist_id: 23, 219\n</code></pre>"},{"location":"builders/anilist/#anilist-userlist","title":"AniList UserList","text":"<p>Gets anime in AniList User's Anime list. The different sub-attributes are detailed below. </p> <p>Both <code>username</code> and <code>list_name</code> are required.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> Attribute Description <code>username</code> Description: A user's AniList Username <code>list_name</code> Description: A user's AniList List Name <code>sort_by</code> Description: Sort Order to returnDefault: <code>score</code>Values:<code>score</code>Sort by User Score<code>popularity</code>Sort by Popularity<code>status</code>Sort by Status<code>progress</code>Sort by Progress<code>last_updated</code>Sort by Last Updated<code>last_added</code>Sort by Last Added<code>start_date</code>Sort by Start Date<code>completed_date</code>Sort by Completed Date <pre><code>collections:\nCurrently Watching Anime:\nanilist_userlist:\nusername: Username\nlist_name: Watching\nsort_by: score\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/anilist/#anilist-search","title":"AniList Search","text":"<p>Finds the anime specified by the AniList Search the options are detailed below. </p> <p>There are three fields per search option when using AniList's Search just like Plex's Advanced Filters in the Web UI. The first is the Attribute (what attribute you wish to search), the second is the Modifier (which modifier to use), and the third is the Term (actual term to search).</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p>"},{"location":"builders/anilist/#special-attributes","title":"Special Attributes","text":"<p>Special attributes do not support any modifiers.</p> Special Attribute Description &amp; Values <code>sort_by</code> Description: How to sort the AnimeDefault: <code>score</code>Values:<code>score</code>Sort by Average Score<code>popular</code>Sort by Popularity<code>trending</code>Sort by Trending <code>limit</code> Description: Number of Anime to queryValues: Number greater or equal to <code>0</code> (use 0 or don't use it at all for all anime)Default: <code>0</code> <code>search</code> Description: Text to searchValues: Any Text <code>season</code> Description: Season to search forDefault: <code>current</code>Values: <code>winter</code>For winter season December, January, February<code>spring</code>For spring season March, April, May<code>summer</code>For summer season June, July, August<code>fall</code>For fall season September, October, November<code>current</code>For current Season <code>year</code> Description: Season year to search forDefault: Current YearValues: Number between <code>1917</code> and next year or leave blank for the current year <code>min_tag_percent</code> Description: Minimum tag percentage for the AnimeValues: Number between <code>0</code>-<code>100</code> <code>adult</code> Description: Search for or not for Adult AnimeValues: <code>true</code> or <code>false</code> <code>country</code> Description: Search for anime from a specific countryValues: ISO 3166-1 alpha-2 country code <code>source</code> Description: Uses the anime's source to matchValues: <code>original</code>, <code>manga</code>, <code>light_novel</code>, <code>visual_novel</code>, <code>video_game</code>, <code>other</code>, <code>novel</code>, <code>doujinshi</code>, or <code>anime</code>"},{"location":"builders/anilist/#tag-attributes","title":"Tag Attributes","text":"<p>Tag attributes can be used with either no modifier or with <code>.not</code>.</p> <p>String attributes can take multiple values as a list or a comma-separated string.</p>"},{"location":"builders/anilist/#tag-modifiers","title":"Tag Modifiers","text":"Tag Modifier Description No Modifier Matches every item where the attribute matches the given string <code>.not</code> Matches every item where the attribute does not match the given string"},{"location":"builders/anilist/#tag-attributes_1","title":"Tag Attributes","text":"Tag Attribute Description &amp; Values <code>format</code> Description: Uses the anime's format to matchValues: <code>tv</code>, <code>short</code>, <code>movie</code>, <code>special</code>, <code>ova</code>, <code>ona</code>, <code>music</code> <code>status</code> Description: Uses the anime's status to matchValues: <code>finished</code>, <code>airing</code>, <code>not_yet_aired</code>, <code>cancelled</code>, <code>hiatus</code> <code>genre</code> Description: Uses the anime's genre to matchValues: Any Genre in the Genre Dropdown box on the AniList Search Page <code>tag</code> Description: Uses the anime's tag to matchValues: Any Tag in the Genre Dropdown box on the AniList Search Page <code>tag_category</code> Description: Uses the anime's tag category to matchValues: Any Tag Category in the Advanced Genres &amp; Tag Filters Menu on the AniList Search Page"},{"location":"builders/anilist/#date-attributes","title":"Date Attributes","text":"<p>Date attributes can be used with either <code>.before</code>, or <code>.after</code>.</p> <p>No date attribute can take multiple values.</p>"},{"location":"builders/anilist/#date-modifiers","title":"Date Modifiers","text":"Date Modifier Description <code>.before</code> Matches every item where the date attribute is before the given dateFormat: MM/DD/YYYY e.g. <code>01/01/2000</code> <code>.after</code> Matches every item where the date attribute is after the given dateFormat: MM/DD/YYYY e.g. <code>01/01/2000</code>"},{"location":"builders/anilist/#date-attributes_1","title":"Date Attributes","text":"Date Attributes Description <code>start</code> Uses the anime start date attribute to match <code>end</code> Uses the anime end date attribute to match"},{"location":"builders/anilist/#number-searches","title":"Number Searches","text":"<p>Number attributes must use <code>.gt</code>, <code>.gte</code>, <code>.lt</code>, or <code>.lte</code> as a modifier.</p> <p>No number attribute can take multiple values.</p>"},{"location":"builders/anilist/#number-modifiers","title":"Number Modifiers","text":"Number Modifier Description <code>.gt</code> Matches every item where the number attribute is greater than the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.gte</code> Matches every item where the number attribute is greater than or equal to the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.lt</code> Matches every item where the number attribute is less than the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.lte</code> Matches every item where the number attribute is less than or equal to the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code>"},{"location":"builders/anilist/#number-attributes","title":"Number Attributes","text":"Number Attribute Description <code>duration</code> Description: Uses the duration attribute to match using minutesRestrictions: minimum: <code>1</code> <code>episodes</code> Description: Uses the number of episodes attribute to matchRestrictions: minimum: <code>1</code> <code>score</code> Description: Uses the score attribute to matchRestrictions: minimum: <code>1</code> <code>popularity</code> Description: Uses the popularity attribute to matchRestrictions: minimum: <code>1</code>"},{"location":"builders/anilist/#anilist-search-examples","title":"AniList Search Examples","text":"<p><pre><code>collections:\nCurrent Anime Season:\nanilist_search:\nseason:\nyear:\nsort_by: popular\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nFall 2020 Anime:\nanilist_search:\nseason: fall\nyear: 2020\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nPirates Anime:\nanilist_search:\ntag: Pirates\nsort_by: popular\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nTop Sports Anime:\nanilist_genre:\ngenre: Sports\nlimit: 20\nsort_by: popular\ncollection_order: custom\nsync_mode: sync\n</code></pre></p>"},{"location":"builders/filters/","title":"Filters","text":"<p>Filters allow for you to filter every item added to the collection/overlay/playlist from every builder using the <code>filters</code> attribute. </p>"},{"location":"builders/filters/#using-filters","title":"Using Filters","text":"<p>Filters cannot do anything alone they require the use of at least one Builder to function.</p> <p>You can have multiple filters in each set but an item must match at least one value from each filter to not be ignored. The values for each must match what Plex has including special characters in order to match.</p> <pre><code>filters:\ngenre: Action\ncountry: Germany\n</code></pre> <p>Anything that doesn't have both the Genre <code>Action</code> and the Country <code>Germany</code> will be ignored.</p> <p>Multiple Filter Sets can be given as a list. With multiple sets only one of the sets must pass for the item to not be ignored. </p> <pre><code>filters:\n- genre: Action\ncountry: Germany\n- genre: Comedy\ncountry: France\n</code></pre> <p>Anything that doesn't have either both the Genre <code>Action</code> and the Country <code>Germany</code> or the Genre <code>Comedy</code> and the Country <code>France</code> will be ignored.</p> <p>All filter options are listed below. To display items filtered out add <code>show_filtered: true</code> to the definition.</p> <p>You can use the <code>plex_all: true</code> builder to filter from your entire library.</p> <p>Filters can be very slow. Try to build or narrow your items using Plex Search or another Builder if possible. </p>"},{"location":"builders/filters/#table-annotations","title":"Table Annotations","text":"<p>1 Filters using the special <code>episodes</code>/<code>tracks</code> filter with the default percent.</p> <p>2 Also filters out missing movies/shows from being added to Radarr/Sonarr. These Values also cannot use the <code>count</code> modifiers.</p> <p>3 You can use <code>current_year</code> to have PMM use the current years value. This can be combined with a <code>-#</code> at the end to subtract that number of years. i.e. <code>current-2</code></p> <p>4 The actual numbers are pulled from the PMM-Mediastingers Repo.</p> <p>5 Also is a Tag Filter and can use all of those modifiers.</p>"},{"location":"builders/filters/#string-filters","title":"String Filters","text":"<p>String filters can be used with either no modifier or with <code>.not</code>, <code>.is</code>, <code>.isnot</code>, <code>.begins</code>, <code>.ends</code>, or <code>.regex</code>.</p> <p>String filters can take multiple values only as a list.</p>"},{"location":"builders/filters/#modifier","title":"Modifier","text":"String Modifier Description No Modifier Matches every item where the attribute contains the given string <code>.not</code> Matches every item where the attribute does not contain the given string <code>.is</code> Matches every item where the attribute exactly matches the given string <code>.isnot</code> Matches every item where the attribute does not exactly match the given string <code>.begins</code> Matches every item where the attribute begins with the given string <code>.ends</code> Matches every item where the attribute ends with the given string <code>.regex</code> Matches every item where the attribute matches the regex given"},{"location":"builders/filters/#attribute","title":"Attribute","text":"String Filter Description Movies Shows Seasons Episodes Artists Albums Track <code>title</code> Uses the title attribute to match \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>tmdb_title</code>2 Uses the title from TMDb to match \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>summary</code> Uses the summary attribute to match \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>studio</code> Uses the studio attribute to match \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>edition</code> Uses the edition attribute to match \u2705 \u274c \u274c \u274c \u274c \u274c \u274c <code>record_label</code> Uses the record label attribute to match \u274c \u274c \u274c \u274c \u274c \u2705 \u274c <code>folder</code> Uses the item's folder to match \u274c \u2705 \u274c \u274c \u2705 \u274c \u274c <code>filepath</code> Uses the item's filepath to match \u2705 \u27051 \u27051 \u2705 \u27051 \u27051 \u2705 <code>audio_track_title</code> Uses the audio track titles to match \u2705 \u27051 \u27051 \u2705 \u27051 \u27051 \u2705 <code>video_codec</code> Uses the video codec tags to match \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>video_profile</code> Uses the video profile tags to match \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>audio_codec</code> Uses the audio codec tags to match \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>audio_profile</code> Uses the audio profile tags to match \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c"},{"location":"builders/filters/#tag-filters","title":"Tag Filters","text":"<p>Tag filters can be used with either no modifier or with <code>.not</code>.</p> <p>Tag filters can take multiple values as a list or a comma-separated string.</p>"},{"location":"builders/filters/#modifier_1","title":"Modifier","text":"Tag Modifier Description No Modifier Matches every item where the attribute matches the given string <code>.not</code> Matches every item where the attribute does not match the given string <code>.regex</code> Matches every item where one value of this attribute matches the regex. <code>.count_lt</code> Matches every item where the attribute count is less than the given number <code>.count_lte</code> Matches every item where the attribute count is less than the given number <code>.count_gt</code> Matches every item where the attribute count is greater than the given number <code>.count_gte</code> Matches every item where the attribute count is greater than or equal to the given number"},{"location":"builders/filters/#attribute_1","title":"Attribute","text":"Tag Filters Description Movies Shows Seasons Episodes Artists Albums Track <code>actor</code> Uses the actor tags to match \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c <code>collection</code> Uses the collection tags to match \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>content_rating</code> Uses the content rating tags to match \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c <code>network</code> Uses the network tags to match \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>country</code> Uses the country tags to match \u2705 \u274c \u274c \u274c \u2705 \u274c \u274c <code>director</code> Uses the director tags to match \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c <code>genre</code> Uses the genre tags to match \u2705 \u2705 \u274c \u274c \u2705 \u2705 \u274c <code>label</code> Uses the label tags to match \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>producer</code> Uses the actor tags to match \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c <code>year</code>3 Uses the year tag to match \u2705 \u2705 \u2705 \u2705 \u274c \u2705 \u2705 <code>writer</code> Uses the writer tags to match \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c <code>resolution</code> Uses the resolution tag to match \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>audio_language</code> Uses the audio language tags to match \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>subtitle_language</code> Uses the subtitle language tags to match \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>tmdb_genre</code>2 Uses the genres from TMDb to match \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>tmdb_keyword</code>2 Uses the keywords from TMDb to match \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>origin_country</code>2 Uses TMDb origin country ISO 3166-1 alpha-2 codes to matchExample: <code>origin_country: us</code> \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>imdb_keyword</code>2 Uses the keywords from IMDb to match See Special for more attributes \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c"},{"location":"builders/filters/#boolean-filters","title":"Boolean Filters","text":"<p>Boolean Filters have no modifiers.</p>"},{"location":"builders/filters/#attribute_2","title":"Attribute","text":"Boolean Filters Description Movies Shows Seasons Episodes Artists Albums Track <code>has_collection</code> Matches every item that has or does not have a collection \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>has_edition</code> Matches every item that has or does not have an edition \u2705 \u274c \u274c \u274c \u274c \u274c \u274c <code>has_stinger</code> Matches every item that has a media stinger (After/During Credits Scene) \u2705 \u274c \u274c \u274c \u274c \u274c \u274c <code>has_dolby_vision</code> Matches every item that has or does not have a dolby vision \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>has_overlay</code> Matches every item that has or does not have an overlay \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u274c"},{"location":"builders/filters/#date-filters","title":"Date Filters","text":"<p>Date filters can be used with either no modifier or with <code>.not</code>, <code>.before</code>, <code>.after</code>, or <code>.regex</code>.</p> <p>Date filters can NOT take multiple values.</p>"},{"location":"builders/filters/#modifier_2","title":"Modifier","text":"Date Modifier Description Format No Modifier Matches every item where the date attribute is in the last X days Format: number of dayse.g. <code>30</code> <code>.not</code> Matches every item where the date attribute is not in the last X days Format: number of dayse.g. <code>30</code> <code>.before</code> Matches every item where the date attribute is before the given date Format: MM/DD/YYYY or <code>today</code> for the current daye.g. <code>01/01/2000</code> <code>.after</code> Matches every item where the date attribute is after the given date Format: MM/DD/YYYY or <code>today</code> for the current daye.g. <code>01/01/2000</code> <code>.regex</code> Matches every item where the attribute matches the regex given N/A"},{"location":"builders/filters/#attribute_3","title":"Attribute","text":"Date Filters Description Movies Shows Seasons Episodes Artists Albums Track <code>release</code> Uses the release date attribute (originally available) to match \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>added</code> Uses the date added attribute to match \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>last_played</code> Uses the date last played attribute to match \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>first_episode_aired</code>2 Uses the first episode aired date to match \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>last_episode_aired</code>**2 Uses the last episode aired date to match \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>last_episode_aired_or_never</code>2 Similar to <code>last_episode_aired</code> but also includes those that haven't aired yet \u274c \u2705 \u274c \u274c \u274c \u274c \u274c"},{"location":"builders/filters/#number-filters","title":"Number Filters","text":"<p>Number filters must use <code>.gt</code>, <code>.gte</code>, <code>.lt</code>, or <code>.lte</code> as a modifier.</p> <p>Number filters can NOT take multiple values.</p>"},{"location":"builders/filters/#modifier_3","title":"Modifier","text":"Number Modifier Description Format No Modifier Matches every item where the number attribute is equal to the given number Format: numbere.g. <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.not</code> Matches every item where the number attribute is not equal to the given number Format: numbere.g. <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.gt</code> Matches every item where the number attribute is greater than the given number Format: numbere.g. <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.gte</code> Matches every item where the number attribute is greater than or equal to the given number Format: numbere.g. <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.lt</code> Matches every item where the number attribute is less than the given number Format: numbere.g. <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>.lte</code> Matches every item where the number attribute is less than or equal to the given number Format: numbere.g. <code>30</code>, <code>1995</code>, or <code>7.5</code>"},{"location":"builders/filters/#attribute_4","title":"Attribute","text":"Number Filters Description Movies Shows Seasons Episodes Artists Albums Track <code>year</code>3 Uses the year attribute to matchminimum: <code>1</code> \u2705 \u2705 \u2705 \u2705 \u274c \u2705 \u2705 <code>tmdb_year</code>23 Uses the year on TMDb to matchminimum: <code>1</code> \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>critic_rating</code> Uses the critic rating attribute to match<code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>audience_rating</code> Uses the audience rating attribute to match <code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c <code>user_rating</code> Uses the user rating attribute to match<code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>tmdb_vote_count</code>2 Uses the tmdb vote count to matchminimum: <code>1</code> \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>tmdb_vote_average</code>2 Uses the tmdb vote average rating to matchminimum: <code>0.0</code> \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>plays</code> Uses the plays attribute to matchminimum: <code>1</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>duration</code> Uses the duration attribute to match using minutesminimum: <code>0.0</code> \u2705 \u2705 \u274c \u2705 \u274c \u274c \u2705 <code>channels</code> Uses the audio channels attribute to matchminimum: <code>0</code> \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>height</code> Uses the height attribute to matchminimum: <code>0</code> \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>width</code> Uses the width attribute to matchminimum: <code>0</code> \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>aspect</code> Uses the aspect attribute to matchminimum: <code>0.0</code> \u2705 \u27051 \u27051 \u2705 \u274c \u274c \u274c <code>versions</code> Uses the number of versions found to matchminimum: <code>0</code> \u2705 \u27051 \u27051 \u2705 \u27051 \u27051 \u2705 <code>stinger_rating</code>4 Uses the media stinger rating to match. The media stinger rating is if the after/during credits scene is worth staying for.minimum: <code>0</code> \u2705 \u274c \u274c \u274c \u274c \u274c \u274c"},{"location":"builders/filters/#special-filters","title":"Special Filters","text":"<p>Special Filters each have their own set of rules for how they're used.</p>"},{"location":"builders/filters/#attribute_5","title":"Attribute","text":"Special Filters Description Movies Shows Seasons Episodes Artists Albums Track <code>history</code> Uses the release date attribute (originally available) to match dates throughout history<code>day</code>: Match the Day and Month to Today's Date<code>month</code>: Match the Month to Today's Date<code>1-30</code>: Match the Day and Month to Today's Date or <code>1-30</code> days before Today's Date \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>episodes</code> Uses the item's episodes attributes to match  Use the <code>percentage</code> attribute given a number between 0-100 to determine the percentage of an items episodes that must match the sub-filter. \u274c \u2705 \u2705 \u274c \u274c \u274c \u274c <code>seasons</code> Uses the item's seasons attributes to match  Use the <code>percentage</code> attribute given a number between 0-100 to determine the percentage of an items seasons that must match the sub-filter. \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>tracks</code> Uses the item's tracks attributes to match  Use the <code>percentage</code> attribute given a number between 0-100 to determine the percentage of an items tracks that must match the sub-filter. \u274c \u274c \u274c \u274c \u2705 \u2705 \u274c <code>albums</code> Uses the item's albums attributes to match  Use the <code>percentage</code> attribute given a number between 0-100 to determine the percentage of an items albums that must match the sub-filter. \u274c \u274c \u274c \u274c \u2705 \u274c \u274c <code>original_language</code>2<code>original_language.not</code>2 Uses TMDb original language ISO 639-1 codes to matchExample: <code>original_language: en, ko</code> \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>tmdb_status</code>2<code>tmdb_status.not</code>2 Uses TMDb Status to matchValues: <code>returning</code>, <code>planned</code>, <code>production</code>, <code>ended</code>, <code>canceled</code>, <code>pilot</code> \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>tmdb_type</code>2<code>tmdb_type.not</code>2 Uses TMDb Type to matchValues: <code>documentary</code>, <code>news</code>, <code>production</code>, <code>miniseries</code>, <code>reality</code>, <code>scripted</code>, <code>talk_show</code>, <code>video</code> \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>imdb_keyword</code>25 Uses the keywords from IMDb to match<code>keywords</code>: list of keywords to match<code>minimum_votes</code>: minimum number of votes keywords must have<code>minimum_relevant</code>: minimum number of relevant votes keywords must have<code>minimum_percentage</code>: minimum percentage of relevant votes keywords must have \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c"},{"location":"builders/filters/#collection-filter-examples","title":"Collection Filter Examples","text":"<p>A few examples are listed below:</p> <p><pre><code>collections:\n1080p Documentaries:\nplex_search:\nall:\ngenre: Documentary\nsummary: A collection of 1080p Documentaries\nfilters:\nresolution: 1080\n</code></pre> <pre><code>collections:\nDaniel Craig only James Bonds:\nimdb_list: https://www.imdb.com/list/ls006405458/\nfilters:\nactor: Daniel Craig\n</code></pre> <pre><code>collections:\nFrench Romance:\nplex_search:\nall:\ngenre: Romance\nfilters:\naudio_language: Fran\u00e7ais\n</code></pre> <pre><code>collections:\nRomantic Comedies:\nplex_search:\nall:\ngenre: Romance\nfilters:\ngenre: Comedy\n</code></pre> <pre><code>collections:\n9.0 Movies:\nplex_all: true\nfilters:\nrating.gte: 9\n</code></pre> <pre><code>collections:\nSummer 2020 Movies:\nplex_all: true\nfilters:\nrelease.after: 5/1/2020\nrelease.before: 8/31/2020\n</code></pre> <pre><code>collections:\nMovies Released in the Last 180 Days:\nplex_all: true\nfilters:\nrelease: 180\n</code></pre> <pre><code>collections:\nGood Adam Sandler Romantic Comedies:\nplex_search:\nall:\ngenre: Romance\nactor: Adam Sandler\nfilters:\ngenre: Comedy\nrating.gte: 7\n</code></pre> <pre><code>collections:\nMovies with Commentary:\nplex_all: true\nfilters:\naudio_track_title: Commentary\n</code></pre></p>"},{"location":"builders/flixpatrol/","title":"FlixPatrol Builders","text":"<p>You can find items using the features of FlixPatrol.com (FlixPatrol).</p> <p>No configuration is required for this builder.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>flixpatrol_top</code> Finds every item from FlixPatrol's Top Platform Lists based on the attributes provided. \u2705 \u2705 \u2705 <code>flixpatrol_popular</code> Finds every movie/show from FlixPatrol's Popular Movies/Shows Lists based on the attributes provided. \u2705 \u2705 \u2705 <code>flixpatrol_demographics</code> Finds every item from FlixPatrol's Demographics Lists based on the attributes provided. \u2705 \u2705 \u2705 <code>flixpatrol_url</code> Finds every item found at a FlixPatrol URL. \u2705 \u2705 \u2705"},{"location":"builders/flixpatrol/#flixpatrol-top-platform","title":"FlixPatrol Top Platform","text":"<p>Finds every item from FlixPatrol's Top Platform Lists based on the attributes provided.</p> <p>The only required attribute is <code>platform</code>.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p>"},{"location":"builders/flixpatrol/#top-platform-attributes","title":"Top Platform Attributes","text":"Attribute Description &amp; Values <code>platform</code> Description: Streaming Platform to filter on.Values: <code>netflix</code>, <code>hbo</code>, <code>disney</code>, <code>amazon</code>, <code>itunes</code>, <code>google</code>, <code>paramount_plus</code>, <code>hulu</code>, <code>vudu</code>, <code>imdb</code>, <code>amazon_prime</code>, <code>star_plus, apple_tv</code> <code>location</code> Description: Location to filter on.Default: <code>world</code>Values: <code>world</code>, <code>albania</code>, <code>argentina</code>, <code>armenia</code>, <code>australia</code>, <code>austria</code>, <code>azerbaijan</code>, <code>bahamas</code>, <code>bahrain</code>, <code>bangladesh</code>, <code>belarus</code>, <code>belgium</code>, <code>belize</code>, <code>benin</code>, <code>bolivia</code>, <code>bosnia_and_herzegovina</code>, <code>botswana</code>, <code>brazil</code>, <code>bulgaria</code>, <code>burkina_faso</code>, <code>cambodia</code>, <code>canada</code>, <code>chile</code>, <code>colombia</code>, <code>costa_rica</code>, <code>croatia</code>, <code>cyprus</code>, <code>czech_republic</code>, <code>denmark</code>, <code>dominican_republic</code>, <code>ecuador</code>, <code>egypt</code>, <code>estonia</code>, <code>finland</code>, <code>france</code>, <code>gabon</code>, <code>germany</code>, <code>ghana</code>, <code>greece</code>, <code>guatemala</code>, <code>guinea_bissau</code>, <code>haiti</code>, <code>honduras</code>, <code>hong_kong</code>, <code>hungary</code>, <code>iceland</code>, <code>india</code>, <code>indonesia</code>, <code>ireland</code>, <code>israel</code>, <code>italy</code>, <code>ivory_coast</code>, <code>jamaica</code>, <code>japan</code>, <code>jordan</code>, <code>kazakhstan</code>, <code>kenya</code>, <code>kuwait</code>, <code>kyrgyzstan</code>, <code>laos</code>, <code>latvia</code>, <code>lebanon</code>, <code>lithuania</code>, <code>luxembourg</code>, <code>malaysia</code>, <code>maldives</code>, <code>mali</code>, <code>malta</code>, <code>mexico</code>, <code>moldova</code>, <code>mongolia</code>, <code>montenegro</code>, <code>morocco</code>, <code>mozambique</code>, <code>namibia</code>, <code>netherlands</code>, <code>new_zealand</code>, <code>nicaragua</code>, <code>niger</code>, <code>nigeria</code>, <code>north_macedonia</code>, <code>norway</code>, <code>oman</code>, <code>pakistan</code>, <code>panama</code>, <code>papua_new_guinea</code>, <code>paraguay</code>, <code>peru</code>, <code>philippines</code>, <code>poland</code>, <code>portugal</code>, <code>qatar</code>, <code>romania</code>, <code>russia</code>, <code>rwanda</code>, <code>salvador</code>, <code>saudi_arabia</code>, <code>senegal</code>, <code>serbia</code>, <code>singapore</code>, <code>slovakia</code>, <code>slovenia</code>, <code>south_africa</code>, <code>south_korea</code>, <code>spain</code>, <code>sri_lanka</code>, <code>sweden</code>, <code>switzerland</code>, <code>taiwan</code>, <code>tajikistan</code>, <code>tanzania</code>, <code>thailand</code>, <code>togo</code>, <code>trinidad_and_tobago</code>, <code>turkey</code>, <code>turkmenistan</code>, <code>uganda</code>, <code>ukraine</code>, <code>united_arab_emirates</code>, <code>united_kingdom</code>, <code>united_states</code>, <code>uruguay</code>, <code>uzbekistan</code>, <code>venezuela</code>, <code>vietnam</code>, <code>zambia</code>, <code>zimbabwe</code> <code>time_window</code> Description: Time window to filter on.Default: <code>today</code>Values: <code>today</code>, <code>yesterday</code>,<code>this_week</code>, <code>last_week</code>, <code>this_month</code>, <code>last_month</code>, <code>this_year</code>, <code>last_year</code> <code>limit</code> Description: Number of items to return.Default: <code>10</code>Values: Integer greater than 0 <pre><code>collections:\nUS Netflix Monthly Top 20:\nflixpatrol_top:\nplatform: netflix\nlocation: united_states\ntime_window: this_month\nlimit: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/flixpatrol/#flixpatrol-popular","title":"FlixPatrol Popular","text":"<p>Finds every movie/show from FlixPatrol's Popular Movies/Shows Lists based on the attributes provided.</p> <p>The only required attribute is <code>source</code>.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p>"},{"location":"builders/flixpatrol/#popular-attributes","title":"Popular Attributes","text":"Attribute Description <code>source</code> Description: Source to filter on.Values: <code>movie_db</code>, <code>facebook</code>, <code>google</code>, <code>twitter</code>, <code>twitter_trends</code>, <code>instagram</code>, <code>instagram_trends</code>, <code>youtube</code>, <code>imdb</code>, <code>letterboxd</code>, <code>rotten_tomatoes</code>, <code>tmdb</code>, <code>trakt</code> <code>time_window</code> Description: Time window to filter on.Default: <code>today</code>Values: <code>today</code>, <code>yesterday</code>,<code>this_week</code>, <code>last_week</code>, <code>this_month</code>, <code>last_month</code>, <code>this_year</code>, <code>last_year</code> <code>limit</code> Description: Number of items to return.Default: <code>10</code>Values: Integer greater than 0 <pre><code>collections:\nInstagram Popular:\nflixpatrol_popular:\nsource: instagram\ntime_window: all\nlimit: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/flixpatrol/#flixpatrol-demographics","title":"FlixPatrol Demographics","text":"<p>Finds every item from FlixPatrol's Demographics Lists based on the attributes provided.</p> <p>The only required attribute is <code>generation</code>.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p>"},{"location":"builders/flixpatrol/#demographics-attribute","title":"Demographics Attribute","text":"Attribute Description <code>generation</code> Generation to filter on.Values: <code>all</code>, <code>boomers</code>, <code>x</code>, <code>y</code>, <code>z</code> <code>gender</code> Gender to filter on.Default: <code>all</code>Values: <code>all</code>, <code>men</code>, <code>women</code> <code>location</code> Location to filter on.Default: <code>world</code>Values: <code>world</code>, <code>brazil</code>, <code>canada</code>, <code>france</code>, <code>germany</code>, <code>india</code>, <code>mexico</code>,  <code>united_kingdom</code>, <code>united_states</code> <code>limit</code> Number of items to return.Default: <code>10</code>Values: Integer greater than 0 <pre><code>collections:\nGen X Male US Demographic:\nflixpatrol_demographics:\ngeneration: x\ngender: men\nlocation: united_states limit: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/flixpatrol/#flixpatrol-url","title":"FlixPatrol URL","text":"<p>Finds every item found at a FlixPatrol URL.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nUS Netflix Monthly:\nflixpatrol_url: https://flixpatrol.com/top10/netflix/united-states/2021-11/full/\ncollection_order: custom\nsync_mode: sync\nInstagram Monthly Popular:\nflixpatrol_url: https://flixpatrol.com/popular/movies/instagram/all-time/\ncollection_order: custom\nsync_mode: sync\nGen X Male US Demographic:\nflixpatrol_url: https://flixpatrol.com/demographics/generation-x/men/united-states/\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/icheckmovies/","title":"ICheckMovies Builders","text":"<p>You can find items using the lists on ICheckMovies.com (ICheckMovies). </p> <p>No configuration is required for these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>icheckmovies_list</code> Finds every movie in the ICheckMovies List \u2705 \u274c \u2705 <code>icheckmovies_list_details</code> Finds every movie in the ICheckMovies List and updates the collection with the description of the ICheckMovies list \u2705 \u274c \u2705"},{"location":"builders/icheckmovies/#icheckmovies-list","title":"ICheckMovies List","text":"<p>Finds every movie in the ICheckMovies List.</p> <p>The expected input is a ICheckMovies List URL. Multiple values are supported as either a list or a comma-separated string.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nVulture\u2019s 101 Best Movie Endings:\nicheckmovies_list: https://www.icheckmovies.com/lists/academy+award+-+best+picture\ncollection_order: custom\nsync_mode: sync\n</code></pre> <ul> <li>You can update the collection details with the ICheckMovies List's description by using <code>icheckmovies_list_details</code>.</li> <li>You can specify multiple collections in <code>icheckmovies_list_details</code> but it will only use the first one to update the collection summary.</li> </ul> <pre><code>collections:\nVulture\u2019s 101 Best Movie Endings:\nicheckmovies_list_details: https://www.icheckmovies.com/lists/academy+award+-+best+picture\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/imdb/","title":"IMDb Builders","text":"<p>You can find items using the features of IMDb.com (IMDb).</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>imdb_id</code> Gets the movie/show specified. \u2705 \u2705 \u274c <code>imdb_chart</code> Gets every movie/show in an IMDb Chart like IMDb Top 250 Movies. \u2705 \u2705 \u2705 <code>imdb_list</code> Gets every movie/show in an IMDb List, IMDb Keyword Search, or IMDb Search. \u2705 \u2705 \u2705 <code>imdb_watchlist</code> Gets every movie/show in an IMDb User's Watchlist. \u2705 \u2705 \u2705"},{"location":"builders/imdb/#imdb-id","title":"IMDb ID","text":"<p>Gets the movie/show specified.</p> <p>The expected input is an IMDb ID. Multiple values are supported as either a list or a comma-separated string.</p> <pre><code>collections:\nStar Wars (Animated Shows):\nimdb_id: tt0458290, tt2930604\n</code></pre>"},{"location":"builders/imdb/#imdb-chart","title":"IMDb Chart","text":"<p>Finds every item in an IMDb Chart.</p> <p>The expected input are the options below. Multiple values are supported as either a list or a comma-separated string.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> Name Attribute Works with Movies Works with Shows Box Office <code>box_office</code> \u2705 \u274c Most Popular Movies <code>popular_movies</code> \u2705 \u274c Top 250 Movies <code>top_movies</code> \u2705 \u274c Top Rated English Movies <code>top_english</code> \u2705 \u274c Most Popular TV Shows <code>popular_shows</code> \u274c \u2705 Top 250 TV Shows <code>top_shows</code> \u274c \u2705 Top Rated Indian Movies <code>top_indian</code> \u2705 \u274c Lowest Rated Movies <code>lowest_rated</code> \u2705 \u274c <pre><code>collections:\nIMDb Top 250:\nimdb_chart: top_movies\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/imdb/#imdb-list","title":"IMDb List","text":"<p>Finds every item in an IMDb List, Keyword Search, Title Search, or Topic Search.</p> <p>The expected input is an IMDb List URL or IMDb Search URL. Multiple values are supported as a list only a comma-separated string will not work.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <p><pre><code>collections:\nJames Bonds:\nimdb_list: https://www.imdb.com/list/ls006405458\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nIMDb Top 250:\nimdb_list: https://www.imdb.com/search/title/?groups=top_250\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nChristmas:\nimdb_list:\n- https://www.imdb.com/list/ls025976544/\n- https://www.imdb.com/list/ls003863000/\n- https://www.imdb.com/list/ls027454200/\n- https://www.imdb.com/list/ls027886673/\n- https://www.imdb.com/list/ls097998599/\nsync_mode: sync\ncollection_order: alpha\n</code></pre></p> <p>You can also limit the number of items to search for by using the <code>limit</code> and <code>url</code> parameters under <code>imdb_list</code>.</p> <pre><code>collections:\nIMDb Popular:\nimdb_list:\nurl: https://www.imdb.com/search/title/?title_type=feature,tv_movie,documentary,short\nlimit: 50\ncollection_order: custom\nsync_mode: sync\n</code></pre> <p>This can be used for multiple lists as seen below.</p> <pre><code>collections:\nTop Action:\nimdb_list:\n- url: https://www.imdb.com/search/title/?title_type=feature&amp;release_date=1990-01-01,&amp;user_rating=5.0,10.0&amp;num_votes=100000,&amp;genres=action\nlimit: 100\n- url: https://www.imdb.com/search/title/?title_type=feature&amp;release_date=1990-01-01,&amp;user_rating=5.0,10.0&amp;num_votes=100000,&amp;genres=action&amp;sort=user_rating,desc\nlimit: 100\n</code></pre> <p>You can also find episodes using <code>imdb_list</code> like so.</p> <pre><code>collections:\nThe Simpsons Top 100 Episodes:\ncollection_order: custom\nbuilder_level: episode\nsync_mode: sync\nimdb_list:\nurl: https://www.imdb.com/search/title/?series=tt0096697&amp;sort=user_rating,desc\nlimit: 100\nsummary: The top 100 Simpsons episodes by IMDb user rating\n</code></pre>"},{"location":"builders/imdb/#imdb-watchlist","title":"IMDb Watchlist","text":"<p>Finds every item in an IMDb User's Watchlist.</p> <p>The expected input is an IMDb User ID (example: <code>ur12345678</code>). Multiple values are supported as a list or as a comma-separated string.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <p><pre><code>collections:\nMy Watch Watchlist:\nimdb_watchlist: ur64054558\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nMy Friends Watchlists:\nimdb_watchlist: ur64054558, ur12345678\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nMy Friends Watchlists:\nimdb_watchlist: - ur64054558\n- ur12345678\ncollection_order: custom\nsync_mode: sync\n</code></pre></p>"},{"location":"builders/letterboxd/","title":"Letterboxd Builders","text":"<p>You can find items using the lists on Letterboxd.com (Letterboxd). </p> <p>No configuration is required for these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>letterboxd_list</code> Finds every movie in the Letterboxd List \u2705 \u274c \u2705 <code>letterboxd_list_details</code> Finds every movie in the Letterboxd List and updates the collection with the description of the Letterboxd list \u2705 \u274c \u2705"},{"location":"builders/letterboxd/#letterboxd-list","title":"Letterboxd List","text":"<p>Finds every movie in the Letterboxd List or Letterboxd Films Search.</p> <p>The expected input is a Letterboxd List URL or Letterboxd Film Search URL. Multiple values are supported as either a list or a comma-separated string.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <p>Using the <code>limit</code> filter attribute is recommended when using a Letterboxd Film Search as the number of results returned could be very large.</p> <pre><code>collections:\nVulture\u2019s 101 Best Movie Endings:\nletterboxd_list: https://letterboxd.com/brianformo/list/vultures-101-best-movie-endings/\ncollection_order: custom\nsync_mode: sync\n</code></pre> <ul> <li>You can update the collection details with the Letterboxd List's description by using <code>letterboxd_list_details</code>.</li> <li>You can specify multiple collections in <code>letterboxd_list_details</code> but it will only use the first one to update the collection summary.</li> </ul> <pre><code>collections:\nVulture\u2019s 101 Best Movie Endings:\nletterboxd_list_details: https://letterboxd.com/brianformo/list/vultures-101-best-movie-endings/\ncollection_order: custom\nsync_mode: sync\n</code></pre> <p>You can add different filters directly to this builder.</p> Filter Attribute Description <code>limit</code> Description: Max number of items per returnedValues:  number greater than <code>1</code> <code>rating</code> Description: Search for the specified rating rangeValues:  range of int i.e. <code>80-100</code> <code>year</code> Description: Search for the specified year rangeValues:  range of int i.e. <code>1990-1999</code> <code>note</code> Description: Search for the specified value in the noteValues:  Any String <pre><code>collections:\nVulture\u2019s 101 Best Movie Endings From the 90s:\nletterboxd_list_details: url: https://letterboxd.com/brianformo/list/vultures-101-best-movie-endings/\nyear: 1990-1999\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/mdblist/","title":"MdbList Builders","text":"<p>You can find items using the features of MdbList.com (MdbList).</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>mdblist_list</code> Gets every movie/show in a MdbList List. \u2705 \u2705 \u2705"},{"location":"builders/mdblist/#mdblist-list","title":"MdbList List","text":"<p>Finds every item in a MdbList List.</p> <p>The expected input is an MdbList List URL. Multiple values are supported as a list only a comma-separated string will not work.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <p><pre><code>collections:\nTop Movies of The Week:\nmdblist_list: https://mdblist.com/lists/linaspurinis/top-watched-movies-of-the-week\ncollection_order: custom\nsync_mode: sync\n</code></pre> You can also limit the number of items to search for by using the <code>limit</code> and <code>url</code> attributes under <code>mdblist_list</code>.</p> <p><pre><code>collections:\nTop 10 Movies of The Week:\nmdblist_list: url: https://mdblist.com/lists/linaspurinis/top-watched-movies-of-the-week\nlimit: 10\ncollection_order: custom\nsync_mode: sync\n</code></pre> You can also sort the items by using the <code>sort_by</code> and <code>url</code> attributes under <code>mdblist_list</code>.</p> <p>The default <code>sort_by</code> when it's not specified is <code>rank.asc</code>.</p>"},{"location":"builders/mdblist/#sort-options","title":"Sort Options","text":"Option Description <code>rank.asc</code><code>rank.desc</code> Sort by MdbList Rank <code>score.asc</code><code>score.desc</code> Sort by MdbList Score <code>score_average.asc</code><code>score_average.desc</code> Sort by MdbList Average Score <code>released.asc</code><code>released.desc</code> Sort by Release Date <code>imdbrating.asc</code><code>imdbrating.desc</code> Sort by IMDb Rating <code>imdbvotes.asc</code><code>imdbvotes.desc</code> Sort by IMDb Votes <code>imdbpopular.asc</code><code>imdbpopular.desc</code> Sort by IMDb Popular <code>tmdbpopular.asc</code><code>tmdbpopular.desc</code> Sort by TMDb Popular <code>rogerebert.asc</code><code>rogerebert.desc</code> Sort by RogerEvert Score <code>rtomatoes.asc</code><code>rtomatoes.desc</code> Sort by Rotten Tomatoes Score <code>metacritic.asc</code><code>metacritic.desc</code> Sort by Metacritic Score <code>myanimelist.asc</code><code>myanimelist.desc</code> Sort by MyAnimeList Score <code>budget.asc</code><code>budget.desc</code> Sort by Budget <code>revenue.asc</code><code>revenue.desc</code> Sort by Revenue <code>added.asc</code><code>added.desc</code> Sort by Date Added <p>For these sorts to be reflected in your collection you must use <code>collection_order: custom</code>.</p> <pre><code>collections:\nTop 10 Movies of The Week:\nmdblist_list: url: https://mdblist.com/lists/linaspurinis/top-watched-movies-of-the-week\nsort_by: imdbrating.desc\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/","title":"MyAnimeList Builders","text":"<p>You can find anime using the features of MyAnimeList.net (MyAnimeList).</p> <p>Configuring MyAnimeList in the config is required for any of these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>mal_search</code> Finds every anime in a MyAnimeList Search list \u2705 \u2705 \u2705 <code>mal_all</code> Finds every anime in MyAnimeList's Top All Anime list \u2705 \u2705 \u2705 <code>mal_airing</code> Finds every anime in MyAnimeList's Top Airing Anime list \u2705 \u2705 \u2705 <code>mal_upcoming</code> Finds every anime in MyAnimeList's Top Upcoming Anime list \u2705 \u2705 \u2705 <code>mal_tv</code> Finds every anime in MyAnimeList's Top Anime TV Series list \u2705 \u2705 \u2705 <code>mal_movie</code> Finds every anime in MyAnimeList's Top Anime Movies list \u2705 \u2705 \u2705 <code>mal_ova</code> Finds every anime in MyAnimeList's Top Anime OVA Series list \u2705 \u2705 \u2705 <code>mal_special</code> Finds every anime in MyAnimeList's Top Anime Specials list \u2705 \u2705 \u2705 <code>mal_popular</code> Finds every anime in MyAnimeList's Most Popular Anime list \u2705 \u2705 \u2705 <code>mal_favorite</code> Finds every anime in MyAnimeList's Most Favorited Anime list \u2705 \u2705 \u2705 <code>mal_suggested</code> Finds the suggested anime in by MyAnimeList for the authorized user \u2705 \u2705 \u2705 <code>mal_id</code> Finds the anime specified by the MyAnimeList ID \u2705 \u2705 \u274c <code>mal_userlist</code> Finds anime in MyAnimeList User's Anime list the options are detailed below \u2705 \u2705 \u2705 <code>mal_season</code> Finds anime in MyAnimeList's Seasonal Anime list the options are detailed below \u2705 \u2705 \u2705"},{"location":"builders/myanimelist/#myanimelist-search","title":"MyAnimeList Search","text":"<p>Gets every anime in a MyAnimeList search. The different sub-attributes are detailed below. At least one attribute is required.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> Attribute Description <code>sort_by</code> Description: Sort Order to returnValues: <code>mal_id.desc</code>, <code>mal_id.asc</code>, <code>title.desc</code>, <code>title.asc</code>, <code>type.desc</code>, <code>type.asc</code>, <code>rating.desc</code>, <code>rating.asc</code>, <code>start_date.desc</code>, <code>start_date.asc</code>, <code>end_date.desc</code>, <code>end_date.asc</code>, <code>episodes.desc</code>, <code>episodes.asc</code>, <code>score.desc</code>, <code>score.asc</code>, <code>scored_by.desc</code>, <code>scored_by.asc</code>, <code>rank.desc</code>, <code>rank.asc</code>, <code>popularity.desc</code>, <code>popularity.asc</code>, <code>members.desc</code>, <code>members.asc</code>, <code>favorites.desc</code>, <code>favorites.asc</code> <code>limit</code> Description: Don't return more then this numberValues: Number of Anime to query from MyAnimeList <code>query</code> Description: Text query to search for <code>prefix</code> Description: Results must begin with this prefix <code>type</code> Description: Type of Anime to search forValues: <code>tv</code>, <code>movie</code>, <code>ova</code>, <code>special</code>, <code>ona</code>, <code>music</code> <code>status</code> Description: Status to search forValues: <code>airing</code>, <code>complete</code>, <code>upcoming</code> <code>genre</code> Description: Comma-separated String of Genres to include using <code>,</code> for <code>AND</code> and <code>|</code> for <code>OR</code>Values: Genre Name or ID <code>genre.not</code> Description: Comma-separated String of Genres to exclude using <code>,</code> for <code>AND</code> and <code>|</code> for <code>OR</code>Values: Genre Name or ID <code>studio</code> Description: Comma-separated String of Genres to include using <code>,</code> for <code>AND</code> and <code>|</code> for <code>OR</code>Values: Studio Name or ID <code>content_rating</code> Description: Content Rating to search forValues: <code>g</code>, <code>pg</code>, <code>pg13</code>, <code>r17</code>, <code>r</code>, <code>rx</code> <code>score.gt</code>/<code>score.gte</code> Description: Score must be greater than the given numberValues: Float between <code>0.00</code>-<code>10.00</code> <code>score.lt</code>/<code>score.lte</code> Description: Score must be less than the given numberValues: Float between <code>0.00</code>-<code>10.00</code> <code>sfw</code> Description: Results must be Safe for WorkValue: <code>true</code> <ul> <li>Studio options can be found on MyAnimeList's Search Page.</li> <li>Genre options can be found on MyAnimeList's Search Page.</li> <li>To find the ID click on a Studio or Genre in the link above and there should be a number in the URL that's the <code>id</code>.</li> <li>For example if the url is <code>https://myanimelist.net/anime/producer/4/Bones</code> the <code>id</code> would be <code>4</code> or if the url is <code>https://myanimelist.net/anime/genre/1/Action</code> the <code>id</code> would be <code>1</code>.</li> </ul> <pre><code>collections:\nTop Action Anime:\nmal_search:\nlimit: 100\nsort_by: score.desc\ngenre: Action\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-top-all","title":"MyAnimeList Top All","text":"<p>Gets every anime in MyAnimeList's Top Airing Anime list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop All Anime:\nmal_all: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-top-airing","title":"MyAnimeList Top Airing","text":"<p>Gets every anime in MyAnimeList's Top Airing Anime list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop Airing Anime:\nmal_airing: 10\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-top-upcoming","title":"MyAnimeList Top Upcoming","text":"<p>Gets every anime in MyAnimeList's Top Upcoming Anime list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop Upcoming Anime:\nmal_upcoming: 10\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-top-tv-series","title":"MyAnimeList Top TV Series","text":"<p>Gets every anime in MyAnimeList's Top Anime TV Series list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop Anime TV Series:\nmal_tv: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-top-movies","title":"MyAnimeList Top Movies","text":"<p>Gets every anime in MyAnimeList's Top Anime Movies list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop Anime Movies:\nmal_movie: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-top-ova-series","title":"MyAnimeList Top OVA Series","text":"<p>Gets every anime in MyAnimeList's Top Anime OVA Series list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop Anime OVA Series:\nmal_ova: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-top-specials","title":"MyAnimeList Top Specials","text":"<p>Gets every anime in MyAnimeList's Top Anime Specials list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop Anime Specials:\nmal_special: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-most-popular","title":"MyAnimeList Most Popular","text":"<p>Gets every anime in MyAnimeList's Most Popular Anime list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nMost Popular Anime:\nmal_popular: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-most-favorited","title":"MyAnimeList Most Favorited","text":"<p>Gets every anime in MyAnimeList's Most Favorited Anime list. (Maximum: 500)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nMost Favorited Anime:\nmal_favorite: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-suggested","title":"MyAnimeList Suggested","text":"<p>Gets the suggested anime in by MyAnimeList for the authorized user. (Maximum: 100)</p> <p>The expected input value is a single integer value of how many movies/shows to query.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nSuggested Anime:\nmal_suggested: 20\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-id","title":"MyAnimeList ID","text":"<p>Gets the anime specified by the MyAnimeList ID.</p> <p>The expected input is a MyAnimeList ID. Multiple values are supported as either a list or a comma-separated string.</p> <pre><code>collections:\nCowboy Bebop:\nmal_id: 23, 219\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-userlist","title":"MyAnimeList UserList","text":"<p>Gets anime in MyAnimeList User's Anime list. The different sub-attributes are detailed below. The only required attribute is <code>username</code></p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> Attribute Description <code>username</code> Description: A user's MyAnimeList Username or <code>@me</code> for the authorized user <code>status</code> Description: Status to search forDefault: <code>all</code>Values:<code>all</code>All Anime List<code>watching</code>Currently Watching List<code>completed</code>Completed List<code>on_hold</code>On Hold List<code>dropped</code>Dropped List<code>plan_to_watch</code>Plan to Watch <code>sort_by</code> Description: Sort Order to returnDefault: <code>score</code>Values:<code>score</code>Sort by Score<code>last_updated</code>Sort by Last Updated<code>title</code>Sort by Anime Title<code>start_date</code>Sort by Start Date <code>limit</code> Description: Don't return more then this numberDefault: <code>100</code>Values: Number of Anime to query from MyAnimeList (max: 1000) <pre><code>collections:\nCurrently Watching Anime:\nmal_userlist:\nusername: \"@me\"\nstatus: watching\nsort_by: score\nlimit: 500\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/myanimelist/#myanimelist-seasonal","title":"MyAnimeList Seasonal","text":"<p>Gets anime in MyAnimeList's Seasonal Anime list the options are detailed below. </p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> Attribute Description &amp; Values <code>season</code> Description: Season to searchDefault: <code>current</code>Values:<code>winter</code>For winter season January, February, March<code>spring</code>For spring season April, May, June<code>summer</code>For summer season July, August, September<code>fall</code>For fall season October, November, December<code>current</code>For the current Season <code>year</code> Description: Year to searchDefault: Current YearValues: Number between <code>1917</code> and the current year. <code>sort_by</code> Description: Sort OrderDefault: <code>members</code>Values:<code>members</code>Sort by Most Members<code>score</code>Sort by Score <code>limit</code> Description: Don't return more then this numberDefault: <code>100</code>Values: Number of Anime to query from MyAnimeList (max: 500) <code>starting_only</code> Description: Return only anime that began airing in the selected seasonDefault: <code>False</code>Values: <code>True</code> or <code>False</code> <p><pre><code>collections:\nCurrent Anime Season:\nmal_season:\nsort_by: members\nlimit: 50\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nFall 2020 Anime:\nmal_season:\nseason: fall\nyear: 2020\nlimit: 50\ncollection_order: custom\nsync_mode: sync\n</code></pre></p>"},{"location":"builders/plex/","title":"Plex Builders","text":"<p>This builder finds its items by using the features of Plex.</p> <p>No configuration is required for these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>plex_all</code> Gets every movie/show in your library. Useful with Filters \u2705 \u2705 \u274c <code>plex_watchlist</code> Gets every movie/show in your Watchlist. \u2705 \u2705 \u2705 <code>plex_pilots</code> Gets the first episode of every show in your library \u274c \u2705 \u2705 <code>plex_collectionless</code> Gets every movie/show that is not in a collection \u2705 \u2705 \u274c <code>plex_search</code> Gets every movie/show based on the search parameters provided \u2705 \u2705 \u2705"},{"location":"builders/plex/#plex-all","title":"Plex All","text":"<p>Finds every item in your library. Useful with Filters.</p> <p>The expected input is either true or false.</p> <pre><code>collections:\n9.0 Movies:\nplex_all: true\nfilters:\nrating.gte: 9\n</code></pre>"},{"location":"builders/plex/#plex-watchlist","title":"Plex Watchlist","text":"<p>Finds every item in your Watchlist.</p> <p>The expected input is the sort you want returned. It defaults to <code>added.asc</code>.</p>"},{"location":"builders/plex/#watchlist-sort-options","title":"Watchlist Sort Options","text":"Sort Option Description <code>title.asc</code><code>title.desc</code> Sort by Title <code>release.asc</code><code>release.desc</code> Sort by Release Date (Originally Available) <code>critic_rating.asc</code><code>critic_rating.desc</code> Sort by Critic Rating <code>added.asc</code><code>added.desc</code> Sort by Date Added to your Watchlist <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended.</p> <pre><code>collections:\nMy Watchlist:\nplex_watchlist: critic_rating.desc\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/plex/#plex-pilots","title":"Plex Pilots","text":"<p>Gets the first episode of every show in your library. This only works with <code>builder_level: episode</code></p> <pre><code>collections:\nPilots:\nbuilder_level: episode\nplex_pilots: true\n</code></pre>"},{"location":"builders/plex/#plex-collectionless","title":"Plex Collectionless","text":"<p>This is not needed if you're using Smart Label Collections.</p> <p>Finds every item that is not in a collection unless the collection is in the exclusion list. This is a special collection type to help keep your library looking correct. When items in your library are in multiple collections it can mess up how they're displayed in your library.</p> <p>For Example, if you have a <code>Marvel Cinematic Universe</code> Collection set to <code>Show this collection and its items</code> and an <code>Iron Man</code> Collection set to <code>Hide items in this collection</code> what happens is the show overrides the hide, and you end up with both the collections and the 3 Iron Man movies all displaying.</p> <p>Alternatively, if you set the <code>Marvel Cinematic Universe</code> Collection to <code>Hide items in this collection</code> then movies without a collection like <code>The Incredible Hulk</code> will be hidden from the library view.</p> <p>To combat the problem above you set all collections to <code>Hide items in this collection</code> then create a collection set to <code>Hide collection</code> and put every movie that you still want to display in that collection. </p> <p>With the variability of collections generated by the Plex Meta Manager maintaining a collection like this becomes very difficult, so in order to automate it, you can use <code>plex_collectionless</code>. You just have to tell it what collections to exclude or what collection prefixes to exclude.</p> <p>There are two attributes for <code>plex_collectionless</code>: * <code>exclude</code>: Exclude these Collections from being considered for collectionless.  * <code>exclude_prefix</code> Exclude Collections whose title or sort title starts with a prefix from being considered for collectionless. </p> <p>At least one exclusion is required.</p> <pre><code>collections:\nCollectionless:\nplex_collectionless:\nexclude_prefix:\n- \"!\"\n- \"+\"\n- \"~\"\nexclude: - Marvel Cinematic Universe\nsort_title: ~_Collectionless\ncollection_order: alpha\ncollection_mode: hide\n</code></pre> <ul> <li>Both <code>exclude</code> and <code>exclude_prefix</code> can take multiple values as a List.</li> <li>This is a known issue with Plex Collection and there is a Feature Suggestion detailing the issue more on their forms.</li> </ul>"},{"location":"builders/plex/#plex-search","title":"Plex Search","text":"<p>Uses Plex's Advanced Filters to find all items based on the search parameters provided.</p> <p>Any Advanced Filter made using the Plex UI should be able to be recreated using <code>plex_search</code>. If you're having trouble getting <code>plex_search</code> to work correctly, build the collection you want inside of Plex's Advanced Filters and take a screenshot of the parameters in the Plex UI and post it in either the Discussions or on Discord, and I'll do my best to help you. </p> <p>like Plex's Advanced Filters you have to start each search with either <code>any</code> or <code>all</code> as a base. You can only have one base attribute and all search attributes must be under the base.</p> <p>Inside the base attribute you can use any search below or nest more <code>any</code> or <code>all</code>. You can have as many nested <code>any</code> or <code>all</code> next to each other as you want. If using multiple <code>any</code> or <code>all</code> you will have to do so in the form of a list.  </p> <p>Note: To search by <code>season</code>, <code>episode</code>, <code>album</code>, or <code>track</code> you must use the <code>builder_level</code> Detail to change the type of items the collection holds.</p> <p>There are a couple other attributes you can have at the top level only along with the base attribute are:</p>"},{"location":"builders/plex/#special-attributes","title":"Special Attributes","text":"Attribute Description &amp; Values <code>limit</code> Description: The max number of item for the search.Default: <code>all</code>Values: <code>all</code> or a number greater than 0 <code>sort_by</code> Description: This will control how the filter is sorted in your library. You can do a multi-level sort using a list.Default: <code>random</code>Values: Any sort options for your search type in the Sorts Options Table <code>type</code> PLAYLIST SEARCHES ONLY Description: Allows different types of media to be searched for.Default: <code>movie</code>, <code>show</code>, or <code>artist</code> depending on library typeValues: <code>movie</code>, <code>show</code>, <code>season</code>, <code>episode</code>, <code>artist</code>, <code>album</code> or <code>track</code> <code>validate</code> Description: Determines if a collection/playlist will fail on a validation errorDefault: <code>true</code>Values: <code>true</code> or <code>false</code>"},{"location":"builders/plex/#sort-options","title":"Sort Options","text":"Sort Option Description Movies Shows Seasons Episodes Artists Albums Tracks <code>title.asc</code><code>title.desc</code> Sort by Title \u2705 \u2705 \u274c \u2705 \u2705 \u2705 \u2705 <code>season.asc</code><code>season.desc</code> Sort by Season \u274c \u274c \u2705 \u274c \u274c \u274c \u274c <code>show.asc</code><code>show.desc</code> Sort by Show \u274c \u274c \u2705 \u2705 \u274c \u274c \u274c <code>album_artist.asc</code><code>album_artist.desc</code> Sort by Album Artist \u274c \u274c \u274c \u274c \u274c \u2705 \u2705 <code>artist.asc</code><code>artist.desc</code> Sort by Artist \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>album.asc</code><code>album.desc</code> Sort by Album \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>year.asc</code><code>year.desc</code> Sort by Year \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>release.asc</code><code>release.desc</code> Sort by Release Date (Originally Available) \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>episode_release.asc</code><code>episode_release.desc</code> Sort by Episode Release Date (Originally Available) \u274c \u2705 \u2705 \u2705 \u274c \u274c \u274c <code>critic_rating.asc</code><code>critic_rating.desc</code> Sort by Critic Rating \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>audience_rating.asc</code><code>audience_rating.desc</code> Sort by Audience Rating \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c <code>user_rating.asc</code><code>user_rating.desc</code> Sort by User Rating \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>content_rating.asc</code><code>content_rating.desc</code> Sort by Content Rating \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>duration.asc</code><code>duration.desc</code> Sort by Duration \u2705 \u274c \u274c \u2705 \u274c \u274c \u2705 <code>progress.asc</code><code>progress.desc</code> Sort by Progress \u274c \u274c \u274c \u2705 \u274c \u274c \u274c <code>played.asc</code><code>played.desc</code> Sort by Date Last Played \u274c \u274c \u274c \u274c \u2705 \u2705 \u2705 <code>plays.asc</code><code>plays.desc</code> Sort by Number of Plays \u2705 \u274c \u274c \u2705 \u2705 \u2705 \u2705 <code>unplayed.asc</code><code>unplayed.desc</code> Sort by Unplayed \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>episode_added.asc</code><code>episode_added.desc</code> Sort by Last Episode Date Added \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>added.asc</code><code>added.desc</code> Sort by Date Added \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>viewed.asc</code><code>viewed.desc</code> Sort by Date Last Viewed \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c <code>rated.asc</code><code>rated.desc</code> Sort by Date Last Rated \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>popularity.asc</code><code>popularity.desc</code> Sort by Popularity \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>resolution.asc</code><code>resolution.desc</code> Sort by Resolution \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c <code>bitrate.asc</code><code>bitrate.desc</code> Sort by Bitrate \u2705 \u274c \u274c \u2705 \u274c \u274c \u2705 <code>random</code> Sort by Random \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705"},{"location":"builders/plex/#searches","title":"Searches","text":"<p>There are three fields per search option when using Plex's Advanced Filters in the Web UI. </p> <ol> <li>Attribute: What attribute you wish to search.</li> <li>Modifier: Which modifier to use.</li> <li>Value: Actual value to search.</li> </ol> <p>Example: <code>Attribute.Modifier: Value</code></p>"},{"location":"builders/plex/#string-searches","title":"String Searches","text":"<p>String searches can be used with either no modifier or with <code>.not</code>, <code>.is</code>, <code>.isnot</code>, <code>.begins</code>, or <code>.ends</code>.</p> <p>String search can take multiple values only as a list.</p>"},{"location":"builders/plex/#string-modifiers","title":"String Modifiers","text":"String Modifier Description Plex Web UI Display No Modifier Matches every item where the attribute contains the given string <code>contains</code> <code>.not</code> Matches every item where the attribute does not contain the given string <code>does not contain</code> <code>.is</code> Matches every item where the attribute exactly matches the given string <code>is</code> <code>.isnot</code> Matches every item where the attribute does not exactly match the given string <code>is not</code> <code>.begins</code> Matches every item where the attribute begins with the given string <code>begins with</code> <code>.ends</code> Matches every item where the attribute ends with the given string <code>ends with</code>"},{"location":"builders/plex/#string-attributes","title":"String Attributes","text":"String Search Description MovieLibraries ShowLibraries MusicLibraries <code>title</code> Uses the title attribute to match \u2705 \u2705 \u274c <code>episode_title</code> Uses the title attribute of the show's episodes to match \u274c \u2705 \u274c <code>studio</code> Uses the studio attribute to match \u2705 \u2705 \u274c <code>edition</code> Uses the edition attribute to match \u2705 \u274c \u274c <code>artist_title</code> Uses the Artist's Title attribute to match \u274c \u274c \u2705 <code>album_title</code> Uses the Album's Title attribute to match \u274c \u274c \u2705 <code>track_title</code> Uses the Track's Title attribute to match \u274c \u274c \u2705 <code>album_record_label</code> Uses the Album's Record Label attribute to match \u274c \u274c \u2705"},{"location":"builders/plex/#tag-searches","title":"Tag Searches","text":"<p>Tag searches can be used with either no modifier or with <code>.not</code> except for <code>decade</code> and <code>resolution</code> which can only be used with no modifier.</p> <p>Tag search can take multiple values as a list or a comma-separated string.</p>"},{"location":"builders/plex/#tag-modifiers","title":"Tag Modifiers","text":"Tag Modifier Description Plex Web UI Display No Modifier Matches every item where the attribute matches the given string <code>is</code> <code>.not</code> Matches every item where the attribute does not match the given string <code>is not</code> <code>.regex</code> Matches every item where one value of this attribute matches the regex. <code>N/A</code>"},{"location":"builders/plex/#tag-attributes","title":"Tag Attributes","text":"Tag Search Description MovieLibraries ShowLibraries MusicLibraries <code>actor</code> Uses the actor tags to match \u2705 \u2705 \u274c <code>audio_language</code> Uses the audio language tags to match \u2705 \u2705 \u274c <code>collection</code> Uses the collection tags to match for top level collections \u2705 \u2705 \u274c <code>season_collection</code> Uses the collection tags to match for season collections \u274c \u2705 \u274c <code>episode_collection</code> Uses the collection tags to match for episode collections \u274c \u2705 \u274c <code>content_rating</code> Uses the content rating tags to match \u2705 \u2705 \u274c <code>country</code> Uses the country tags to match \u2705 \u2705 \u274c <code>decade</code>1 Uses the year tag to match the decade \u2705 \u274c \u274c <code>director</code> Uses the director tags to match \u2705 \u274c \u274c <code>genre</code> Uses the genre tags to match \u2705 \u2705 \u274c <code>label</code> Uses the label tags to match for top level collections \u2705 \u2705 \u274c <code>season_label</code> Uses the label tags to match for season collections \u274c \u2705 \u274c <code>episode_label</code> Uses the label tags to match for episode collections \u274c \u2705 \u274c <code>network</code> Uses the network tags to matchOnly works with the New Plex TV Agent \u274c \u2705 \u274c <code>producer</code> Uses the actor tags to match \u2705 \u274c \u274c <code>resolution</code> Uses the resolution tags to match \u2705 \u2705 \u274c <code>subtitle_language</code> Uses the subtitle language tags to match \u2705 \u2705 \u274c <code>writer</code> Uses the writer tags to match \u2705 \u274c \u274c <code>year</code>1 Uses the year tag to match \u2705 \u2705 \u274c <code>episode_year</code>1 Uses the year tag to match \u274c \u2705 \u274c <code>artist_genre</code> Uses the Artist's Genre attribute to match \u274c \u274c \u2705 <code>artist_collection</code> Uses the Artist's Collection attribute to match \u274c \u274c \u2705 <code>artist_country</code> Uses the Artist's Country attribute to match \u274c \u274c \u2705 <code>artist_mood</code> Uses the Artist's Mood attribute to match \u274c \u274c \u2705 <code>artist_style</code> Uses the Artist's Style attribute to match \u274c \u274c \u2705 <code>artist_label</code> Uses the Artist's Label attribute to match \u274c \u274c \u2705 <code>album_genre</code> Uses the Album's Genre attribute to match \u274c \u274c \u2705 <code>album_mood</code> Uses the Album's Mood attribute to match \u274c \u274c \u2705 <code>album_style</code> Uses the Album's Style attribute to match \u274c \u274c \u2705 <code>album_format</code> Uses the Album's Format attribute to match \u274c \u274c \u2705 <code>album_type</code> Uses the Album's Type attribute to match \u274c \u274c \u2705 <code>album_collection</code> Uses the Album's Collection attribute to match \u274c \u274c \u2705 <code>album_source</code> Uses the Album's Source attribute to match \u274c \u274c \u2705 <code>album_label</code> Uses the Album's Label attribute to match \u274c \u274c \u2705 <code>track_mood</code> Uses the Track's Mood attribute to match \u274c \u274c \u2705 <code>track_source</code> Uses the Track's Source attribute to match \u274c \u274c \u2705 <code>track_label</code> Uses the Track's Label attribute to match \u274c \u274c \u2705 <p>1 You can use <code>current_year</code> to have PMM use the current years value. This can be combined with a <code>-#</code> at the end to subtract that number of years. i.e. <code>current-2</code></p>"},{"location":"builders/plex/#date-searches","title":"Date Searches","text":"<p>Date searches can be used with either no modifier or with <code>.not</code>, <code>.before</code>, or <code>.after</code>.</p> <p>No date search can take multiple values.</p>"},{"location":"builders/plex/#date-modifiers","title":"Date Modifiers","text":"Date Modifier Description Plex Web UI Display No Modifier Matches every item where the date attribute is in the last X daysFormat: number of daysExample: <code>30</code> <code>is in the last</code> <code>.not</code> Matches every item where the date attribute is not in the last X daysFormat: number of daysExample: <code>30</code> <code>is not in the last</code> <code>.before</code> Matches every item where the date attribute is before the given dateFormat: MM/DD/YYYY or <code>today</code> for the current dayExample: <code>01/01/2000</code> <code>is before</code> <code>.after</code> Matches every item where the date attribute is after the given dateFormat: MM/DD/YYYY or <code>today</code> for the current dayExample: <code>01/01/2000</code> <code>is after</code>"},{"location":"builders/plex/#date-attributes","title":"Date Attributes","text":"Date Search Description MovieLibraries ShowLibraries MusicLibraries <code>added</code> Uses the date added attribute to match \u2705 \u2705 \u274c <code>episode_added</code> Uses the date added attribute of the show's episodes to match \u274c \u2705 \u274c <code>release</code> Uses the release date attribute (originally available) to match \u2705 \u2705 \u274c <code>episode_air_date</code> Uses the air date attribute (originally available) of the show's episodes to match \u274c \u2705 \u274c <code>last_played</code> Uses the date last played attribute to match \u2705 \u2705 \u274c <code>episode_last_played</code> Uses the date last played attribute of the show's episodes to match \u274c \u2705 \u274c <code>artist_added</code> Uses the Artist's date added attribute to match \u274c \u274c \u2705 <code>artist_last_played</code> Uses the Artist's last played attribute to match \u274c \u274c \u2705 <code>album_last_played</code> Uses the Album's last played attribute to match \u274c \u274c \u2705 <code>album_added</code> Uses the Album's date added attribute to match \u274c \u274c \u2705 <code>album_released</code> Uses the Album's release date attribute to match \u274c \u274c \u2705 <code>track_last_played</code> Uses the Track's date last played attribute to match \u274c \u274c \u2705 <code>track_last_skipped</code> Uses the Track's date last skipped attribute to match \u274c \u274c \u2705 <code>track_last_rated</code> Uses the Track's date last rated attribute to match \u274c \u274c \u2705 <code>track_added</code> Uses the Track's date added attribute to match \u274c \u274c \u2705"},{"location":"builders/plex/#number-searches","title":"Number Searches","text":"<p>Number searches must use <code>.gt</code>, <code>.gte</code>, <code>.lt</code>, or <code>.lte</code> as a modifier only the rating searches can use <code>.rated</code>.</p> <p>No number search can take multiple values.</p>"},{"location":"builders/plex/#number-modifiers","title":"Number Modifiers","text":"Number Modifier Description Plex Web UI Display <code>.gt</code> Matches every item where the number attribute is greater than the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>is greater than</code> <code>.gte</code> Matches every item where the number attribute is greater than or equal to the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> N/A <code>.lt</code> Matches every item where the number attribute is less than the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>is less than</code> <code>.lte</code> Matches every item where the number attribute is less than or equal to the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> N/A <code>.rated</code> Matches every item either rated or not ratedFormat: <code>true</code> or <code>false</code> N/A <ul> <li><code>.rated</code> only works for rating searches</li> </ul>"},{"location":"builders/plex/#number-attributes","title":"Number Attributes","text":"Number Search Description MovieLibraries ShowLibraries MusicLibraries <code>duration</code> Uses the duration attribute to match using minutesMinimum: <code>0</code> \u2705 \u274c \u274c <code>plays</code> Uses the plays attribute to matchMinimum: <code>0</code> \u2705 \u2705 \u274c <code>episode_plays</code> Uses the Episode's plays attribute to matchMinimum: <code>0</code> \u274c \u2705 \u274c <code>critic_rating</code> Uses the critic rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c <code>audience_rating</code> Uses the audience rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c <code>user_rating</code> Uses the user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c <code>episode_user_rating</code> Uses the user rating attribute of the show's episodes to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u2705 \u274c <code>episode_critic_rating</code> Uses the critic rating attribute of the show's episodes to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u2705 \u274c <code>episode_audience_rating</code> Uses the audience rating attribute of the show's episodes to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u2705 \u274c <code>year</code>1 Uses the year attribute to matchMinimum: <code>0</code> \u2705 \u2705 \u274c <code>episode_year</code>1 Uses the Episode's year attribute to matchMinimum: <code>0</code> \u274c \u2705 \u274c <code>album_year</code>1 Uses the Album's year attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>album_decade</code>1 Uses the Album's decade attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>album_plays</code> Uses the Album's plays attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>track_plays</code> Uses the Track's plays attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>track_skips</code> Uses the Track's skips attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>artist_user_rating</code> Uses the Artist's user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <code>album_user_rating</code> Uses the Album's user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <code>album_critic_rating</code> Uses the Album's critic rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <code>track_user_rating</code> Uses the Track's user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <p>1 You can use <code>current_year</code> to have PMM use the current years value. This can be combined with a <code>-#</code> at the end to subtract that number of years. i.e. <code>current-2</code></p>"},{"location":"builders/plex/#boolean-searches","title":"Boolean Searches","text":"<p>Boolean Searches take no modifier and can only be either <code>true</code> or <code>false</code>.</p>"},{"location":"builders/plex/#boolean-attributes","title":"Boolean Attributes","text":"Boolean Search Description MovieLibraries ShowLibraries MusicLibraries <code>hdr</code> Is HDR \u2705 \u2705 \u274c <code>unmatched</code> Is Unmatched \u2705 \u274c \u274c <code>duplicate</code> Is Duplicate \u2705 \u274c \u274c <code>unplayed</code> Is Unplayed \u2705 \u274c \u274c <code>progress</code> Is In Progress \u2705 \u274c \u274c <code>trash</code> Is Trashed \u2705 \u2705 \u274c <code>unplayed_episodes</code> Has Unplayed Episodes \u274c \u2705 \u274c <code>episode_unplayed</code> Has Episodes Unplayed \u274c \u2705 \u274c <code>episode_duplicate</code> Has Duplicate Episodes \u274c \u2705 \u274c <code>episode_progress</code> Has Episode Progress \u274c \u2705 \u274c <code>episode_unmatched</code> Has Episodes Unmatched \u274c \u2705 \u274c <code>show_unmatched</code> Has Shows Unmatched \u274c \u2705 \u274c <code>artist_unmatched</code> Is Artist's Unmatched \u274c \u274c \u2705 <code>album_unmatched</code> Is Album's Unmatched \u274c \u274c \u2705 <code>track_trash</code> Is Track Trashed \u274c \u274c \u2705"},{"location":"builders/plex/#plex-search-examples","title":"Plex Search Examples","text":"<p>A few examples are listed below:</p> <p><pre><code>collections:\nDocumentaries:\nplex_search:\nall:\ngenre: Documentary\n</code></pre> <pre><code>collections:\nDave Chappelle Comedy:\nplex_search:\nall:\nactor: Dave Chappelle\ngenre: Comedy\n</code></pre> <pre><code>collections:\nTop Action Movies:\ncollection_order: custom\nplex_search:\nall:\ngenre: Action\nsort_by: audience_rating.desc\nlimit: 20\n</code></pre> <pre><code>collections:\n90s Movies:\nplex_search:\nany:\nyear:\n- 1990\n- 1991\n- 1992\n- 1993\n- 1994\n- 1995\n- 1996\n- 1997\n- 1998\n- 1999\n</code></pre> <pre><code>collections:\n90s Movies:\nplex_search:\nany:\ndecade: 1990\n</code></pre> <pre><code>collections:\nBest 2010+ Movies:\ncollection_order: custom\nplex_search:\nall:\nyear.gte: 2010\nsort_by: audience_rating.desc\nlimit: 20\n</code></pre></p> <p>Here's an example of an episode collection using <code>plex_search</code>.</p> <pre><code> collections:\nTop 100 Simpsons Episodes:\ncollection_order: custom\nbuilder_level: episode\nplex_search:\ntype: episodes\nsort_by: audience_rating.desc\nlimit: 100\nall:\ntitle.ends: \"Simpsons\"\nsummary: A collection of the highest rated simpsons epsodes.\n</code></pre> <p>If you specify TMDb Person ID's using the Detail <code>tmdb_person</code> and then tell either <code>actor</code>, <code>director</code>, <code>producer</code>, or <code>writer</code> to add <code>tmdb</code>, Plex Meta Manager will translate the TMDb Person IDs into their names and run the search on those names.</p> <p><pre><code>collections:\nRobin Williams:\nplex_search:\nall:\nactor: tmdb\ntmdb_person: 2157\n</code></pre> <pre><code>collections:\nSteven Spielberg:\nplex_search:\nall:\ndirector: tmdb\ntmdb_person: https://www.themoviedb.org/person/488-steven-spielberg\n</code></pre> <pre><code>collections:\nQuentin Tarantino:\nplex_search:\nany:\nactor: tmdb\ndirector: tmdb\nproducer: tmdb\nwriter: tmdb\ntmdb_person: 138\n</code></pre></p>"},{"location":"builders/radarr/","title":"Radarr Builders","text":"<p>You can find items in your Plex using the features of Radarr.</p> <p>Configuring Radarr in the config is required for any of these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>radarr_all</code> Gets all Movies in Radarr. \u2705 \u274c \u274c <code>radarr_taglist</code> Gets Movies from Radarr based on their tags. \u2705 \u274c \u274c"},{"location":"builders/radarr/#radarr-all","title":"Radarr All","text":"<p>Gets all Movies in Radarr.</p> <pre><code>collections:\nALL Radarr Movies:\nradarr_all: true\n</code></pre>"},{"location":"builders/radarr/#radarr-taglist","title":"Radarr Taglist","text":"<p>Gets Movies from Radarr based on their tags. </p> <p>Set the attribute to the tag you want to search for. Multiple values are supported as either a list or a comma-separated string. </p> <pre><code>collections:\nRadarr Tag1 and Tag2 Movies:\nradarr_taglist: tag1, tag2\n</code></pre> <p>If no tag is specified then it gets every Movie without a tag.</p> <pre><code>collections:\nRadarr Movies Without Tags:\nradarr_taglist: </code></pre>"},{"location":"builders/reciperr/","title":"Reciperr Builders","text":"<p>You can find movies using a Reciperr list on reciperr.com (Reciperr). </p> <p>No configuration is required for this builder.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>reciperr_list</code> Finds every movie at a Reciperr JSON data URL. \u2705 \u274c \u2705"},{"location":"builders/reciperr/#reciperr-list","title":"Reciperr List","text":"<p>Finds every movie on Reciperr a list.</p> <p>The expected input is the url that points to the JSON data or a list of urls that do.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nReciperr Movies:\nreciperr_list: https://reciperr.com/api/recipe/list/params?recipeMetadataId=62354f0e89a919001d650fa3\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/smart/","title":"Smart Builders","text":"<p>Smart Builders allow Plex Meta Manager to create Smart Collections in two different ways.</p> <p> Smart Builders do not currently work with Playlists </p>"},{"location":"builders/smart/#smart-label","title":"Smart Label","text":"<p>A Smart Label Collection is a smart collection that grabs every item with a specific label generated by the program. That label is added to all the items the Collection Builders find instead of being added to a normal collection. </p> <p>To make a collection a Smart Label Collection, the <code>smart_label</code> attribute must added to the collection definition. It functions in two different ways:</p> <ol> <li> <p>Define the sort using the Movies/Shows column of the Sorts Table below along with any other builder to make that collection a Smart Label Collection.     <pre><code>collections:\nMarvel Cinematic Universe:\ntrakt_list: https://trakt.tv/users/jawann2002/lists/marvel-cinematic-universe-movies?sort=rank,asc\nsmart_label: release.desc\n</code></pre></p> </li> <li> <p>Provide a whole <code>smart_filter</code> to determine exactly how the smart collection should be built, ensuring to include <code>label: &lt;&lt;smart_label&gt;&gt;</code>, which will link it to the collection labels.     <pre><code>collections:\nUnplayed Marvel Cinematic Universe:\ntrakt_list: https://trakt.tv/users/jawann2002/lists/marvel-cinematic-universe-movies?sort=rank,asc\nsmart_label:\nsort_by: release.desc\nall:\nlabel: &lt;&lt;smart_label&gt;&gt;\nunplayed: true\n</code></pre></p> </li> </ol> <p>This is extremely useful because smart collections don't follow normal show/hide rules and can eliminate the need to have Plex Collectionless when used correctly. To fix the issue described in Plex Collectionless you would make <code>Marvel Cinematic Universe</code> a Smart Label Collection and all other Marvel collection just normal collections, and they will show/hide all the movie properly.</p> <p>To have the Smart Label Collections to eliminate Plex Collectionless you have to go all in on using them. A good rule of thumb to make sure this works correctly is that every item in your library should have a max of one non-smart collection.</p> <p>Reach out on the Plex Meta Manager Discord or in the GitHub Discussions for help if you're having any issues getting this to work properly.</p>"},{"location":"builders/smart/#smart-filter","title":"Smart Filter","text":"<p>Uses Plex's Advanced Filters to create a smart collection based on the filter parameters provided.</p> <p>Any Advanced Filter made using the Plex UI should be able to be recreated using <code>smart_filter</code>. If you're having trouble getting <code>smart_filter</code> to work correctly, build the collection you want inside of Plex's Advanced Filters and take a screenshot of the parameters in the Plex UI and post it in either the Discussions or on Discord, and I'll do my best to help you. </p> <p>like Plex's Advanced Filters you have to start each filter with either <code>any</code> or <code>all</code> as a base. You can only have one base attribute and all filter attributes must be under the base.</p> <p>Inside the base attribute you can use any filter below or nest more <code>any</code> or <code>all</code>. You can have as many nested <code>any</code> or <code>all</code> next to each other as you want. If using multiple <code>any</code> or <code>all</code> you will have to do so in the form of a list.  </p> <p>Note: To search by <code>season</code>, <code>episode</code>, <code>album</code>, or <code>track</code> you must use the <code>builder_level</code> Detail to change the type of items the collection holds.</p> <p>There are a couple other attributes you can have at the top level only along with the base attribute are:</p>"},{"location":"builders/smart/#special-attributes","title":"Special Attributes","text":"Attribute Description &amp; Values <code>limit</code> Description: The max number of item for the filter.Default: <code>all</code>Values: <code>all</code> or a number greater than 0 <code>sort_by</code> Description: This will control how the filter is sorted in your library. You can do a multi-level sort using a list.Default: <code>random</code>Values: Any sort options for your filter type in the Sorts Options Table <code>validate</code> Description: Determines if a collection will fail on a validation errorDefault: <code>true</code>Values: <code>true</code> or <code>false</code>"},{"location":"builders/smart/#sort-options","title":"Sort Options","text":"Sort Option Description Movies Shows Seasons Episodes Artists Albums Tracks <code>title.asc</code><code>title.desc</code> Sort by Title \u2705 \u2705 \u274c \u2705 \u2705 \u2705 \u2705 <code>season.asc</code><code>season.desc</code> Sort by Season \u274c \u274c \u2705 \u274c \u274c \u274c \u274c <code>show.asc</code><code>show.desc</code> Sort by Show \u274c \u274c \u2705 \u2705 \u274c \u274c \u274c <code>album_artist.asc</code><code>album_artist.desc</code> Sort by Album Artist \u274c \u274c \u274c \u274c \u274c \u2705 \u2705 <code>artist.asc</code><code>artist.desc</code> Sort by Artist \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>album.asc</code><code>album.desc</code> Sort by Album \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>year.asc</code><code>year.desc</code> Sort by Year \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>release.asc</code><code>release.desc</code> Sort by Release Date (Originally Available) \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>episode_release.asc</code><code>episode_release.desc</code> Sort by Episode Release Date (Originally Available) \u274c \u2705 \u2705 \u2705 \u274c \u274c \u274c <code>critic_rating.asc</code><code>critic_rating.desc</code> Sort by Critic Rating \u2705 \u2705 \u274c \u2705 \u274c \u2705 \u274c <code>audience_rating.asc</code><code>audience_rating.desc</code> Sort by Audience Rating \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c <code>user_rating.asc</code><code>user_rating.desc</code> Sort by User Rating \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>content_rating.asc</code><code>content_rating.desc</code> Sort by Content Rating \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c <code>duration.asc</code><code>duration.desc</code> Sort by Duration \u2705 \u274c \u274c \u2705 \u274c \u274c \u2705 <code>progress.asc</code><code>progress.desc</code> Sort by Progress \u274c \u274c \u274c \u2705 \u274c \u274c \u274c <code>played.asc</code><code>played.desc</code> Sort by Date Last Played \u274c \u274c \u274c \u274c \u2705 \u2705 \u2705 <code>plays.asc</code><code>plays.desc</code> Sort by Number of Plays \u2705 \u274c \u274c \u2705 \u2705 \u2705 \u2705 <code>unplayed.asc</code><code>unplayed.desc</code> Sort by Unplayed \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>episode_added.asc</code><code>episode_added.desc</code> Sort by Last Episode Date Added \u274c \u2705 \u274c \u274c \u274c \u274c \u274c <code>added.asc</code><code>added.desc</code> Sort by Date Added \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>viewed.asc</code><code>viewed.desc</code> Sort by Date Last Viewed \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c <code>rated.asc</code><code>rated.desc</code> Sort by Date Last Rated \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>popularity.asc</code><code>popularity.desc</code> Sort by Popularity \u274c \u274c \u274c \u274c \u274c \u274c \u2705 <code>resolution.asc</code><code>resolution.desc</code> Sort by Resolution \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c <code>bitrate.asc</code><code>bitrate.desc</code> Sort by Bitrate \u2705 \u274c \u274c \u2705 \u274c \u274c \u2705 <code>random</code> Sort by Random \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705"},{"location":"builders/smart/#filters","title":"Filters","text":"<p>There are three fields per filter option when using Plex's Advanced Filters in the Web UI.</p> <ol> <li>Attribute: What attribute you wish to filter.</li> <li>Modifier: Which modifier to use.</li> <li>Value: Actual value to filter.</li> </ol> <p>Example: <code>Attribute.Modifier: Value</code></p>"},{"location":"builders/smart/#string-filters","title":"String Filters","text":"<p>String filters can be used with either no modifier or with <code>.not</code>, <code>.is</code>, <code>.isnot</code>, <code>.begins</code>, or <code>.ends</code>.</p> <p>String filter can take multiple values only as a list.</p>"},{"location":"builders/smart/#string-modifiers","title":"String Modifiers","text":"String Modifier Description Plex Web UI Display No Modifier Matches every item where the attribute contains the given string <code>contains</code> <code>.not</code> Matches every item where the attribute does not contain the given string <code>does not contain</code> <code>.is</code> Matches every item where the attribute exactly matches the given string <code>is</code> <code>.isnot</code> Matches every item where the attribute does not exactly match the given string <code>is not</code> <code>.begins</code> Matches every item where the attribute begins with the given string <code>begins with</code> <code>.ends</code> Matches every item where the attribute ends with the given string <code>ends with</code>"},{"location":"builders/smart/#string-attributes","title":"String Attributes","text":"String Search Description MovieLibraries ShowLibraries MusicLibraries <code>title</code> Uses the title attribute to match \u2705 \u2705 \u274c <code>episode_title</code> Uses the title attribute of the show's episodes to match \u274c \u2705 \u274c <code>studio</code> Uses the studio attribute to match \u2705 \u2705 \u274c <code>edition</code> Uses the edition attribute to match \u2705 \u274c \u274c <code>artist_title</code> Uses the Artist's Title attribute to match \u274c \u274c \u2705 <code>album_title</code> Uses the Album's Title attribute to match \u274c \u274c \u2705 <code>track_title</code> Uses the Track's Title attribute to match \u274c \u274c \u2705 <code>album_record_label</code> Uses the Album's Record Label attribute to match \u274c \u274c \u2705"},{"location":"builders/smart/#tag-filters","title":"Tag Filters","text":"<p>Tag filters can be used with either no modifier or with <code>.not</code> except for <code>decade</code> and <code>resolution</code> which can only be used with no modifier.</p> <p>Tag filter can take multiple values as a list or a comma-separated string.</p>"},{"location":"builders/smart/#tag-modifiers","title":"Tag Modifiers","text":"Tag Modifier Description Plex Web UI Display No Modifier Matches every item where the attribute matches the given string <code>is</code> <code>.not</code> Matches every item where the attribute does not match the given string <code>is not</code>"},{"location":"builders/smart/#tag-attributes","title":"Tag Attributes","text":"Tag Search Description MovieLibraries ShowLibraries MusicLibraries <code>actor</code> Uses the actor tags to match \u2705 \u2705 \u274c <code>audio_language</code> Uses the audio language tags to match \u2705 \u2705 \u274c <code>collection</code> Uses the collection tags to match for top level collections \u2705 \u2705 \u274c <code>season_collection</code> Uses the collection tags to match for season collections \u274c \u2705 \u274c <code>episode_collection</code> Uses the collection tags to match for episode collections \u274c \u2705 \u274c <code>content_rating</code> Uses the content rating tags to match \u2705 \u2705 \u274c <code>country</code> Uses the country tags to match \u2705 \u2705 \u274c <code>decade</code>1 Uses the year tag to match the decade \u2705 \u274c \u274c <code>director</code> Uses the director tags to match \u2705 \u274c \u274c <code>genre</code> Uses the genre tags to match \u2705 \u2705 \u274c <code>label</code> Uses the label tags to match for top level collections \u2705 \u2705 \u274c <code>season_label</code> Uses the label tags to match for season collections \u274c \u2705 \u274c <code>episode_label</code> Uses the label tags to match for episode collections \u274c \u2705 \u274c <code>network</code> Uses the network tags to matchOnly works with the New Plex TV Agent \u274c \u2705 \u274c <code>producer</code> Uses the actor tags to match \u2705 \u274c \u274c <code>resolution</code> Uses the resolution tags to match \u2705 \u2705 \u274c <code>subtitle_language</code> Uses the subtitle language tags to match \u2705 \u2705 \u274c <code>writer</code> Uses the writer tags to match \u2705 \u274c \u274c <code>year</code>1 Uses the year tag to match \u2705 \u2705 \u274c <code>episode_year</code>1 Uses the year tag to match \u274c \u2705 \u274c <code>artist_genre</code> Uses the Artist's Genre attribute to match \u274c \u274c \u2705 <code>artist_collection</code> Uses the Artist's Collection attribute to match \u274c \u274c \u2705 <code>artist_country</code> Uses the Artist's Country attribute to match \u274c \u274c \u2705 <code>artist_mood</code> Uses the Artist's Mood attribute to match \u274c \u274c \u2705 <code>artist_style</code> Uses the Artist's Style attribute to match \u274c \u274c \u2705 <code>artist_label</code> Uses the Artist's Label attribute to match \u274c \u274c \u2705 <code>album_genre</code> Uses the Album's Genre attribute to match \u274c \u274c \u2705 <code>album_mood</code> Uses the Album's Mood attribute to match \u274c \u274c \u2705 <code>album_style</code> Uses the Album's Style attribute to match \u274c \u274c \u2705 <code>album_format</code> Uses the Album's Format attribute to match \u274c \u274c \u2705 <code>album_type</code> Uses the Album's Type attribute to match \u274c \u274c \u2705 <code>album_collection</code> Uses the Album's Collection attribute to match \u274c \u274c \u2705 <code>album_source</code> Uses the Album's Source attribute to match \u274c \u274c \u2705 <code>album_label</code> Uses the Album's Label attribute to match \u274c \u274c \u2705 <code>track_mood</code> Uses the Track's Mood attribute to match \u274c \u274c \u2705 <code>track_source</code> Uses the Track's Source attribute to match \u274c \u274c \u2705 <code>track_label</code> Uses the Track's Label attribute to match \u274c \u274c \u2705 <p>1 You can use <code>current_year</code> to have PMM use the current years value. This can be combined with a <code>-#</code> at the end to subtract that number of years. i.e. <code>current-2</code></p>"},{"location":"builders/smart/#date-filters","title":"Date Filters","text":"<p>Date filters can be used with either no modifier or with <code>.not</code>, <code>.before</code>, or <code>.after</code>.</p> <p>No date filter can take multiple values.</p>"},{"location":"builders/smart/#date-modifiers","title":"Date Modifiers","text":"Date Modifier Description Plex Web UI Display No Modifier Matches every item where the date attribute is in the last X daysFormat: number of daysExample: <code>30</code> <code>is in the last</code> <code>.not</code> Matches every item where the date attribute is not in the last X daysFormat: number of daysExample: <code>30</code> <code>is not in the last</code> <code>.before</code> Matches every item where the date attribute is before the given dateFormat: MM/DD/YYYY or <code>today</code> for the current dayExample: <code>01/01/2000</code> <code>is before</code> <code>.after</code> Matches every item where the date attribute is after the given dateFormat: MM/DD/YYYY or <code>today</code> for the current dayExample: <code>01/01/2000</code> <code>is after</code>"},{"location":"builders/smart/#date-attributes","title":"Date Attributes","text":"Date Search Description MovieLibraries ShowLibraries MusicLibraries <code>added</code> Uses the date added attribute to match \u2705 \u2705 \u274c <code>episode_added</code> Uses the date added attribute of the show's episodes to match \u274c \u2705 \u274c <code>release</code> Uses the release date attribute (originally available) to match \u2705 \u2705 \u274c <code>episode_air_date</code> Uses the air date attribute (originally available) of the show's episodes to match \u274c \u2705 \u274c <code>last_played</code> Uses the date last played attribute to match \u2705 \u2705 \u274c <code>episode_last_played</code> Uses the date last played attribute of the show's episodes to match \u274c \u2705 \u274c <code>artist_added</code> Uses the Artist's date added attribute to match \u274c \u274c \u2705 <code>artist_last_played</code> Uses the Artist's last played attribute to match \u274c \u274c \u2705 <code>album_last_played</code> Uses the Album's last played attribute to match \u274c \u274c \u2705 <code>album_added</code> Uses the Album's date added attribute to match \u274c \u274c \u2705 <code>album_released</code> Uses the Album's release date attribute to match \u274c \u274c \u2705 <code>track_last_played</code> Uses the Track's date last played attribute to match \u274c \u274c \u2705 <code>track_last_skipped</code> Uses the Track's date last skipped attribute to match \u274c \u274c \u2705 <code>track_last_rated</code> Uses the Track's date last rated attribute to match \u274c \u274c \u2705 <code>track_added</code> Uses the Track's date added attribute to match \u274c \u274c \u2705"},{"location":"builders/smart/#number-filters","title":"Number Filters","text":"<p>Number filters must use <code>.gt</code>, <code>.gte</code>, <code>.lt</code>, or <code>.lte</code> as a modifier only the rating filters can use <code>.rated</code>.</p> <p>No number filter can take multiple values.</p>"},{"location":"builders/smart/#number-modifiers","title":"Number Modifiers","text":"Number Modifier Description Plex Web UI Display <code>.gt</code> Matches every item where the number attribute is greater than the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>is greater than</code> <code>.gte</code> Matches every item where the number attribute is greater than or equal to the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> N/A <code>.lt</code> Matches every item where the number attribute is less than the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> <code>is less than</code> <code>.lte</code> Matches every item where the number attribute is less than or equal to the given numberFormat: numberExample: <code>30</code>, <code>1995</code>, or <code>7.5</code> N/A <code>.rated</code> Matches every item either rated or not ratedFormat: <code>true</code> or <code>false</code> N/A <ul> <li><code>.rated</code> only works for rating filters</li> </ul>"},{"location":"builders/smart/#number-attributes","title":"Number Attributes","text":"Number Search Description MovieLibraries ShowLibraries MusicLibraries <code>duration</code> Uses the duration attribute to match using minutesMinimum: <code>0</code> \u2705 \u274c \u274c <code>plays</code> Uses the plays attribute to matchMinimum: <code>0</code> \u2705 \u2705 \u274c <code>episode_plays</code> Uses the Episode's plays attribute to matchMinimum: <code>0</code> \u274c \u2705 \u274c <code>critic_rating</code> Uses the critic rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c <code>audience_rating</code> Uses the audience rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c <code>user_rating</code> Uses the user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u2705 \u2705 \u274c <code>episode_user_rating</code> Uses the user rating attribute of the show's episodes to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u2705 \u274c <code>year</code>1 Uses the year attribute to matchMinimum: <code>0</code> \u2705 \u2705 \u274c <code>episode_year</code>1 Uses the Episode's year attribute to match Minimum: <code>0</code> \u274c \u2705 \u274c <code>album_year</code>1 Uses the Album's year attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>album_decade</code>1 Uses the Album's decade attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>album_plays</code> Uses the Album's plays attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>track_plays</code> Uses the Track's plays attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>track_skips</code> Uses the Track's skips attribute to matchMinimum: <code>0</code> \u274c \u274c \u2705 <code>artist_user_rating</code> Uses the Artist's user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <code>album_user_rating</code> Uses the Album's user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <code>album_critic_rating</code> Uses the Album's critic rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <code>track_user_rating</code> Uses the Track's user rating attribute to matchRange: <code>0.0</code> - <code>10.0</code> \u274c \u274c \u2705 <p>1 You can use <code>current_year</code> to have PMM use the current years value. This can be combined with a <code>-#</code> at the end to subtract that number of years. i.e. <code>current-2</code></p>"},{"location":"builders/smart/#boolean-filters","title":"Boolean Filters","text":"<p>Boolean Filters take no modifier and can only be either <code>true</code> or <code>false</code>.</p>"},{"location":"builders/smart/#boolean-attributes","title":"Boolean Attributes","text":"Boolean Search Description MovieLibraries ShowLibraries MusicLibraries <code>hdr</code> Is HDR \u2705 \u2705 \u274c <code>unmatched</code> Is Unmatched \u2705 \u274c \u274c <code>duplicate</code> Is Duplicate \u2705 \u274c \u274c <code>unplayed</code> Is Unplayed \u2705 \u274c \u274c <code>progress</code> Is In Progress \u2705 \u274c \u274c <code>trash</code> Is Trashed \u2705 \u2705 \u274c <code>unplayed_episodes</code> Has Unplayed Episodes \u274c \u2705 \u274c <code>episode_unplayed</code> Has Episodes Unplayed \u274c \u2705 \u274c <code>episode_duplicate</code> Has Duplicate Episodes \u274c \u2705 \u274c <code>episode_progress</code> Has Episode Progress \u274c \u2705 \u274c <code>episode_unmatched</code> Has Episodes Unmatched \u274c \u2705 \u274c <code>show_unmatched</code> Has Shows Unmatched \u274c \u2705 \u274c <code>artist_unmatched</code> Is Artist's Unmatched \u274c \u274c \u2705 <code>album_unmatched</code> Is Album's Unmatched \u274c \u274c \u2705 <code>track_trash</code> Is Track Trashed \u274c \u274c \u2705"},{"location":"builders/smart/#smart-filter-examples","title":"Smart Filter Examples","text":"<p>A few examples are listed below:</p> <p><pre><code>collections:\nDocumentaries:\nsmart_filter:\nall:\ngenre: Documentary\n</code></pre> <pre><code>collections:\nDave Chappelle Comedy:\nsmart_filter:\nall:\nactor: Dave Chappelle\ngenre: Comedy\n</code></pre> <pre><code>collections:\nTop Action Movies:\nsmart_filter:\nall:\ngenre: Action\nsort_by: audience_rating.desc\nlimit: 20\n</code></pre> <pre><code>collections:\n90s Movies:\nsmart_filter:\nany:\nyear:\n- 1990\n- 1991\n- 1992\n- 1993\n- 1994\n- 1995\n- 1996\n- 1997\n- 1998\n- 1999\n</code></pre> <pre><code>collections:\n90s Movies:\nsmart_filter:\nany:\ndecade: 1990\n</code></pre> <pre><code>collections:\nBest 2010+ Movies:\nsmart_filter:\nall:\nyear.gte: 2010\nsort_by: audience_rating.desc\nlimit: 20\n</code></pre></p> <p>If you specify TMDb Person ID's using the Detail <code>tmdb_person</code> and then tell either <code>actor</code>, <code>director</code>, <code>producer</code>, or <code>writer</code> to add <code>tmdb</code>, Plex Meta Manager will translate the TMDb Person IDs into their names and run the filter on those names.</p> <p><pre><code>collections:\nRobin Williams:\nsmart_filter:\nall:\nactor: tmdb\ntmdb_person: 2157\n</code></pre> <pre><code>collections:\nSteven Spielberg:\nsmart_filter:\nall:\ndirector: tmdb\ntmdb_person: https://www.themoviedb.org/person/488-steven-spielberg\n</code></pre> <pre><code>collections:\nQuentin Tarantino:\nsmart_filter:\nany:\nactor: tmdb\ndirector: tmdb\nproducer: tmdb\nwriter: tmdb\ntmdb_person: 138\n</code></pre></p>"},{"location":"builders/sonarr/","title":"Sonarr Builders","text":"<p>You can find items in your Plex using the features of Sonarr.</p> <p>Configuring Sonarr in the config is required for any of these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>sonarr_all</code> Gets all Series in Sonarr. \u274c \u2705 \u274c <code>sonarr_taglist</code> Gets Series from Sonarr based on their tags. \u274c \u2705 \u274c"},{"location":"builders/sonarr/#sonarr-all","title":"Sonarr All","text":"<p>Gets all Series in Sonarr.</p> <pre><code>collections:\nALL Sonarr Series:\nsonarr_all: true\n</code></pre>"},{"location":"builders/sonarr/#sonarr-taglist","title":"Sonarr Taglist","text":"<p>Gets Series from Sonarr based on their tags. </p> <p>Set the attribute to the tag you want to search for. Multiple values are supported as either a list or a comma-separated string. </p> <pre><code>collections:\nSonarr Tag1 and Tag2 Series:\nsonarr_taglist: tag1, tag2\n</code></pre> <p>If no tag is specified then it gets every Movie without a tag.</p> <pre><code>collections:\nSonarr Series Without Tags:\nsonarr_taglist: </code></pre>"},{"location":"builders/stevenlu/","title":"StevenLu Builders","text":"<p>You can find items using StevenLu's Popular Movies list on StevenLu.com (StevenLu). </p> <p>No configuration is required for this builder.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>stevenlu_popular</code> Finds every movie on StevenLu's Popular Movies List. \u2705 \u274c \u2705"},{"location":"builders/stevenlu/#stevenlus-popular-movies-list","title":"StevenLu's Popular Movies List","text":"<p>Finds every movie on StevenLu's Popular Movies List.</p> <p>The expected input is <code>true</code>.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nStevenLu's Popular Movies:\nstevenlu_popular: true\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tautulli/","title":"Tautulli Builders","text":"<p>You can find items in your Plex using the features of Tautulli.</p> <p>Configuring Tautulli in the config is required for any of these builders.</p> <p>It has watch analytics that can show the most watched or most popular Movies/Shows in each Library.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>tautulli_popular</code> Gets the Tautulli Most Popular List \u2705 \u2705 \u2705 <code>tautulli_watched</code> Gets the Tautulli Most Watched List \u2705 \u2705 \u2705"},{"location":"builders/tautulli/#tautulli-popularwatched","title":"Tautulli Popular/Watched","text":"<p>Both Tautulli Popular and Tautulli Watched have the same sub-attributes detailed below.</p> Attribute Description Required Default <code>list_days</code> Number of Days to look back of the list. \u274c <code>30</code> <code>list_minimum</code> Minimum Number of Users Watching/Plays to add to the list. \u274c <code>0</code> <code>list_size</code> Number of Movies/Shows to add to this list. \u274c <code>10</code> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <p><pre><code>collections:\nMost Popular Movies (30 Days):\nsync_mode: sync\ncollection_order: custom\ntautulli_popular:\nlist_days: 30\nlist_size: 10\n</code></pre> <pre><code>collections:\nMost Watched Movies (30 Days):\nsync_mode: sync\ncollection_order: custom\ntautulli_watched:\nlist_days: 30\nlist_size: 10\n</code></pre> <pre><code>collections:\nPlex Popular:\ntautulli_popular:\nlist_days: 30\nlist_size: 20\ntautulli_watched:\nlist_days: 30\nlist_size: 20\nsync_mode: sync\nsummary: Movies Popular on Plex\ncollection_order: alpha\n</code></pre> <pre><code>playlists:\nPlex Popular:\nlibraries: Movies\ntautulli_popular:\nlist_days: 30\nlist_size: 20\nsync_mode: sync\nsummary: Movies Popular on Plex\n</code></pre></p>"},{"location":"builders/templates/","title":"Templates","text":"<p>Collection, Playlist, Metadata, and Overlay Definitions often share a lot of common or generalizable configuration details. Templates allow you to define these details so they can be used across multiple definitions.</p> <p>For example, an actor collection might look like this:</p> <pre><code>collections:\nBruce Lee:\nplex_search:\nall:\nactor: tmdb\ntmdb_person: 19429\nsort_title: \"!_Bruce Lee\"\nsync_mode: sync\ncollection_order: release\n</code></pre> <p>Note: The <code>sort_title</code> in these examples is wrapped in quotes because it contains a character [<code>!</code>] which has syntactic meaning in YAML files.  This \"quoting special characters\" is a general YAML requirement, not something specific to <code>sort_title</code>.</p> <p>Then you add another:</p> <pre><code>collections:\nBruce Lee:\nplex_search:\nall:\nactor: tmdb\ntmdb_person: 19429\nsort_title: \"!_Bruce Lee\"\nsync_mode: sync\ncollection_order: release\nChris Pratt:\nplex_search:\nall:\nactor: tmdb\ntmdb_person: 73457\nsort_title: \"!_Chris Pratt\"\nsync_mode: sync\ncollection_order: release\n</code></pre> <p>You could keep going in this way, but there's a lot of repetition there. Both of these collections have the same <code>sync_mode</code>, <code>collection_order</code>, and <code>actor</code> settings; the other two details, <code>tmdb_person</code> and <code>sort_title</code>, depend on a value defined in the collection.</p> <p>Those repetitive aspects can be moved into a template and leveraged by multiple collections.</p>"},{"location":"builders/templates/#template-variables","title":"Template Variables","text":"<p>Template Variables are used to define the data that going to be changing in the template.</p> <p>For example, a template for those two collections might look like this:</p> <pre><code>templates:\nActor:\nplex_search:\nall:\nactor: tmdb\ntmdb_person: &lt;&lt;person&gt;&gt;\nsort_title: \"!_&lt;&lt;collection_name&gt;&gt;\"\nsync_mode: sync\ncollection_order: release\n</code></pre> <p>The only things that change are the ID that is used with <code>tmdb_person</code> and the name of the collection that is used in <code>sort_title</code>.</p> <p>Those two things surrounded by <code>&lt;&lt; &gt;&gt;</code> are \"template variables\" that you can define for any collection using this template, like this:</p> <pre><code>collections:\nChris Pratt:\ntemplate:\nname: Actor\nperson: 73457\n</code></pre> <p>or to do it in a single line you can do this </p> <pre><code>collections:\nBruce Lee:\ntemplate: {name: Actor, person: 19429}\n</code></pre> <p>Note that we provide the template name <code>Actor</code> and the value to insert in the place of <code>&lt;&lt;person&gt;&gt;</code>. The <code>&lt;&lt;collection_name&gt;&gt;</code> is a template variable that is always available and doesn't have to be called out like <code>&lt;&lt;person&gt;&gt;</code>.</p> <p>Inside a template, you can use all the Builders, Details, and Filters attributes that you can give collections/playlists [except <code>template</code>; templates cannot be nested].</p> <p>The names of template variables that you define are arbitrary. In the example above, <code>&lt;&lt;person&gt;&gt;</code> could have been <code>&lt;&lt;tvdb_person_id&gt;&gt;</code> or <code>&lt;&lt;bing&gt;&gt;</code> or anything else. The only thing that matters is that in the template definition you surround them with <code>&lt;&lt; &gt;&gt;</code> and in the collection definition you spell it correctly.</p> <p>To use a template with a collection definition you use the <code>template</code> attribute. The only required attribute under <code>template</code> is <code>name</code> which must correspond exactly to the template mapping name. Any other attributes under <code>template</code> are considered template variables whose names correspond exactly with the template variable name surrounded by <code>&lt;&lt;</code> and <code>&gt;&gt;</code> in the templates. These template variables will replace any part of any value that contains the template variable name surrounded by <code>&lt;&lt;</code> and <code>&gt;&gt;</code> in the template with the specified template variable's value.</p> <p>Here's the full example Actor template and two different ways to use it, as it would appear in a metadata file.</p> <pre><code>templates:\nActor:\nplex_search:\nall:\nactor: tmdb\ntmdb_person: &lt;&lt;person&gt;&gt;\nsort_title: \"!_&lt;&lt;collection_name&gt;&gt;\"\nsync_mode: sync\ncollection_order: release\ncollections:\nBruce Lee:\ntemplate: {name: Actor, person: 19429}\nChris Pratt:\ntemplate:\nname: Actor\nperson: 73457\n</code></pre>"},{"location":"builders/templates/#multi-template-variables","title":"Multi-Template Variables","text":"<p>When using multiple Templates in a single definition you can send the same variable to all templates by using the <code>variables</code> attribute.</p> <pre><code>templates:\nActor:\nplex_search:\nall:\nactor: tmdb\ntmdb_person: &lt;&lt;person&gt;&gt;\nsort_title: \"!_&lt;&lt;collection_name&gt;&gt;\"\nCommon:\nsummary: \"Movies that &lt;&lt;collection_name&gt;&gt; (TMDb ID: &lt;&lt;person&gt;&gt;) are in\"\nsync_mode: sync\ncollection_order: release\ncollections:\nBruce Lee:\nvariables: {person: 19429}\ntemplate: [{name: Actor}, {name: Common}]\nChris Pratt:\nvariables:\nperson: 19429\ntemplate:\n- name: Actor\n- name: Common\n</code></pre>"},{"location":"builders/templates/#special-template-attributes","title":"Special Template Attributes","text":"<p>There are some attributes unique to <code>templates</code>; <code>default</code>, <code>optional</code>, <code>conditionals</code>, and <code>move_prefix</code>.</p> <ul> <li><code>default</code> can set default values for template variables to be used if they're not specified in the call.</li> <li><code>optional</code> can specify variables that if not specified on the template call will cause any attribute using one of those variables to be ignored in the template. You can make any template variable optional per collection by setting it to <code>null</code>.</li> <li><code>conditionals</code> can specify variables based on conditions set by the user. See more here</li> <li><code>move_prefix</code> can be given a list or comma-separated string of prefixes to move to the end of the collection/playlist name for sorting.     i.e. If you have <code>move_prefix: The</code> and a collection is called <code>The Avengers</code> then <code>&lt;&lt;collection_sort&gt;&gt;</code> is replaced with <code>Avengers, The</code> instead of <code>The Avengers</code> for that collection.</li> </ul> <p>Every template call is given these template variables.</p> <ul> <li>Either <code>&lt;&lt;collection_name&gt;&gt;</code>, <code>&lt;&lt;playlist_name&gt;&gt;</code>, or <code>&lt;&lt;overlay_name&gt;&gt;</code> which is the name of the definition.</li> <li><code>&lt;&lt;mapping_name&gt;&gt;</code> is the original mapping name for the definition in the YAML file.</li> <li>Either <code>&lt;&lt;collection_sort&gt;&gt;</code> or <code>&lt;&lt;playlist_sort&gt;&gt;</code> which is the name of the definition after <code>move_prefix</code> is applied.</li> <li><code>&lt;&lt;library_type&gt;&gt;</code> which is the library type</li> <li><code>&lt;&lt;library_name&gt;&gt;</code> which is the name of the library</li> <li>All Template Variables can append <code>_encoded</code> to the variable name to use a URL encode version of the variable. ex. <code>&lt;&lt;collection_name_encoded&gt;&gt;</code></li> </ul>"},{"location":"builders/templates/#conditionals","title":"Conditionals","text":"<p>Each conditional is identified by its mapping name and has one required attribute; <code>conditions</code> and one optional attribute; <code>default</code>.</p> <p><code>default</code> is the default value for the variable when no condition is met. If default is not specified the variable becomes an optional variable.</p> <p><code>conditions</code> is a list of sets of conditions where if all conditions are met then the variable will be the <code>value</code> specified in that condition.</p> <p>Each set of conditions must have the <code>value</code> attribute which is the value of the variable if the condition is met. </p> <p>All other attribute pairs in the set of conditions will check some condition of the value of the attribute key:</p> <ul> <li>If the attribute key ends with <code>.not</code> the value must not equal the attribute value or not be in the list of attribute values.</li> <li>If the attribute key ends with <code>.exists</code> and the attribute value is <code>true</code> then the attribute key must be a given template variable and if the value is anything else then the attribute key must not be a given template variable.</li> <li>Otherwise, the value must equal the attribute value or be in the list of attribute values.</li> </ul> <p>Here's an example from the PMM Default ratings file.</p> <pre><code>templates:\nRating:\nconditionals:\nrating1_horizontal_offset:\ndefault: 30             # If no condition sets below are meet\nconditions:\n- side: [top, bottom]\nrating2: none\nrating3: none\nvalue: 0            # If side is 'top' or 'bottom' and rating2 is 'none' and rating3 is 'none'\n- side: [top, bottom]\nrating2: none\nvalue: -165         # If side is 'top' or 'bottom' and rating2 is 'none' and no previous conditions are meet\n- side: [top, bottom]\nrating3: none\nvalue: -165         # If side is 'top' or 'bottom' rating3 is 'none' and no previous conditions are meet\n- side: [top, bottom]\nvalue: -335         # If side is 'top' or 'bottom' and no previous conditions are meet\n</code></pre>"},{"location":"builders/templates/#advanced-example","title":"Advanced Example","text":"<p>Here's an example IMDb Genre template and two different ways to call it.</p> <pre><code>templates:\nIMDb Genre:\ndefault:\ntitle: feature\nlimit: 100\noptional:\n- poster_id\nimdb_list:\n- url: https://www.imdb.com/search/title/?title_type=&lt;&lt;title&gt;&gt;&amp;release_date=1990-01-01,&amp;user_rating=5.0,10.0&amp;num_votes=100000,&amp;genres=&lt;&lt;genre&gt;&gt;\nlimit: &lt;&lt;limit&gt;&gt;\n- url: https://www.imdb.com/search/title/?title_type=&lt;&lt;title&gt;&gt;&amp;release_date=1990-01-01,&amp;user_rating=5.0,10.0&amp;num_votes=100000,&amp;genres=&lt;&lt;genre&gt;&gt;&amp;sort=user_rating,desc\nlimit: &lt;&lt;limit&gt;&gt;\nsort_title: \"!_&lt;&lt;collection_name&gt;&gt;\"\nurl_poster: https://theposterdb.com/api/assets/&lt;&lt;poster_id&gt;&gt;\nsync_mode: sync\ncollection_order: alpha\ncollections:\nAction:\ntemplate:\nname: IMDb Genre\ngenre: action\nsummary: Action film is a genre wherein physical action takes precedence in the storytelling. The film will often have continuous motion and action including physical stunts, chases, fights, battles, and races. The story usually revolves around a hero that has a goal, but is facing incredible odds to obtain it.\nComedy:\ntemplate: {name: IMDb Genre, genre: comedy, poster_id: 69200}\nsummary: Comedy is a genre of film that uses humor as a driving force. The aim of a comedy film is to illicit laughter from the audience through entertaining stories and characters. Although the comedy film may take on some serious material, most have a happy ending. Comedy film has the tendency to become a hybrid sub-genre because humor can be incorporated into many other genres. Comedies are more likely than other films to fall back on the success and popularity of an individual star.\nRomantic Comedy:\ntemplate: {name: IMDb Genre, genre: \"romance,comedy\", limit: 200}\nsummary: Romantic Comedy is a genre that attempts to catch the viewer\u2019s heart with the combination of love and humor. This sub-genre is light-hearted and usually places the two protagonists in humorus situation. Romantic-Comedy film revolves around a romantic ideal, such as true love. In the end, the ideal triumphs over the situation or obstacle, thus creating a happy ending.\nfilters:\ngenre: Comedy\n</code></pre> <p>Check out the example files in the Plex Meta Manager Configs Repository for more uses and examples.</p>"},{"location":"builders/templates/#external-templates","title":"External Templates","text":"<p>To load external templates located in another file you can use the <code>external_templates</code> attribute by specifying the path type and path of the files that will be executed. See Path Types for how to define them.</p> <pre><code>external_templates:\n- file: config/templates.yml       - pmm: templates\n</code></pre>"},{"location":"builders/tmdb/","title":"TMDb Builders","text":"<p>You can find items using the features of TheMovieDb.org (TMDb).</p>"},{"location":"builders/tmdb/#standard-tmdb-builders","title":"Standard TMDb Builders","text":"Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>tmdb_collection</code> Finds every item in the TMDb collection \u2705 \u274c \u274c <code>tmdb_list</code> Finds every item in the TMDb List \u2705 \u2705 \u2705 <code>tmdb_actor</code> Finds every item in the TMDb Person's Actor Credits \u2705 \u2705 \u274c <code>tmdb_crew</code> Finds every item in the TMDb Person's Crew Credits \u2705 \u2705 \u274c <code>tmdb_director</code> Finds every item in the TMDb Person's Director Credits \u2705 \u2705 \u274c <code>tmdb_producer</code> Finds every item in the TMDb Person's Producer Credits \u2705 \u2705 \u274c <code>tmdb_writer</code> Finds every item in the TMDb Person's Writer Credits \u2705 \u2705 \u274c <code>tmdb_movie</code> Finds the movie specified \u2705 \u274c \u274c <code>tmdb_show</code> Finds the show specified \u274c \u2705 \u274c <code>tmdb_company</code> Finds every item from the TMDb company's movie/show list \u2705 \u2705 \u274c <code>tmdb_network</code> Finds every item from the TMDb network's show list \u274c \u2705 \u274c <code>tmdb_keyword</code> Finds every item from the TMDb keyword's movie/show list \u2705 \u2705 \u274c"},{"location":"builders/tmdb/#standard-tmdb-details-builders","title":"Standard TMDb Details Builders","text":"Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>tmdb_collection_details</code> Finds every item in the TMDb collection and updates the collection with the summary, poster, and background from the TMDb collection \u2705 \u274c \u274c <code>tmdb_list_details</code> Finds every item in the TMDb List and updates the collection with the description and poster of the TMDb list \u2705 \u2705 \u274c <code>tmdb_actor_details</code> Finds every item in the TMDb Person's Actor Credits with the biography and profile from the TMDb person \u2705 \u2705 \u274c <code>tmdb_crew_details</code> Finds every item in the TMDb Person's Crew Credits with the biography and profile from the TMDb person \u2705 \u2705 \u274c <code>tmdb_director_details</code> Finds every item in the TMDb Person's Actor Credits with the biography and profile from the TMDb person \u2705 \u2705 \u274c <code>tmdb_producer_details</code> Finds every item in the TMDb Person's Producer Credits with the biography and profile from the TMDb person \u2705 \u2705 \u274c <code>tmdb_writer_details</code> Finds every item in the TMDb Person's Writer Credits with the biography and profile from the TMDb person \u2705 \u2705 \u274c <code>tmdb_movie_details</code> Finds the movie specified and updates the collection with the summary, poster, and background from the TMDb movie \u2705 \u274c \u274c <code>tmdb_show_details</code> Finds the show specified and updates the collection with the summary, poster, and background from the TMDb show \u274c \u2705 \u274c"},{"location":"builders/tmdb/#other-tmdb-builders","title":"Other TMDb Builders","text":"Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>tmdb_popular</code> Finds the movies/shows in TMDb's Popular Movies/Popular Shows list \u2705 \u2705 \u2705 <code>tmdb_now_playing</code> Finds the movies in TMDb's Now Playing list \u2705 \u274c \u2705 <code>tmdb_top_rated</code> Finds the movies/shows in TMDb's Top Rated Movies/Top Rated Shows list \u2705 \u2705 \u2705 <code>tmdb_upcoming</code> Finds the movies in TMDb's Upcoming Movies list \u2705 \u274c \u2705 <code>tmdb_airing_today</code> Finds the shows in TMDb's Airing Today Shows list \u274c \u2705 \u2705 <code>tmdb_on_the_air</code> Finds the shows in TMDb's On TV Shows list \u274c \u2705 \u2705 <code>tmdb_trending_daily</code> Finds the movies/shows in TMDb's Trending Daily list \u2705 \u2705 \u2705 <code>tmdb_trending_weekly</code> Finds the movies/shows in TMDb's Trending Weekly list \u2705 \u2705 \u2705 <code>tmdb_discover</code> Uses TMDb's Discover Search to find every movie/show based on the movie search parameters or show search parameters provided \u2705 \u2705 \u2705"},{"location":"builders/tmdb/#expected-input","title":"Expected Input","text":"<p>The builders below are expected to have the full URL to the item or the TMDb ID of the item. Multiple values are supported as either a list or a comma-separated string. * TMDb Collection and TMDb Collection Details * TMDb List and TMDb List Details * TMDb Actor and TMDb Actor Details * TMDb Crew and TMDb Crew Details * TMDb Director and TMDb Director Details * TMDb Producer and TMDb Producer Details * TMDb Writer and TMDb Writer Details * TMDb Movie and TMDb Movie Details * TMDb Show and TMDb Show Details * TMDb Company * TMDb Network</p> <p>The builders below are expected to have a single integer value of how many movies/shows to query. * TMDb Popular * TMDb Now Playing * TMDb Top Rated * TMDb Trending Daily * TMDb Trending Weekly</p> <p>TMDb Discover's attributes are detailed below.</p>"},{"location":"builders/tmdb/#tmdb-collection","title":"TMDb Collection","text":"<p>Finds every item in the TMDb collection.</p> <pre><code>collections:\nThe Lord of the Rings:\ntmdb_collection: https://www.themoviedb.org/collection/119\nThe Hobbit:\ntmdb_collection: 121938\nMiddle Earth:\ntmdb_collection:\n- 119\n- https://www.themoviedb.org/collection/121938\n</code></pre> <ul> <li>You can update the collection details with the TMDb collection's summary, poster, and background by using <code>tmdb_collection_details</code>.</li> <li>You can specify multiple collections in <code>tmdb_collection_details</code> but it will only use the first one to update the collection details.</li> <li>Posters and background in the library's asset directory will be used over the collection details unless <code>tmdb_poster</code>/<code>tmdb_background</code> is also specified.</li> </ul> <pre><code>collections:\nHarry Potter:\ntmdb_collection_details: 1241   #https://www.themoviedb.org/collection/1241 also accepted\nFantastic Beasts:\ntmdb_collection_details: 435259 #https://www.themoviedb.org/collection/435259 also accepted\nWizarding World:\ntmdb_collection_details:\n- 1241\n- https://www.themoviedb.org/collection/435259\n</code></pre>"},{"location":"builders/tmdb/#tmdb-list","title":"TMDb List","text":"<p>Finds every item in the TMDb List.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTop 50 Grossing Films of All Time (Worldwide):\ntmdb_list: 10     #https://www.themoviedb.org/list/10 also accepted\ncollection_order: custom\nsync_mode: sync\n</code></pre> <ul> <li>You can update the collection details with the TMDb list's description and poster by using <code>tmdb_list_details</code>.</li> <li>You can specify multiple lists in <code>tmdb_list_details</code> but it will only use the first one to update the collection details.</li> </ul> <pre><code>collections:\nRotten Tomatoes Top 100 Movies of All Time:\ntmdb_list_details: 3697   #themoviedb.org/list/3697 also accepted\n</code></pre>"},{"location":"builders/tmdb/#tmdb-actor","title":"TMDb Actor","text":"<p>Finds every item in the TMDb Person's Actor Credits.</p> <pre><code>collections:\nRobin Williams:\ntmdb_actor: 2157  #https://www.themoviedb.org/person/2157-robin-williams also accepted\n</code></pre> <ul> <li>You can update the collection details with the TMDb Person's biography and profile by using <code>tmdb_actor_details</code>.</li> <li>You can specify multiple people in <code>tmdb_actor_details</code> but it will only use the first one to update the collection details.</li> </ul> <pre><code>collections:\nMeryl Streep:\ntmdb_actor_details: 5064\n</code></pre>"},{"location":"builders/tmdb/#tmdb-crew","title":"TMDb Crew","text":"<p>Finds every item in the TMDb Person's Crew Credits.</p> <pre><code>collections:\nQuentin Tarantino:\ntmdb_crew: 138  #https://www.themoviedb.org/person/138-quentin-tarantino also accepted\n</code></pre> <ul> <li>You can update the collection details with the TMDb Person's biography and profile by using <code>tmdb_crew_details</code>.</li> <li>You can specify multiple people in <code>tmdb_crew_details</code> but it will only use the first one to update the collection details.</li> </ul> <pre><code>collections:\nJames Cameron:\ntmdb_crew_details: 2710\n</code></pre>"},{"location":"builders/tmdb/#tmdb-director","title":"TMDb Director","text":"<p>Finds every item in the TMDb Person's Director Credits.</p> <pre><code>collections:\nSteven Spielberg:\ntmdb_director: 488  #https://www.themoviedb.org/person/488-steven-spielberg also accepted\n</code></pre> <ul> <li>You can update the collection details with the TMDb Person's biography and profile by using <code>tmdb_director_details</code>.</li> <li>You can specify multiple people in <code>tmdb_director_details</code> but it will only use the first one to update the collection details.</li> </ul> <pre><code>collections:\nSofia Coppola:\ntmdb_director_details: 1769\n</code></pre>"},{"location":"builders/tmdb/#tmdb-producer","title":"TMDb Producer","text":"<p>Finds every item in the TMDb Person's Producer Credits.</p> <pre><code>collections:\nAdam Sandler:\ntmdb_producer: 19292  #https://www.themoviedb.org/person/19292-adam-sandler also accepted\n</code></pre> <ul> <li>You can update the collection details with the TMDb Person's biography and profile by using <code>tmdb_producer_details</code>.</li> <li>You can specify multiple people in <code>tmdb_producer_details</code> but it will only use the first one to update the collection details.</li> </ul> <pre><code>collections:\nKathleen Kennedy:\ntmdb_producer_details: 489\n</code></pre>"},{"location":"builders/tmdb/#tmdb-writer","title":"TMDb Writer","text":"<p>Finds every item in the TMDb Person's Writer Credits.</p> <pre><code>collections:\nWoody Allen:\ntmdb_writer: 1243 #https://www.themoviedb.org/person/1243-woody-allen also accepted\n</code></pre> <ul> <li>You can update the collection details with the TMDb Person's biography and profile by using <code>tmdb_writer_details</code>.</li> <li>You can specify multiple people in <code>tmdb_writer_details</code> but it will only use the first one to update the collection details.</li> </ul> <pre><code>collections:\nTina Fey:\ntmdb_writer_details: 56323\n</code></pre>"},{"location":"builders/tmdb/#tmdb-movie","title":"TMDb Movie","text":"<p>Finds the movie specified.</p> <pre><code>collections:\nAnaconda:\ntmdb_collection: 105995 #https://www.themoviedb.org/collection/105995 also accepted\ntmdb_movie: 336560      #https://www.themoviedb.org/movie/336560 also accepted\n</code></pre> <ul> <li>You can update the collection details with the TMDb movie's summary, poster, and background by using <code>tmdb_movie_details</code>.</li> <li>You can specify multiple movies in <code>tmdb_movie_details</code> but it will only use the first one to update the collection details.</li> <li>Posters and background in the library's asset directory will be used over the collection details unless <code>tmdb_poster</code>/<code>tmdb_background</code> is also specified.</li> </ul> <pre><code>collections:\nDeadpool Specials:\ntmdb_collection: 567604\ntmdb_movie_details: 558144\n</code></pre>"},{"location":"builders/tmdb/#tmdb-show","title":"TMDb Show","text":"<p>Finds the show specified.</p> <pre><code>collections:\nStar Wars (Animated Shows):\ntmdb_show:\n- 4194  #https://www.themoviedb.org/tv/4194-star-wars-the-clone-wars also accepted\n- 60554 #https://www.themoviedb.org/tv/60554-star-wars-rebels also accepted\n</code></pre> <ul> <li>You can update the collection details with the TMDb show's summary, poster, and background by using <code>tmdb_show_details</code>.</li> <li>You can specify multiple shows in <code>tmdb_show_details</code> but it will only use the first one to update the collection details.</li> <li>Posters and background in the library's asset directory will be used over the collection details unless <code>tmdb_poster</code>/<code>tmdb_background</code> is also specified.</li> </ul> <pre><code>collections:\nPok\u00e9mon Evolutions &amp; Chronicles:\ntmdb_show_details:\n- 132636\n- 13230\n</code></pre>"},{"location":"builders/tmdb/#tmdb-company","title":"TMDb Company","text":"<p>Finds every movie from the TMDb company's movie list.</p> <pre><code>collections:\nStudio Ghibli:\ntmdb_company: 10342 #https://www.themoviedb.org/company/10342 also accepted\n</code></pre>"},{"location":"builders/tmdb/#tmdb-network","title":"TMDb Network","text":"<p>Finds every item from the TMDb network's movie/show list.</p> <pre><code>collections:\nCBS:\ntmdb_network: 16  #https://www.themoviedb.org/network/16 also accepted\n</code></pre>"},{"location":"builders/tmdb/#tmdb-keyword","title":"TMDb Keyword","text":"<p>Finds every item from the TMDb keyword's movie/show list.</p> <pre><code>collections:\nMarvel Cinematic Universe:\ntmdb_keyword: 180547  #https://www.themoviedb.org/keyword/180547 also accepted\n</code></pre>"},{"location":"builders/tmdb/#tmdb-popular","title":"TMDb Popular","text":"<p>Finds the movies/shows in TMDb's Popular Movies/Popular Shows list.</p> <p>Use <code>tmdb_region</code> with this builder to set the region.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb Popular:\ntmdb_popular: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-now-playing","title":"TMDb Now Playing","text":"<p>Finds the movies in TMDb's Now Playing list.</p> <p>Use <code>tmdb_region</code> with this builder to set the region.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb Now Playing:\ntmdb_now_playing: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-top-rated","title":"TMDb Top Rated","text":"<p>Finds the movies/shows in TMDb's Top Rated Movies/Top Rated Shows list.</p> <p>Use <code>tmdb_region</code> with this builder to set the region.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb Top Rated:\ntmdb_top_rated: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-upcoming","title":"TMDb Upcoming","text":"<p>Finds the movies in TMDb's Upcoming Movies list.</p> <p>Use <code>tmdb_region</code> with this builder to set the region.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb Upcoming:\ntmdb_upcoming: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-airing-today","title":"TMDb Airing Today","text":"<p>Finds the shows in TMDb's Airing Today Shows list.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb Airing Today:\ntmdb_airing_today: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-on-the-air","title":"TMDb On the Air","text":"<p>Finds the shows in TMDb's On TV Shows list.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb On the Air:\ntmdb_on_the_air: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-trending-daily","title":"TMDb Trending Daily","text":"<p>Finds the movies/shows in TMDb's Trending Daily list.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb Daily Trending:\ntmdb_trending_daily: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-trending-weekly","title":"TMDb Trending Weekly","text":"<p>Finds the movies/shows in TMDb's Trending Weekly list.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <pre><code>collections:\nTMDb Weekly Trending:\ntmdb_trending_weekly: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tmdb/#tmdb-discover","title":"TMDb Discover","text":"<p>Uses TMDb's Discover Search to find every movie/show based on the movie search parameters or show search parameters provided.</p> <p>I've observed many attributes that begin with <code>with_</code> or <code>without_</code> being able to use <code>|</code> as an <code>OR</code> and <code>&amp;</code> as an <code>AND</code> when specifying multiple items even though it's not listed as possible.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> Type Description String Any number of alphanumeric characters Integer Any whole number greater than zero i.e. 2, 10, 50 Number Any number greater than zero i.e. 2.5, 7.4, 9 Boolean Must be <code>true</code> or <code>false</code> Date: <code>MM/DD/YYYY</code> Date that fits the specified format Year: <code>YYYY</code> Year must be a 4 digit integer i.e. 1990"},{"location":"builders/tmdb/#discover-movies-parameters","title":"Discover Movies Parameters","text":"Movie Parameters Description <code>limit</code> Specify how many movies you want returned by the query.Type: IntegerDefault: 100 <code>region</code> Specify a ISO 3166-1 code to filter release dates. Must be uppercase. Will use the <code>region</code> specified in the TMDb Config by default.Type: <code>^[A-Z]{2}$</code> <code>sort_by</code> Choose from one of the many available sort options.Type: Any sort options belowDefault: <code>popularity.desc</code> <code>certification_country</code> Used in conjunction with the certification parameter, use this to specify a country with a valid certification.Type: String <code>certification</code> Filter results with a valid certification from the <code>certification_country</code> parameter.Type: String <code>certification.lte</code> Filter and only include movies that have a certification that is less than or equal to the specified value.Type: String <code>certification.gte</code> Filter and only include movies that have a certification that is greater than or equal to the specified value.Type: String <code>include_adult</code> A filter and include or exclude adult movies.Type: Boolean <code>include_video</code> A filter and include or exclude videos.Type: Boolean <code>primary_release_year</code> A filter to limit the results to a specific primary release year.Type: Year: YYYY <code>primary_release_date.gte</code> Filter and only include movies that have a primary release date that is greater or equal to the specified value.Type: Date: <code>MM/DD/YYYY</code> <code>primary_release_date.lte</code> Filter and only include movies that have a primary release date that is less than or equal to the specified value.Type: Date: <code>MM/DD/YYYY</code> <code>release_date.gte</code> Filter and only include movies that have a release date (looking at all release dates) that is greater or equal to the specified value.Type: Date: <code>MM/DD/YYYY</code> <code>release_date.lte</code> Filter and only include movies that have a release date (looking at all release dates) that is less than or equal to the specified value.Type: Date: <code>MM/DD/YYYY</code> <code>with_release_type</code> Specify a comma (AND) or pipe (OR) separated value to filter release types by.Type: StringValues: <code>1</code>: Premiere, <code>2</code>: Theatrical (limited), <code>3</code>: Theatrical, <code>4</code>: Digital, <code>5</code>: Physical, <code>6</code>: TV <code>year</code> A filter to limit the results to a specific year (looking at all release dates).Type: Year: <code>YYYY</code> <code>vote_count.gte</code> Filter and only include movies that have a vote count that is greater or equal to the specified value.Type: Integer <code>vote_count.lte</code> Filter and only include movies that have a vote count that is less than or equal to the specified value.Type: Integer <code>vote_average.gte</code> Filter and only include movies that have a rating that is greater or equal to the specified value.Type: Number <code>vote_average.lte</code> Filter and only include movies that have a rating that is less than or equal to the specified value.Type: Number <code>with_cast</code> A comma-separated list of person ID's. Only include movies that have one of the ID's added as an actor.Type: String <code>with_crew</code> A comma-separated list of person ID's. Only include movies that have one of the ID's added as a crew member.Type: String <code>with_people</code> A comma-separated list of person ID's. Only include movies that have one of the ID's added as either an actor or a crew member.Type: String <code>with_companies</code> A comma-separated list of production company ID's. Only include movies that have one of the ID's added as a production company.Type: String <code>without_companies</code> Filter the results to exclude the specific production companies you specify here. AND / OR filters are supported.Type: String <code>with_genres</code> Comma-separated value of genre ids that you want to include in the results.Type: String <code>without_genres</code> Comma-separated value of genre ids that you want to exclude from the results.Type: String <code>with_keywords</code> A comma-separated list of keyword ID's. Only includes movies that have one of the ID's added as a keyword.Type: String <code>without_keywords</code> Exclude items with certain keywords. You can comma and pipe separate these values to create an 'AND' or 'OR' logic.Type: String <code>with_runtime.gte</code> Filter and only include movies that have a runtime that is greater or equal to a value.Type: Integer <code>with_runtime.lte</code> Filter and only include movies that have a runtime that is less than or equal to a value.Type: Integer <code>with_original_language</code> Specify an ISO 639-1 string to filter results by their original language value.Type: String <code>with_title_translation</code> Specify a language/country string to filter the results by if the item has a type of title translation.Type: StringValues: <code>ar-AE</code>, <code>ar-SA</code>, <code>bg-BG</code>, <code>bn-BD</code>, <code>ca-ES</code>, <code>ch-GU</code>, <code>cs-CZ</code>, <code>da-DK</code>, <code>de-DE</code>, <code>el-GR</code>, <code>en-US</code>, <code>eo-EO</code>, <code>es-ES</code>, <code>es-MX</code>, <code>eu-ES</code>, <code>fa-IR</code>, <code>fi-FI</code>, <code>fr-CA</code>, <code>fr-FR</code>, <code>he-IL</code>, <code>hi-IN</code>, <code>hu-HU</code>, <code>id-ID</code>, <code>it-IT</code>, <code>ja-JP</code>, <code>ka-GE</code>, <code>kn-IN</code>, <code>ko-KR</code>, <code>lt-LT</code>, <code>ml-IN</code>, <code>nb-NO</code>, <code>nl-NL</code>, <code>no-NO</code>, <code>pl-PL</code>, <code>pt-BR</code>, <code>pt-PT</code>, <code>ro-RO</code>, <code>ru-RU</code>, <code>sk-SK</code>, <code>sl-SI</code>, <code>sr-RS</code>, <code>sv-SE</code>, <code>ta-IN</code>, <code>te-IN</code>, <code>th-TH</code>, <code>tr-TR</code>, <code>uk-UA</code>, <code>vi-VN</code>, <code>zh-CN</code>, <code>zh-TW</code> <code>with_overview_translation</code> Specify a language/country string to filter the results by if the item has a type of overview translation.Type: StringValues: <code>ar-AE</code>, <code>ar-SA</code>, <code>bg-BG</code>, <code>bn-BD</code>, <code>ca-ES</code>, <code>ch-GU</code>, <code>cs-CZ</code>, <code>da-DK</code>, <code>de-DE</code>, <code>el-GR</code>, <code>en-US</code>, <code>eo-EO</code>, <code>es-ES</code>, <code>es-MX</code>, <code>eu-ES</code>, <code>fa-IR</code>, <code>fi-FI</code>, <code>fr-CA</code>, <code>fr-FR</code>, <code>he-IL</code>, <code>hi-IN</code>, <code>hu-HU</code>, <code>id-ID</code>, <code>it-IT</code>, <code>ja-JP</code>, <code>ka-GE</code>, <code>kn-IN</code>, <code>ko-KR</code>, <code>lt-LT</code>, <code>ml-IN</code>, <code>nb-NO</code>, <code>nl-NL</code>, <code>no-NO</code>, <code>pl-PL</code>, <code>pt-BR</code>, <code>pt-PT</code>, <code>ro-RO</code>, <code>ru-RU</code>, <code>sk-SK</code>, <code>sl-SI</code>, <code>sr-RS</code>, <code>sv-SE</code>, <code>ta-IN</code>, <code>te-IN</code>, <code>th-TH</code>, <code>tr-TR</code>, <code>uk-UA</code>, <code>vi-VN</code>, <code>zh-CN</code>, <code>zh-TW</code> <code>with_watch_providers</code> A comma or pipe separated list of watch provider ID's. Combine this filter with <code>watch_region</code> in order to filter your results by a specific watch provider in a specific region.Type: String <code>watch_region</code> An ISO 3166-1 code. Combine this filter with <code>with_watch_providers</code> in order to filter your results by a specific watch provider in a specific region.Type: StringValues: ISO 3166-1 code <code>with_watch_monetization_types</code> In combination with <code>watch_region</code>, you can filter by monetization type.Type: StringValues: <code>flatrate</code>, <code>free</code>, <code>ads</code>, <code>rent</code>, <code>buy</code>"},{"location":"builders/tmdb/#discover-shows-parameters","title":"Discover Shows Parameters","text":"Show Parameters Description <code>limit</code> Specify how many movies you want to be returned by the query.Type: IntegerDefault: 100 <code>sort_by</code> Choose from one of the many available sort options.Type: Any sort options belowDefault: <code>popularity.desc</code> <code>air_date.gte</code> Filter and only include TV shows that have an air date (by looking at all episodes) that is greater or equal to the specified value.Type: Date: <code>MM/DD/YYYY</code> <code>air_date.lte</code> Filter and only include TV shows that have an air date (by looking at all episodes) that is less than or equal to the specified value.Type: Date: <code>MM/DD/YYYY</code> <code>first_air_date.gte</code> Filter and only include TV shows that have a original air date that is greater or equal to the specified value. Can be used in conjunction with the <code>include_null_first_air_dates</code> filter if you want to include items with no air date.Type: Date: <code>MM/DD/YYYY</code> <code>first_air_date.lte</code> Filter and only include TV shows that have a original air date that is less than or equal to the specified value. Can be used in conjunction with the <code>include_null_first_air_dates</code> filter if you want to include items with no air date.Type: Date: <code>MM/DD/YYYY</code> <code>first_air_date_year</code> Filter and only include TV shows that have an original air date year that equal to the specified value. Can be used in conjunction with the <code>include_null_first_air_dates</code> filter if you want to include items with no air date.Type: Year: <code>YYYY</code> <code>include_null_first_air_dates</code> Use this filter to include TV shows that don't have an air date while using any of the <code>first_air_date</code> filters.Type: Boolean <code>timezone</code> Used in conjunction with the <code>air_date.gte/lte</code> filter to calculate the proper UTC offset.Type: StringDefault: <code>America/New_York</code> <code>vote_count.gte</code> Filter and only include TV that have a vote count that is greater or equal to the specified value.Type: Integer <code>vote_count.lte</code> Filter and only include TV that have a vote count that is less than or equal to the specified value.Type: Integer <code>vote_average.gte</code> Filter and only include TV that have a rating that is greater or equal to the specified value.Type: Number <code>vote_average.lte</code> Filter and only include TV that have a rating that is less than or equal to the specified value.Type: Number <code>with_networks</code> Comma-separated value of network ids that you want to include in the results.Type: String <code>with_companies</code> A comma-separated list of production company ID's. Only include movies that have one of the ID's added as a production company.Type: String <code>without_companies</code> Filter the results to exclude the specific production companies you specify here. AND / OR filters are supported.Type: String <code>with_genres</code> Comma-separated value of genre ids that you want to include in the results.Type: String <code>without_genres</code> Comma-separated value of genre ids that you want to exclude from the results.Type: String <code>with_keywords</code> A comma-separated list of keyword ID's. Only includes TV shows that have one of the ID's added as a keyword.Type: String <code>without_keywords</code> Exclude items with certain keywords. You can comma and pipe separate these values to create an 'AND' or 'OR' logic.Type: String <code>with_runtime.gte</code> Filter and only include TV shows with an episode runtime that is greater than or equal to a value.Type: Integer <code>with_runtime.lte</code> Filter and only include TV shows with an episode runtime that is less than or equal to a value.Type: Integer <code>with_original_language</code> Specify an ISO 639-1 string to filter results by their original language value.Type: String <code>with_name_translation</code> Specify a language/country string to filter the results by if the item has a type of name translation.Type: StringValues: <code>ar-AE</code>, <code>ar-SA</code>, <code>bg-BG</code>, <code>bn-BD</code>, <code>ca-ES</code>, <code>ch-GU</code>, <code>cs-CZ</code>, <code>da-DK</code>, <code>de-DE</code>, <code>el-GR</code>, <code>en-US</code>, <code>eo-EO</code>, <code>es-ES</code>, <code>es-MX</code>, <code>eu-ES</code>, <code>fa-IR</code>, <code>fi-FI</code>, <code>fr-CA</code>, <code>fr-FR</code>, <code>he-IL</code>, <code>hi-IN</code>, <code>hu-HU</code>, <code>id-ID</code>, <code>it-IT</code>, <code>ja-JP</code>, <code>ka-GE</code>, <code>kn-IN</code>, <code>ko-KR</code>, <code>lt-LT</code>, <code>ml-IN</code>, <code>nb-NO</code>, <code>nl-NL</code>, <code>no-NO</code>, <code>pl-PL</code>, <code>pt-BR</code>, <code>pt-PT</code>, <code>ro-RO</code>, <code>ru-RU</code>, <code>sk-SK</code>, <code>sl-SI</code>, <code>sr-RS</code>, <code>sv-SE</code>, <code>ta-IN</code>, <code>te-IN</code>, <code>th-TH</code>, <code>tr-TR</code>, <code>uk-UA</code>, <code>vi-VN</code>, <code>zh-CN</code>, <code>zh-TW</code> <code>screened_theatrically</code> Filter results to include items that have been screened theatrically.Type: Boolean <code>with_watch_providers</code> A comma or pipe separated list of watch provider ID's. Combine this filter with <code>watch_region</code> in order to filter your results by a specific watch provider in a specific region.Type: String <code>watch_region</code> An ISO 3166-1 code. Combine this filter with <code>with_watch_providers</code> in order to filter your results by a specific watch provider in a specific region.Type: String <code>with_watch_monetization_types</code> In combination with <code>watch_region</code>, you can filter by monetization type.Type: StringValues: <code>flatrate</code>, <code>free</code>, <code>ads</code>, <code>rent</code>, <code>buy</code> <code>with_status</code> Filter TV shows by their status.Type: StringValues: <code>0</code>: Returning Series, <code>1</code>: Planned, <code>2</code>: In Production, <code>3</code>: Ended, <code>4</code>: Cancelled, <code>5</code>: Pilot <code>with_type</code> Filter TV shows by their type.Type: StringValues: <code>0</code>: Documentary, <code>1</code>: News, <code>2</code>: Miniseries, <code>3</code>: Reality, <code>4</code>: Scripted, <code>5</code>: Show, <code>6</code>: Video"},{"location":"builders/tmdb/#sort-options","title":"Sort Options","text":"Sort Option Movie Sort Show Sort <code>popularity.asc</code> \u2705 \u2705 <code>popularity.desc</code> \u2705 \u2705 <code>original_title.asc</code> \u2705 \u274c <code>original_title.desc</code> \u2705 \u274c <code>revenue.asc</code> \u2705 \u274c <code>revenue.desc</code> \u2705 \u274c <code>release_date.asc</code> \u2705 \u274c <code>release_date.desc</code> \u2705 \u274c <code>primary_release_date.asc</code> \u2705 \u274c <code>primary_release_date.desc</code> \u2705 \u274c <code>first_air_date.asc</code> \u274c \u2705 <code>first_air_date.desc</code> \u274c \u2705 <code>vote_average.asc</code> \u2705 \u2705 <code>vote_average.desc</code> \u2705 \u2705 <code>vote_count.asc</code> \u2705 \u274c <code>vote_count.desc</code> \u2705 \u274c <p><pre><code>collections:\nMovies Released in October 2020:\ntmdb_discover:\nprimary_release_date.gte: 10/01/2020\nprimary_release_date.lte: 10/31/2020\n</code></pre> <pre><code>collections:\nPopular Movies:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nsort_by: popularity.desc\n</code></pre> <pre><code>collections:\nHighest Rated R Movies:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\ncertification_country: US\ncertification: R\nsort_by: vote_average.desc\n</code></pre> <pre><code>collections:\nMost Popular Kids Movies:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\ncertification_country: US\ncertification.lte: G\nsort_by: popularity.desc\n</code></pre> <pre><code>collections:\nHighest Rated Movies From 2010:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nprimary_release_year: 2010\nsort_by: vote_average.desc\n</code></pre> <pre><code>collections:\nBest Dramas From 2014:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nwith_genres: 18\nprimary_release_year: 2014\nsort_by: vote_average.desc\n</code></pre> <pre><code>collections:\nHighest Rated Science Fiction Movies with Tom Cruise:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nwith_genres: 878\nwith_cast: 500\nsort_by: vote_average.desc\n</code></pre> <pre><code>collections:\nHighest Grossing Comedy Movies with Will Ferrell:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nwith_genres: 35\nwith_cast: 23659\nsort_by: revenue.desc\n</code></pre> <pre><code>collections:\nTop Rated Movies with Brad Pitt and Edward Norton:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nwith_people: 287,819\nsort_by: vote_average.desc\n</code></pre> <pre><code>collections:\nPopular Movies with David Fincher and Rooney Mara:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nwith_people: 108916,7467\nsort_by: popularity.desc\n</code></pre> <pre><code>collections:\nTop Rated Dramas:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\nwith_genres: 18\nsort_by: vote_average.desc\nvote_count.gte: 10\n</code></pre> <pre><code>collections:\nHighest Grossing R Movies with Liam Neeson:\ncollection_order: custom\nsync_mode: sync\ntmdb_discover:\ncertification_country: US\ncertification: R\nsort_by: revenue.desc\nwith_cast: 3896\n</code></pre></p>"},{"location":"builders/trakt/","title":"Trakt Builders","text":"<p>You can find items using the features of Trakt.tv (Trakt). </p> <p>Configuring Trakt in the config is required for any of these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>trakt_list</code> Finds every movie/show in the Trakt List \u2705 \u2705 \u2705 <code>trakt_list_details</code> Finds every movie/show in the Trakt List and updates the collection summary with the list description \u2705 \u2705 \u2705 <code>trakt_chart</code> Finds the movies/shows in the Trakt Chart \u2705 \u2705 \u2705 <code>trakt_userlist</code> Finds every movie/show in the Trakt Userlist \u2705 \u2705 \u2705 <code>trakt_recommendations</code> Finds the movies/shows in Trakt's Personal Recommendations for your User Movies/Shows \u2705 \u2705 \u2705 <code>trakt_boxoffice</code> Finds the 10 movies in Trakt's Top Box Office Movies list \u2705 \u274c \u2705"},{"location":"builders/trakt/#trakt-list","title":"Trakt List","text":"<p>Finds every item in the Trakt List.</p> <p>The expected input is a Trakt List URL. Multiple values are supported only as a list.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <p>Trakt Lists cannot be sorted through the API, but the list is always returned to the default list order if you own the list.</p> <p><pre><code>collections:\nChristmas:\ntrakt_list:\n- https://trakt.tv/users/movistapp/lists/christmas-movies\n- https://trakt.tv/users/2borno2b/lists/christmas-movies-extravanganza\nsync_mode: sync\n</code></pre> <pre><code>collections:\nReddit Top 250:\ntrakt_list: https://trakt.tv/users/jay-greene/lists/reddit-top-250-2019-edition\ncollection_order: custom\nsync_mode: sync\n</code></pre></p> <ul> <li>You can update the collection details with the Trakt List's description by using <code>trakt_list_details</code>.</li> <li>You can specify multiple collections in <code>trakt_list_details</code> but it will only use the first one to update the collection summary.</li> </ul> <pre><code>collections:\nReddit Top 250:\ntrakt_list_details: https://trakt.tv/users/jay-greene/lists/reddit-top-250-2019-edition\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/trakt/#trakt-chart","title":"Trakt Chart","text":"<p>Finds the movies/shows in the Trakt Chart. The options are detailed below.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> Attribute Description &amp; Values <code>chart</code> Description: Which Trakt chart to queryValues:<code>trending</code>Trakt's Trending Movies/Shows list<code>popular</code>Trakt's Popular Movies/Shows list<code>recommended</code>Trakt's Recommended Movies/Shows list<code>watched</code>Trakt's Watched Movies/Shows list<code>collected</code>Trakt's Collected Movies/Shows list <code>time_period</code> Description: Time Period for the chart. Does not work with <code>trending</code> or <code>popular</code> chart types.Default: <code>weekly</code>Values: <code>daily</code>, <code>weekly</code>, <code>monthly</code>, <code>yearly</code>, or <code>all</code> <code>limit</code> Description: Don't return more then this numberDefault: <code>10</code>Values: Number of Items to query. <code>query</code> Description: Search titles and descriptions for thisValues: Any String. <code>years</code> Description: Search for the specified years onlyValues: 4 digit year or range of 4 digit years. i.e. <code>1950</code> or <code>1950-1959</code> <code>genres</code> Description: Search for the specified genres onlyValues: Comma separated string or list of genresMovie Genres: <code>action</code>, <code>adventure</code>, <code>animation</code>, <code>anime</code>, <code>comedy</code>, <code>crime</code>, <code>documentary</code>, <code>drama</code>, <code>family</code>, <code>fantasy</code>, <code>history</code>, <code>holiday</code>, <code>horror</code>, <code>music</code>, <code>musical</code>, <code>mystery</code>, <code>none</code>, <code>romance</code>, <code>science-fiction</code>, <code>short</code>, <code>sporting-event</code>, <code>superhero</code>, <code>suspense</code>, <code>thriller</code>, <code>war</code>, <code>western</code>Show Genres: <code>action</code>, <code>adventure</code>, <code>animation</code>, <code>anime</code>, <code>biography</code>, <code>children</code>, <code>comedy</code>, <code>crime</code>, <code>documentary</code>, <code>drama</code>, <code>family</code>, <code>fantasy</code>, <code>game-show</code>, <code>history</code>, <code>holiday</code>, <code>home-and-garden</code>, <code>horror</code>, <code>mini-series</code>, <code>music</code>, <code>musical</code>, <code>mystery</code>, <code>news</code>, <code>none</code>, <code>reality</code>, <code>romance</code>, <code>science-fiction</code>, <code>short</code>, <code>soap</code>, <code>special-interest</code>, <code>sporting-event</code>, <code>superhero</code>, <code>suspense</code>, <code>talk-show</code>, <code>thriller</code>, <code>war</code>, <code>western</code> <code>languages</code> Description: Search for the specified languages onlyValues: Comma separated string or list of languagesMovie Languages: <code>ab</code>, <code>af</code>, <code>ak</code>, <code>sq</code>, <code>am</code>, <code>ar</code>, <code>an</code>, <code>hy</code>, <code>as</code>, <code>av</code>, <code>ay</code>, <code>az</code>, <code>bm</code>, <code>ba</code>, <code>eu</code>, <code>be</code>, <code>bn</code>, <code>bi</code>, <code>nb</code>, <code>bs</code>, <code>bg</code>, <code>my</code>, <code>ca</code>, <code>km</code>, <code>ch</code>, <code>ce</code>, <code>ny</code>, <code>zh</code>, <code>kw</code>, <code>co</code>, <code>cr</code>, <code>hr</code>, <code>cs</code>, <code>da</code>, <code>dv</code>, <code>nl</code>, <code>dz</code>, <code>en</code>, <code>eo</code>, <code>et</code>, <code>fo</code>, <code>fj</code>, <code>fi</code>, <code>fr</code>, <code>ff</code>, <code>gd</code>, <code>gl</code>, <code>lg</code>, <code>ka</code>, <code>de</code>, <code>el</code>, <code>gn</code>, <code>gu</code>, <code>ht</code>, <code>ha</code>, <code>he</code>, <code>hi</code>, <code>hu</code>, <code>is</code>, <code>ig</code>, <code>id</code>, <code>ie</code>, <code>iu</code>, <code>ik</code>, <code>ga</code>, <code>it</code>, <code>ja</code>, <code>jv</code>, <code>kl</code>, <code>kn</code>, <code>ks</code>, <code>kk</code>, <code>rw</code>, <code>ky</code>, <code>kg</code>, <code>ko</code>, <code>ku</code>, <code>lo</code>, <code>la</code>, <code>lv</code>, <code>li</code>, <code>ln</code>, <code>lt</code>, <code>lb</code>, <code>mk</code>, <code>mg</code>, <code>ms</code>, <code>ml</code>, <code>mt</code>, <code>mi</code>, <code>mr</code>, <code>mh</code>, <code>mn</code>, <code>nv</code>, <code>ne</code>, <code>se</code>, <code>no</code>, <code>nn</code>, <code>oc</code>, <code>oj</code>, <code>or</code>, <code>om</code>, <code>os</code>, <code>pi</code>, <code>pa</code>, <code>fa</code>, <code>pl</code>, <code>pt</code>, <code>ps</code>, <code>qu</code>, <code>ro</code>, <code>rm</code>, <code>rn</code>, <code>ru</code>, <code>sm</code>, <code>sg</code>, <code>sa</code>, <code>sc</code>, <code>sr</code>, <code>sn</code>, <code>ii</code>, <code>sd</code>, <code>si</code>, <code>sk</code>, <code>sl</code>, <code>so</code>, <code>st</code>, <code>es</code>, <code>su</code>, <code>sw</code>, <code>ss</code>, <code>sv</code>, <code>tl</code>, <code>ty</code>, <code>tg</code>, <code>ta</code>, <code>tt</code>, <code>te</code>, <code>th</code>, <code>bo</code>, <code>ti</code>, <code>to</code>, <code>ts</code>, <code>tn</code>, <code>tr</code>, <code>tk</code>, <code>tw</code>, <code>ug</code>, <code>uk</code>, <code>ur</code>, <code>uz</code>, <code>vi</code>, <code>cy</code>, <code>fy</code>, <code>wo</code>, <code>xh</code>, <code>yi</code>, <code>yo</code>, <code>za</code>, <code>zu</code>Show Languages: <code>ab</code>, <code>af</code>, <code>sq</code>, <code>am</code>, <code>ar</code>, <code>hy</code>, <code>eu</code>, <code>be</code>, <code>bn</code>, <code>nb</code>, <code>bs</code>, <code>bg</code>, <code>ca</code>, <code>km</code>, <code>zh</code>, <code>hr</code>, <code>cs</code>, <code>da</code>, <code>dv</code>, <code>nl</code>, <code>en</code>, <code>et</code>, <code>fi</code>, <code>fr</code>, <code>gl</code>, <code>ka</code>, <code>de</code>, <code>el</code>, <code>gu</code>, <code>he</code>, <code>hi</code>, <code>hu</code>, <code>is</code>, <code>id</code>, <code>ga</code>, <code>it</code>, <code>ja</code>, <code>kn</code>, <code>ko</code>, <code>lo</code>, <code>la</code>, <code>lv</code>, <code>lt</code>, <code>lb</code>, <code>mk</code>, <code>ms</code>, <code>ml</code>, <code>mt</code>, <code>mi</code>, <code>mr</code>, <code>ne</code>, <code>se</code>, <code>no</code>, <code>nn</code>, <code>pa</code>, <code>fa</code>, <code>pl</code>, <code>pt</code>, <code>ro</code>, <code>ru</code>, <code>sr</code>, <code>si</code>, <code>sk</code>, <code>sl</code>, <code>es</code>, <code>sv</code>, <code>tl</code>, <code>ta</code>, <code>te</code>, <code>th</code>, <code>tr</code>, <code>tw</code>, <code>uk</code>, <code>ur</code>, <code>uz</code>, <code>vi</code>, <code>cy</code> <code>countries</code> Description: Search for the specified countries onlyValues: Comma separated string or list of countriesMovie Countries: <code>af</code>, <code>al</code>, <code>dz</code>, <code>as</code>, <code>ad</code>, <code>ao</code>, <code>ai</code>, <code>aq</code>, <code>ag</code>, <code>ar</code>, <code>am</code>, <code>aw</code>, <code>au</code>, <code>at</code>, <code>az</code>, <code>bs</code>, <code>bh</code>, <code>bd</code>, <code>bb</code>, <code>by</code>, <code>be</code>, <code>bz</code>, <code>bj</code>, <code>bm</code>, <code>bt</code>, <code>bo</code>, <code>ba</code>, <code>bw</code>, <code>bv</code>, <code>br</code>, <code>io</code>, <code>bn</code>, <code>bg</code>, <code>bf</code>, <code>bi</code>, <code>cv</code>, <code>kh</code>, <code>cm</code>, <code>ca</code>, <code>ky</code>, <code>cf</code>, <code>td</code>, <code>cl</code>, <code>cn</code>, <code>cx</code>, <code>co</code>, <code>km</code>, <code>cg</code>, <code>cd</code>, <code>ck</code>, <code>cr</code>, <code>hr</code>, <code>cu</code>, <code>cy</code>, <code>cz</code>, <code>ci</code>, <code>dk</code>, <code>dj</code>, <code>dm</code>, <code>do</code>, <code>ec</code>, <code>eg</code>, <code>sv</code>, <code>gq</code>, <code>er</code>, <code>ee</code>, <code>sz</code>, <code>et</code>, <code>fk</code>, <code>fo</code>, <code>fj</code>, <code>fi</code>, <code>fr</code>, <code>gf</code>, <code>pf</code>, <code>tf</code>, <code>ga</code>, <code>gm</code>, <code>ge</code>, <code>de</code>, <code>gh</code>, <code>gi</code>, <code>gr</code>, <code>gl</code>, <code>gd</code>, <code>gp</code>, <code>gu</code>, <code>gt</code>, <code>gn</code>, <code>gw</code>, <code>gy</code>, <code>ht</code>, <code>va</code>, <code>hn</code>, <code>hk</code>, <code>hu</code>, <code>is</code>, <code>in</code>, <code>id</code>, <code>ir</code>, <code>iq</code>, <code>ie</code>, <code>il</code>, <code>it</code>, <code>jm</code>, <code>jp</code>, <code>jo</code>, <code>kz</code>, <code>ke</code>, <code>ki</code>, <code>kp</code>, <code>kr</code>, <code>kw</code>, <code>kg</code>, <code>la</code>, <code>lv</code>, <code>lb</code>, <code>ls</code>, <code>lr</code>, <code>ly</code>, <code>li</code>, <code>lt</code>, <code>lu</code>, <code>mo</code>, <code>mg</code>, <code>mw</code>, <code>my</code>, <code>mv</code>, <code>ml</code>, <code>mt</code>, <code>mh</code>, <code>mq</code>, <code>mr</code>, <code>mu</code>, <code>yt</code>, <code>mx</code>, <code>md</code>, <code>mc</code>, <code>mn</code>, <code>me</code>, <code>ms</code>, <code>ma</code>, <code>mz</code>, <code>mm</code>, <code>na</code>, <code>nr</code>, <code>np</code>, <code>nl</code>, <code>nc</code>, <code>nz</code>, <code>ni</code>, <code>ne</code>, <code>ng</code>, <code>nf</code>, <code>mk</code>, <code>mp</code>, <code>no</code>, <code>om</code>, <code>pk</code>, <code>pw</code>, <code>ps</code>, <code>pa</code>, <code>pg</code>, <code>py</code>, <code>pe</code>, <code>ph</code>, <code>pn</code>, <code>pl</code>, <code>pt</code>, <code>pr</code>, <code>qa</code>, <code>ro</code>, <code>ru</code>, <code>rw</code>, <code>re</code>, <code>sh</code>, <code>kn</code>, <code>lc</code>, <code>vc</code>, <code>ws</code>, <code>sm</code>, <code>st</code>, <code>sa</code>, <code>sn</code>, <code>rs</code>, <code>sc</code>, <code>sl</code>, <code>sg</code>, <code>sk</code>, <code>si</code>, <code>sb</code>, <code>so</code>, <code>za</code>, <code>ss</code>, <code>es</code>, <code>lk</code>, <code>sd</code>, <code>sr</code>, <code>se</code>, <code>ch</code>, <code>sy</code>, <code>tw</code>, <code>tj</code>, <code>tz</code>, <code>th</code>, <code>tl</code>, <code>tg</code>, <code>tk</code>, <code>to</code>, <code>tt</code>, <code>tn</code>, <code>tr</code>, <code>tm</code>, <code>tc</code>, <code>tv</code>, <code>ug</code>, <code>ua</code>, <code>ae</code>, <code>gb</code>, <code>us</code>, <code>um</code>, <code>uy</code>, <code>uz</code>, <code>vu</code>, <code>ve</code>, <code>vn</code>, <code>vg</code>, <code>vi</code>, <code>wf</code>, <code>eh</code>, <code>ye</code>, <code>zm</code>, <code>zw</code>Show Countries: <code>af</code>, <code>ad</code>, <code>ar</code>, <code>am</code>, <code>au</code>, <code>at</code>, <code>bd</code>, <code>by</code>, <code>be</code>, <code>bz</code>, <code>ba</code>, <code>bw</code>, <code>br</code>, <code>io</code>, <code>bg</code>, <code>kh</code>, <code>ca</code>, <code>td</code>, <code>cl</code>, <code>cn</code>, <code>co</code>, <code>hr</code>, <code>cu</code>, <code>cy</code>, <code>cz</code>, <code>dk</code>, <code>do</code>, <code>ec</code>, <code>eg</code>, <code>ee</code>, <code>sz</code>, <code>fi</code>, <code>fr</code>, <code>ge</code>, <code>de</code>, <code>gr</code>, <code>hn</code>, <code>hk</code>, <code>hu</code>, <code>is</code>, <code>in</code>, <code>id</code>, <code>ir</code>, <code>iq</code>, <code>ie</code>, <code>il</code>, <code>it</code>, <code>jp</code>, <code>jo</code>, <code>kz</code>, <code>kp</code>, <code>kr</code>, <code>kw</code>, <code>la</code>, <code>lv</code>, <code>lb</code>, <code>lt</code>, <code>lu</code>, <code>my</code>, <code>mv</code>, <code>mt</code>, <code>mx</code>, <code>md</code>, <code>mc</code>, <code>me</code>, <code>ma</code>, <code>np</code>, <code>nl</code>, <code>nz</code>, <code>ng</code>, <code>mk</code>, <code>mp</code>, <code>no</code>, <code>pk</code>, <code>pa</code>, <code>py</code>, <code>pe</code>, <code>ph</code>, <code>pl</code>, <code>pt</code>, <code>pr</code>, <code>qa</code>, <code>ro</code>, <code>ru</code>, <code>sa</code>, <code>sn</code>, <code>rs</code>, <code>sg</code>, <code>sk</code>, <code>si</code>, <code>za</code>, <code>es</code>, <code>lk</code>, <code>se</code>, <code>ch</code>, <code>sy</code>, <code>tw</code>, <code>th</code>, <code>tg</code>, <code>tn</code>, <code>tr</code>, <code>ua</code>, <code>ae</code>, <code>gb</code>, <code>us</code>, <code>uy</code>, <code>ve</code>, <code>vn</code> <code>certifications</code> Description: Search for the specified certifications onlyValues: Comma separated string or list of certificationsMovie Certifications: <code>g</code>, <code>pg</code>, <code>pg-13</code>, <code>r</code>, <code>nr</code>Show Certifications: <code>tv-y</code>, <code>tv-y7</code>, <code>tv-g</code>, <code>tv-pg</code>, <code>tv-14</code>, <code>tv-ma</code>, <code>nr</code> <code>runtimes</code> Description: Search for the specified runtime rangeValues: range of int i.e. <code>0-60</code> <code>ratings</code> Description: Search for the specified rating rangeValues:  range of int i.e. <code>80-100</code> <code>networks</code> Description: Search for the specified networks only Only works with showsValues: Comma separated string or list of networks <code>status</code> Description: Search for the specified status only Only works with showsValues: Comma separated string or list of statusesStatus: <code>returning</code>, <code>production</code>, <code>planned</code>, <code>canceled</code>, <code>ended</code> <p>These are the links to the trakt charts that is looked at by time period.</p> Time Period Collected Recommended Watched Daily Movies/Shows Movies/Shows Movies/Shows Weekly Movies/Shows Movies/Shows Movies/Shows Monthly Movies/Shows Movies/Shows Movies/Shows Yearly Movies/Shows Movies/Shows Movies/Shows All-Time Movies/Shows Movies/Shows Movies/Shows <pre><code>collections:\nTrakt Trending:\ntrakt_chart:\nchart: trending\nlimit: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre> <p>You can use multiple charts in one builder using a list.</p> <pre><code>collections:\nTrakt Trending &amp; Popular:\ntrakt_chart:\n- chart: trending\nlimit: 30\n- chart: popular\nlimit: 30\nsync_mode: sync\n</code></pre>"},{"location":"builders/trakt/#trakt-userlist","title":"Trakt Userlist","text":"<p>Finds every movie/show in the Trakt Userlist.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> Attribute Description &amp; Values <code>userlist</code> Description: Which Trakt userlist to queryValues:<code>watchlist</code>Trakt User's Watchlist<code>recommendations</code>Trakt User's Personal Recommendations list<code>watched</code>Trakt User's Personal Watched list<code>collected</code>Trakt User's Personal Collected list <code>user</code> Description: The User who's user lists you want to query.Default: <code>me</code>Values: Username of User or <code>me</code> for the authenticated user. <code>sort_by</code> Description: How to sort the resultsDefault: <code>rank</code>Values: <code>rank</code>, <code>added</code>, <code>released</code>, <code>title</code> <pre><code>collections:\nTrakt Watchlist:\ntrakt_userlist: userlist: watchlist\nuser: me\nsort_by: released\ncollection_order: custom\nsync_mode: sync\n</code></pre> <p>You can use multiple charts in one builder using a list.</p> <pre><code>collections:\nTrakt Watchlist:\ntrakt_userlist:\n- userlist: watched\nuser: me\n- userlist: collected\nuser: me\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/trakt/#trakt-recommendations","title":"Trakt Recommendations","text":"<p>Finds the movies/shows in Trakt's Recommendations for Movies/Shows</p> <p>The expected input is a single integer value of how many movies/shows to query. </p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTrakt Recommendations:\ntrakt_recommendations: 30\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/trakt/#trakt-box-office","title":"Trakt Box Office","text":"<p>Finds the 10 movies in Trakt's Top Box Office Movies list.</p> <p>The expected input is true. </p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order. </p> <pre><code>collections:\nTrakt Collected:\ntrakt_boxoffice: true\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/trakt/#syncing-plex-collections-to-trakt-lists","title":"Syncing Plex Collections to Trakt Lists","text":"<p>A combination of PMM settings/attributes can be utilized to create a collection via PMM and then sync them to a blank or existing Trakt List.</p> <p>NOTE: You must either create an empty Trakt list or specify an existing Trakt list which you have write access to.</p> <pre><code>collections:\nMy Favouite Movies:\nsync_to_trakt_list: myfilms\n# trakt_list: https://trakt.tv/users/plexmetamanager/lists/myfilms  OPTIONAL TWO-WAY SYNC\nplex_search:\nany:\nrating.gte: 8\nsort_by: user_rating.desc\n</code></pre> <p>In this example, PMM will generate a Plex collection with any films that I have rated 8.0 or above (using the <code>plex_search</code>). The <code>sync_to_trakt_list</code> will take those films and then sync them to my <code>myfilms</code> Trakt list.</p> <p>I can optionally also enable the <code>trakt_list</code> to create a two-way sync between Plex and Trakt. This allows me to add films to the Trakt list that I want in my Plex collection, and then sync them to Plex.</p>"},{"location":"builders/tvdb/","title":"TVDb Builders","text":"<p>You can find items using the features of TheTVDb.com (TVDb).</p> <p>No configuration is required for these builders.</p> Attribute Description Works with Movies Works with Shows Works with Playlists and Custom Sort <code>tvdb_list</code> Finds every item in a TVDb List or TVDb Userlist \u2705 \u2705 \u2705 <code>tvdb_list_details</code> Finds every item in a TVDb List or TVDb Userlist and updates the collection summary and poster with the TVDb list metadata \u2705 \u2705 \u2705 <code>tvdb_show</code> Finds the series specified \u274c \u2705 \u274c <code>tvdb_show_details</code> Finds the series specified and updates the collection with the summary, poster, and background from the TVDb series \u274c \u2705 \u274c <code>tvdb_movie</code> Finds the movie specified \u2705 \u274c \u274c <code>tvdb_movie_details</code> Finds the movie specified and updates the collection with the summary, poster, and background from the TVDb movie \u2705 \u274c \u274c"},{"location":"builders/tvdb/#tvdb-list","title":"TVDb List","text":"<p>Finds every item in a TVDb List or TVDb Userlist</p> <p>The expected input is a TVDb List URL or TVDb Userlist URL. Multiple values are supported as either a list or a comma-separated string.</p> <p>The <code>sync_mode: sync</code> and <code>collection_order: custom</code> Details are recommended since the lists are continuously updated and in a specific order.</p> <p><pre><code>collections:\nArrowverse:\ntvdb_list: https://www.thetvdb.com/lists/arrowverse\ncollection_order: custom\nsync_mode: sync\n</code></pre> <pre><code>collections:\nSaved by the Bell:\ntvdb_list: https://www.thetvdb.com/lists/6957\ncollection_order: custom\nsync_mode: sync\n</code></pre></p> <ul> <li>You can update the collection details with the TVDb list's description and poster by using <code>tvdb_list_details</code>.</li> <li>You can specify multiple lists in <code>tvdb_list_details</code> but it will only use the first one to update the collection details.</li> </ul> <pre><code>collections:\nArrowverse:\ntvdb_list_details: https://www.thetvdb.com/lists/arrowverse\ncollection_order: custom\nsync_mode: sync\n</code></pre>"},{"location":"builders/tvdb/#tvdb-show","title":"TVDb Show","text":"<p>Finds the show specified</p> <p>The expected input is a TVDb Series ID or TVDb Series URL. Multiple values are supported as either a list or a comma-separated string.</p> <p><pre><code>collections:\nStar Wars (Animated Shows):\ntvdb_show: 83268, 283468\n</code></pre> <pre><code>collections:\nStar Wars (Animated Shows):\ntvdb_show:\n- https://www.thetvdb.com/series/star-wars-the-clone-wars\n- https://www.thetvdb.com/series/star-wars-rebels\n</code></pre></p> <ul> <li>You can update the collection details with the TVDb show's summary, poster, and background by using <code>tvdb_show_details</code>.</li> <li>You can specify multiple shows in <code>tvdb_show_details</code> but it will only use the first one to update the collection details.</li> <li>Posters and background in the library's asset directory will be used over the collection details unless <code>tvdb_poster</code>/<code>tvdb_background</code> is also specified.</li> </ul> <pre><code>collections:\nStar Wars (Animated Shows):\ntvdb_show_details: 83268, 283468\n</code></pre>"},{"location":"builders/tvdb/#tvdb-movie","title":"TVDb Movie","text":"<p>Finds the movie specified</p> <p>The expected input is a TVDb Movie ID or TVDb Movie URL. Multiple values are supported as either a list or a comma-separated string.</p> <p><pre><code>collections:\nThe Lord of the Rings:\ntvdb_movie: 107, 157, 74\n</code></pre> <pre><code>collections:\nThe Lord of the Rings:\ntvdb_movie:\n- https://www.thetvdb.com/movies/the-lord-of-the-rings-the-fellowship-of-the-ring\n- https://www.thetvdb.com/movies/the-lord-of-the-rings-the-two-towers\n- https://www.thetvdb.com/movies/the-lord-of-the-rings-the-return-of-the-king\n</code></pre></p> <ul> <li>You can update the collection details with the TVDb movie's summary, poster, and background by using <code>tvdb_movie_details</code>.</li> <li>You can specify multiple movies in <code>tvdb_movie_details</code> but it will only use the first one to update the collection details.</li> <li>Posters and background in the library's asset directory will be used over the collection details unless <code>tvdb_poster</code>/<code>tvdb_background</code> is also specified.</li> </ul> <pre><code>collections:\nThe Lord of the Rings:\ntvdb_movie_details:\n- https://www.thetvdb.com/movies/the-lord-of-the-rings-the-fellowship-of-the-ring\n- https://www.thetvdb.com/movies/the-lord-of-the-rings-the-two-towers\n- https://www.thetvdb.com/movies/the-lord-of-the-rings-the-return-of-the-king\n</code></pre>"},{"location":"builders/details/arr/","title":"Radarr/Sonarr Definition Settings","text":""},{"location":"builders/details/arr/#radarr-definition-settings","title":"Radarr Definition Settings","text":"<p>All the following attributes can override the global/library Radarr attributes which are the default unless otherwise specified.</p> Attribute Description &amp; Values <code>radarr_add_missing</code> Description: Override Radarr <code>add_missing</code> attributeValues: <code>true</code> or <code>false</code> <code>radarr_add_existing</code> Description: Override Radarr <code>add_existing</code> attributeValues: <code>true</code> or <code>false</code> <code>radarr_upgrade_existing</code> Description: Override Radarr <code>upgrade_existing</code> attributeValues: <code>true</code> or <code>false</code> <code>radarr_ignore_cache</code> Description: Override Radarr <code>ignore_cache</code> attributeValues: <code>true</code> or <code>false</code> <code>radarr_folder</code> Description: Override Radarr <code>root_folder_path</code> attributeValues: Folder Path <code>radarr_monitor</code> Description: Override Radarr <code>monitor</code> attributeValues: <code>movie</code>, <code>collection</code>, or <code>none</code> <code>radarr_availability</code> Description: Override Radarr <code>availability</code> attributeValues: <code>announced</code>, <code>cinemas</code>, <code>released</code>, <code>db</code> <code>radarr_quality</code> Description: Override Radarr <code>quality_profile</code> attributeValues: Radarr Quality Profile <code>radarr_tag</code> Description: Override Radarr <code>tag</code> attributeValues: List or comma-separated string of tags <code>radarr_search</code> Description: Override Radarr <code>search</code> attributeValues: <code>true</code> or <code>false</code> <code>item_radarr_tag</code> Description: Used to append a tag in Radarr for every movie found by the builders that's in RadarrValues: List or comma-separated string of tags <code>item_radarr_tag.remove</code> Description: Used to remove existing tags in Radarr for every movie found by the builders that's in RadarrValues: List or comma-separated string of tags <code>item_radarr_tag.sync</code> Description: Matches the tags in Radarr for every movie found by the builders that's in Radarr with the provided tagsValues: List or comma-separated string of tags"},{"location":"builders/details/arr/#sonarr-definition-settings","title":"Sonarr Definition Settings","text":"<p>All the following attributes can override the global/library Sonarr attributes which are the default unless otherwise specified.</p> Attribute Description &amp; Values <code>sonarr_add_missing</code> Description: Override Sonarr <code>add_missing</code> attributeValues: <code>true</code> or <code>false</code> <code>sonarr_add_existing</code> Description: Override Sonarr <code>add_existing</code> attributeValues: <code>true</code> or <code>false</code> <code>sonarr_upgrade_existing</code> Description: Override Sonarr <code>upgrade_existing</code> attributeValues: <code>true</code> or <code>false</code> <code>sonarr_ignore_cache</code> Description: Override Sonarr <code>ignore_cache</code> attributeValues: <code>true</code> or <code>false</code> <code>sonarr_folder</code> Description: Override Sonarr <code>root_folder_path</code> attributeValues: Folder Path <code>sonarr_monitor</code> Description: Override Sonarr <code>monitor</code> attributeValues: <code>all</code>, <code>future</code>, <code>missing</code>, <code>existing</code>, <code>pilot</code>, <code>first</code>, <code>latest</code>, <code>none</code> <code>sonarr_quality</code> Description: Override Sonarr <code>quality_profile</code> attributeValues: Sonarr Quality Profile <code>sonarr_language</code> Description: Override Sonarr <code>language_profile</code> attributeValues: Sonarr Language Profile <code>sonarr_series</code> Description: Override Sonarr <code>series_type</code> attributeValues: <code>standard</code>, <code>daily</code>, <code>anime</code> <code>sonarr_season</code> Description: Override Sonarr <code>season_folder</code> attributeValues: <code>true</code> or <code>false</code> <code>sonarr_tag</code> Description: Override Sonarr <code>tag</code> attributeValues: List or comma-separated string of tags <code>sonarr_search</code> Description: Override Sonarr <code>search</code> attributeValues: <code>true</code> or <code>false</code> <code>sonarr_cutoff_search</code> Description: Override Sonarr <code>cutoff_search</code> attributeValues: <code>true</code> or <code>false</code> <code>item_sonarr_tag</code> Description: Used to append a tag in Sonarr for every series found by the builders that's in SonarrValues: List or comma-separated string of tags <code>item_sonarr_tag.remove</code> Description: Used to remove existing tags in Sonarr for every series found by the builders that's in SonarrValues: List or comma-separated string of tags <code>item_sonarr_tag.sync</code> Description: Matches the tags in Sonarr for every series found by the builders that's in Sonarr with the provided tagsValues: List or comma-separated string of tags"},{"location":"builders/details/arr/#adding-to-arr","title":"Adding to Arr","text":"<p>You can add items to Radarr/Sonarr in two different ways.   1. Items found by PMM that are missing from your collections/playlists.   2. Items found by PMM that already exist in Plex but are not in Radarr/Sonarr.</p>"},{"location":"builders/details/arr/#arr-add-missing","title":"Arr Add Missing","text":"<p>When <code>radarr_add_missing</code>/<code>sonarr_add_missing</code> are true the items missing from the collection/playlist will be added to Radarr/Sonarr.</p>"},{"location":"builders/details/arr/#arr-add-existing","title":"Arr Add Existing","text":"<p>When <code>radarr_add_existing</code>/<code>sonarr_add_existing</code> are true the items that exist in the collection/playlist will be added to Radarr/Sonarr. </p> <p>If your Radarr/Sonarr has different file system mappings from your plex use <code>radarr_path</code>/<code>sonarr_path</code> along with <code>plex_path</code> from your Radarr/Sonarr global config settings.</p>"},{"location":"builders/details/arr/#radarr-add-details","title":"Radarr Add Details","text":"<p>When adding a movie in Radarr you get the screen below to set these options use <code>radarr_folder</code>, <code>radarr_monitor</code>, <code>radarr_availability</code>, <code>radarr_quality</code>, <code>radarr_tag</code>, and <code>radarr_search</code>.</p> <p></p>"},{"location":"builders/details/arr/#sonarr-add-details","title":"Sonarr Add Details","text":"<p>When adding a movie in Sonarr you get the screen below to set these options use <code>sonarr_folder</code>, <code>sonarr_monitor</code>, <code>sonarr_quality</code>, <code>sonarr_language</code>, <code>sonarr_series</code>, <code>sonarr_season</code>, <code>sonarr_tag</code>, <code>sonarr_search</code>, and <code>sonarr_cutoff_search</code>.</p> <p></p>"},{"location":"builders/details/arr/#arr-edit-details","title":"Arr Edit Details","text":"<p>When editing the details of items that exist in the collection/playlist and in Radarr/Sonarr use <code>item_radarr_tag</code> and <code>item_sonarr_tag</code></p>"},{"location":"builders/details/definition/","title":"Definition Settings","text":"<p>All the following attributes serve various functions as how the definition functions inside of Plex Meta Manager.</p> Attribute Description &amp; Values <code>name</code> Description: Used to specify the name of the definition in Plex as different than the mapping name.Values: Any String <code>limit</code> Description: Used to specify the max number of items for the definitionValues: Number greater than 0 <code>template</code> Description: Used to specify a template and template variables to use for this definition. See the Templates Page for more information.Values: Dictionary <code>run_again</code> Description: Used to try and add all the missing items to the definition again after the daily run.Default: <code>false</code>Values: <code>true</code> or <code>false</code> <code>sync_mode</code> Description: Used to change how builders sync with this definition.Default: <code>sync_mode</code> settings value in the Configuration FileValues:<code>append</code>Only Add Items to the Collection<code>sync</code>Add &amp; Remove Items from the Collection <code>minimum_items</code> Description: Minimum items that must be found to add to a definition.Default: <code>minimum_items</code> settings value in the Configuration FileValues: number greater than 0 <code>delete_below_minimum</code> Description: Deletes the definition if below the minimum.Default: <code>delete_below_minimum</code> settings value in the Configuration FileValues: <code>true</code> or <code>false</code> <code>delete_not_scheduled</code> Description: Deletes the definition if its skipped because its not scheduled.Default: <code>delete_not_scheduled</code> settings value in the Configuration FileValues: <code>true</code> or <code>false</code> <code>tmdb_region</code> Description: Sets the region for <code>tmdb_popular</code>, <code>tmdb_now_playing</code>, <code>tmdb_top_rated</code>, and <code>tmdb_upcoming</code> <code>validate_builders</code> Description: When set to false the definition will not fail if one builder fails.Default: <code>true</code>Values: <code>true</code> or <code>false</code> <code>cache_builders</code> Description: Caches the items found by the builders for a number of days. This is useful if you run the same configuration on multiple libraries/servers in one run just set the value to <code>1</code>.Default: <code>0</code> Values: number 0 or greater <code>blank_collection</code> Description: When set to true the collection will be created with no builders and no items added.Default: <code>false</code>Values: <code>true</code> or <code>false</code> <code>build_collection</code> Description: When set to false the collection won't be created but items can still be added to Radarr/Sonarr. Does not work for playlists.Default: <code>true</code>Values: <code>true</code> or <code>false</code> <code>server_preroll</code> Description: Used to set the <code>Movie pre-roll video</code> Text box in Plex under Settings -&gt; Extras.You can run this with a schedule to change the pre-rolls automatically.Values: Any String <code>missing_only_released</code> Description: definition Level <code>missing_only_released</code> toggle.Default: <code>missing_only_released</code> settings value in the Configuration FileValues: <code>true</code> or <code>false</code> <code>only_filter_missing</code> Description: definition Level <code>only_filter_missing</code> toggle.Default: <code>only_filter_missing</code> settings value in the Configuration FileValues: <code>true</code> or <code>false</code> <code>show_filtered</code> Description: definition level <code>show_filtered</code> toggle.Default: <code>show_filtered</code> settings value in the Configuration FileValues: <code>true</code> or <code>false</code> <code>show_missing</code> Description: definition level <code>show_missing</code> toggle.Default: <code>show_missing</code> settings value in the Configuration FileValues: <code>true</code> or <code>false</code> <code>save_report</code> Description: definition level <code>save_report</code> toggle.Default: <code>save_report</code> settings value in the Configuration FileValues: <code>true</code> or <code>false</code> <code>ignore_ids</code> Description: definition level <code>ignore_ids</code> which is combined with the library and global <code>ignore_ids</code>.Default: <code>ignore_ids</code> settings value in the Configuration FileValues: List or comma-separated String of TMDb/TVDb IDs <code>ignore_imdb_ids</code> Description: definition level <code>ignore_imdb_ids</code> which is combined with the library and global <code>ignore_imdb_ids</code>.Default: <code>ignore_imdb_ids</code> settings value in the Configuration FileValues: List or comma-separated String of IMDb IDs <code>name_mapping</code> Description: Used to specify the folder name in the Image Assets Directory i.e. if your definition name contains characters that are not allowed in file paths (i.e. for windows <code>&lt;</code>, <code>&gt;</code>, <code>:</code>, <code>\"</code>, <code>/</code>, <code>\\</code>, <code>?</code>, <code>*</code> cannot be in the file path), but you want them in your name you can this to specify the name in the file system.Values: Any String <code>test</code> Description: When running in Test Mode (<code>--run-tests</code> option) only definitions with <code>test: true</code> will be run.Default: <code>false</code>Values: <code>true</code> or <code>false</code> <code>changes_webhooks</code> Description: Used to specify a definition changes webhook for just this definition.Values: List of webhooks <code>sync_to_trakt_list</code> Description: Used to specify a trakt list you want the definition synced to.Values: Trakt List Slug you want to sync to <code>sync_missing_to_trakt_list</code> Description: Used to also sync missing items to the Trakt List specified by <code>sync_to_trakt_list</code>.Default: <code>false</code>Values: <code>true</code> or <code>false</code> <code>run_definition</code> Description: Used to specify if this definition runs.Multiple can be used for one definition as a list or comma separated string. One <code>false</code> or unmatched library type will cause it to fail.Values: <code>movie</code>, <code>show</code>, <code>artist</code>, <code>true</code>, <code>false</code> <code>default_percent</code> Description: Used to declare the default percent for <code>episodes</code>, <code>seasons</code>, <code>tracks</code>, and <code>albums</code> special filters. Default is 50.Values: Integer between 1 and 100 <code>ignore_blank_results</code> Description: Used to not have Errors resulting from blank results from builders.Default: <code>false</code>Values: <code>true</code> or <code>false</code> <code>only_run_on_create</code> Description: Used to only run the collection definition if the collection doesn't already exist.Default: <code>false</code>Values: <code>true</code> or <code>false</code> <code>delete_collections_named</code> Description: Used to delete any collections in your plex named one of the given collections.Values: List of Collection Names to delete"},{"location":"builders/details/item_metadata/","title":"Item Metadata Updates","text":"<p>All the following attributes update various details of the metadata for every item in the collection. </p> <p>None of these updates work with Playlists or Overlays.</p> Attribute Description &amp; Values <code>item_label</code> Description: Appends new labels to every movie/show in the collectionValues: Comma-separated string of labels to append <code>item_label.remove</code> Description: Removes existing labels from every movie/show in the collectionValues: Comma-separated string of labels to remove <code>item_label.sync</code> Description: Matches the labels of every movie/show in the collection to the labels provided (Leave blank to remove all labels)Values: Comma-separated string of labels to sync <code>item_genre</code> Description: Appends new genres to every movie/show in the collectionValues: Comma-separated string of genres to append <code>item_genre.remove</code> Description: Removes existing genres from every movie/show in the collectionValues: Comma-separated string of genres to remove <code>item_genre.sync</code> Description: Matches the genres of every movie/show in the collection to the genres provided (Leave blank to remove all genres)Values: Comma-separated string of genres to sync <code>item_edition</code> Description: Replaced the edition of every movie in the collectionValues: Edition Name <code>non_item_remove_label</code> Description: Matches every movie/show that has the given label and is not in the collection and removes the labelValues: Comma-separated string of labels to remove <code>item_lock_poster</code> Description: Locks/Unlocks the poster of every movie/show in the collectionDefault: <code>None</code>Values:<code>true</code>Lock<code>false</code>Unlock <code>item_lock_background</code> Description: Locks/Unlocks the background of every movie/show in the collectionDefault: <code>None</code>Values:<code>true</code>Lock<code>false</code>Unlock <code>item_lock_title</code> Description: Locks/Unlocks the title of every movie/show in the collectionDefault: <code>None</code>Values:<code>true</code>Lock<code>false</code>Unlock <code>item_assets</code> Description: Checks your assets folders for assets of every movie/show in the collectionDefault: <code>false</code>Values: <code>true</code> or <code>false</code> <code>item_refresh</code> Description: Refreshes the metadata of every movie/show in the collectionDefault: <code>false</code>Values: <code>true</code> or <code>false</code> <code>item_refresh_delay</code> Description: Amount of time to wait between each <code>item_refresh</code> of every movie/show in the collectionDefault: <code>0</code>Values: Number greater than <code>0</code> <code>item_tmdb_season_titles</code> Description: Changes the season titles of every show in the collection to match TMDbDefault: <code>false</code>Values: <code>true</code> or <code>false</code> <code>item_episode_sorting</code>1 Description: Changes the episode sorting of every show in the collectionValues:<code>default</code>Library default<code>oldest</code>Oldest first<code>newest</code>Newest first <code>item_keep_episodes</code>1 Description: Changes the keep episodes of every show in the collectionValues:<code>all</code>All episodes<code>5_latest</code>5 latest episodes<code>3_latest</code>3 latest episodes<code>latest</code>Latest episodes<code>past_3</code>Episodes added in the past 3 days<code>past_7</code>Episodes added in the past 7 days<code>past_30</code>Episodes added in the past 30 days <code>item_delete_episodes</code>1 Description: Changes the delete episodes of every show in the collectionValues:<code>never</code>Never<code>day</code>After a day<code>week</code>After a week<code>refresh</code>On next refresh <code>item_season_display</code>1 Description: Changes the season display of every show in the collectionValues:<code>default</code>Library default<code>show</code>Show<code>hide</code>Hide <code>item_episode_ordering</code>1 Description: Changes the episode ordering of every show in the collectionValues:<code>default</code>Library default<code>tmdb_aired</code>The Movie Database (Aired)<code>tvdb_aired</code>TheTVDb (Aired)<code>tvdb_dvd</code>TheTVDb (DVD)<code>tvdb_absolute</code>TheTVDb (Absolute) <code>item_metadata_language</code>2 Description: Changes the metadata language of every movie/show in the collectionValues: <code>default</code>, <code>ar-SA</code>, <code>ca-ES</code>, <code>cs-CZ</code>, <code>da-DK</code>, <code>de-DE</code>, <code>el-GR</code>, <code>en-AU</code>, <code>en-CA</code>, <code>en-GB</code>, <code>en-US</code>, <code>es-ES</code>, <code>es-MX</code>, <code>et-EE</code>, <code>fa-IR</code>, <code>fi-FI</code>, <code>fr-CA</code>, <code>fr-FR</code>, <code>he-IL</code>, <code>hi-IN</code>, <code>hu-HU</code>, <code>id-ID</code>, <code>it-IT</code>, <code>ja-JP</code>, <code>ko-KR</code>, <code>lt-LT</code>, <code>lv-LV</code>, <code>nb-NO</code>, <code>nl-NL</code>, <code>pl-PL</code>, <code>pt-BR</code>, <code>pt-PT</code>, <code>ro-RO</code>, <code>ru-RU</code>, <code>sk-SK</code>, <code>sv-SE</code>, <code>th-TH</code>, <code>tr-TR</code>, <code>uk-UA</code>, <code>vi-VN</code>, <code>zh-CN</code>, <code>zh-HK</code>, <code>zh-TW</code> <code>item_use_original_title</code>2 Description: Changes the use original title of every movie/show in the collectionValues:<code>default</code>Library default<code>no</code>No<code>yes</code>Yes <p>1 Only works with TV Show Libraries</p> <p>2 Must be using the New Plex Movie Agent or the New Plex TV Agent </p>"},{"location":"builders/details/metadata/","title":"Collection/Playlist Metadata Updates","text":"<p>All the following attributes update various details of the definition's Metadata. </p> <p>Only <code>tmdb_person</code> works with Playlists.</p> Attribute Description &amp; Values <code>tmdb_person</code> Description: Changes summary and poster to a TMDb Person's biography and profile to the first specified person as well as allow the people specified to be used in Plex Searches.Values: TMDb Person ID or Actor Name (Will pull the first ID from the TMDb search results) (List or Comma-separated string) <code>tmdb_person_offset</code> Description: Offsets which search results are used by <code>tmdb_person</code>.Values: Any Number greater then 0Default: 0 <code>tmdb_birthday</code> Description: Controls if the Definition is run based on <code>tmdb_person</code>'s Birthday. Has 3 possible attributes <code>this_month</code>, <code>before</code> and <code>after</code>.Values:<code>this_month</code>Run's if Birthday is in current Month<code>true</code>/<code>false</code><code>before</code>Run if X Number of Days before the BirthdayNumber 0 or greater<code>after</code>Run if X Number of Days after the BirthdayNumber 0 or greater <code>sort_title</code> Description: Changes the sort title.You can \"promote\" certain collections to the top of a library by creating a sort title starting with a <code>+</code> or \"demote\" certain collections to the bottom of a library by creating a sort title starting with a <code>~</code>.Values: Text to change Sort Title <code>content_rating</code> Description: Changes the content rating.Values: Text to change Content Rating <code>label</code> Description: Appends new labels.Values: Comma-separated string of labels to append <code>label.remove</code> Description: Removes existing labels from the collection.Values: Comma-separated string of labels to remove <code>label.sync</code> Description: Matches the labels of the collection to the labels provided (Leave blank to remove all labels)Values: Comma-separated string of labels to sync <code>collection_mode</code> Description: Changes the Collection ModeValues:<code>default</code>Library default<code>hide</code>Hide Collection<code>hide_items</code>Hide Items in this Collection<code>show_items</code>Show this Collection and its Items <code>collection_order</code> Description: Changes the Collection OrderNormal Collections OnlyWhen using <code>custom.asc</code>/<code>custom.desc</code> you can only have a single builder in the collection.Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom.asc</code>/<code>custom.desc</code>Order Collection Via the Builder Order ascending or descendingAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_filtering</code> Description: Changes the Collection FilteringSmart Collections OnlyValues:<code>admin</code>Always the server admin user<code>user</code>User currently viewing the content <code>builder_level</code> Description: Make season, episode, album or track collections/overlays from <code>plex_all</code>, <code>plex_search</code>, <code>trakt_list</code>, or <code>imdb_list</code> Builders and FiltersValues:<code>season</code>Collection contains seasons<code>episode</code>Collection contains episodes<code>album</code>Collection contains albums<code>track</code>Collection contains tracks <code>visible_library</code> Description: Changes collection visible on Library Recommended Tab (Only works with Plex Pass)Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>visible_home</code> Description: Changes collection visible on Home Tab (Only works with Plex Pass)Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>visible_shared</code> Description: Changes collection visible on Shared Users' Home Tab (Only works with Plex Pass)Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>url_theme</code> Description: Changes the Collection Theme to the URL provided.Values: URL to mp3 file <code>file_theme</code> Description: Changes the Collection Theme to the file location provided.Values: Path to mp3 file <ul> <li>Here's an example of how the collections can look on the Home Page.</li> </ul>"},{"location":"builders/details/metadata/#summary-collectionplaylist-metadata-updates","title":"Summary Collection/Playlist Metadata Updates","text":"<p>All the following attributes update the summary of the collection/playlist from various sources. </p> <p>All of these details work with Playlists.</p> Attribute Description &amp; Values <code>summary</code> Description: Changes summary to the Text ProvidedValues: Text to change Summary <code>tmdb_summary</code> Description: Changes summary to the TMDb Movie/Collection summary for a movie library or the TMDb Show summary for a show libraryValues: TMDb Movie/Show/Collection ID <code>tmdb_description</code> Description: Changes summary to the TMDb List DescriptionValues: TMDb List ID <code>tmdb_biography</code> Description: Changes summary to the TMDb Person's biographyValues: TMDb Person ID <code>tvdb_summary</code> Description: Changes summary to the TVDb Movie summary for a movie library or the TVDb Show summary for a show libraryValues: TVDb Movie/Show ID or URL <code>tvdb_description</code> Description: Changes summary to the TVDb List DescriptionValues: TVDb List URL <code>trakt_description</code> Description: Changes summary to the Trakt List DescriptionValues: Trakt List URL <code>letterboxd_description</code> Description: Changes summary to the Letterboxd List DescriptionValues: Letterboxd List URL"},{"location":"builders/details/metadata/#poster-collectionplaylist-metadata-updates","title":"Poster Collection/Playlist Metadata Updates","text":"<p>All the following attributes update the poster of the collection/playlist from various sources. </p> <p>All of these details work with Playlists.</p> <p>If no poster is specified Plex Meta Manager will look in the library's Image Asset Directories for a folder named either the collection/playlist name or the <code>name_mapping</code> if specified and look for a <code>poster.ext</code> file in that folder (replacing .ext with the image extension).</p> Attribute Description &amp; Values <code>url_poster</code> Description: Changes poster to the URLValues: URL of image publicly available on the internet <code>tmdb_poster</code> Description: Changes poster to the TMDb Movie/Collection poster for a movie library or the TMDb Show poster for a show libraryValues: TMDb Movie/Show/Collection ID <code>tmdb_list_poster</code> Description: Changes poster to the TMDb List posterValues: TMDb List ID <code>tmdb_profile</code> Description: Changes poster to the TMDb Person's profileValues: TMDb Person ID <code>tvdb_poster</code> Description: Changes poster to the TVDb Movie poster for a movie library or the TVDb Show poster for a show libraryValues: TVDb Movie/Show ID or URL <code>tvdb_list_poster</code> Description: Changes poster to the TVDb List posterValues: TVDb List URL <code>file_poster</code> Description: Changes poster to the image in the file systemValues: Path to image in the file system"},{"location":"builders/details/metadata/#background-collectionplaylist-metadata-updates","title":"Background Collection/Playlist Metadata Updates","text":"<p>All the following attributes update the background of the collection/playlist from various sources.</p> <p>All of these details work with Playlists.</p> <p>If no background is specified Plex Meta Manager will look in the library's Image Asset Directories for a folder named either the collection/playlist name or the <code>name_mapping</code> if specified and look for a <code>background.ext</code> file in that folder (replacing .ext with the image extension).</p> Attribute Description &amp; Values <code>url_background</code> Description: Changes background to the URLValues: URL of image publicly available on the internet <code>tmdb_background</code> Description: Changes background to the TMDb Movie/Collection background for a movie library or the TMDb Show background for a show libraryValues: TMDb Movie/Show/Collection ID <code>tvdb_background</code> Description: Changes background to the TVDb Movie background for a movie library or the TVDb Show background for a show libraryValues: TVDb Movie/Show ID or URL <code>file_background</code> Description: Changes background to the image in the file systemValues: Path to image in the file system"},{"location":"builders/details/schedule/","title":"Schedule Setting","text":"<p>Plex Meta Manager allows you to schedule certain libraries/files so that runs can be tailored to suit your needs.</p> <p>This is particularly handy for users who have a lot of libraries or run a lot of Metadata/Operations on their libraries.</p> <p>The scheduling options are:</p> Name Description Format Example Hourly Update only when Plex Meta Manager is run in that hour hourly(Hour of Day) <code>hourly(17)</code> Daily Update once a day daily <code>daily</code> Weekly Update once a week on the specified day weekly(Day of Week) <code>weekly(sunday)</code> Monthly Update once a month on the specified day monthly(Day of Month) <code>monthly(1)</code> Yearly Update once a year on the specified day yearly(MM/DD) <code>yearly(01/30)</code> Range Updates whenever the date is within the range range(MM/DD-MM/DD) <code>range(12/01-12/31)</code> Never Never updates never <code>never</code> Non Existing Updates if it doesn't exist non_existing <code>non_existing</code> All Requires that all comma separated scheduling options inside its brackets be meet in order to run all[Options] <code>all[weekly(sunday), hourly(17)]</code> <ul> <li><code>daily</code> is the default when <code>schedule</code> is not specified.</li> <li>You can run Plex Meta Manager multiple times per day but using the <code>--time</code> command line argument detailed on the Run Commands &amp; Environmental Variables Page.</li> <li>You can have multiple scheduling options as a list.</li> <li>You can use the <code>delete_not_scheduled</code> setting to delete Collections that are skipped due to not being scheduled.</li> </ul>"},{"location":"builders/details/schedule/#examples","title":"Examples","text":"<p>Below is an example of a library which has been scheduled to run every Sunday. This will schedule everything within the library (in this case Metadata files and Operations) for the same day.</p> <pre><code>libraries:\nMovies:\nschedule: weekly(sunday)\nmetadata_path:\n- file: config/Movies.yml\n- pmm: imdb\n- pmm: studio\n- pmm: genre\n- pmm: actor\noperations:\nmass_critic_rating_update: tmdb\n</code></pre> <p>Metadata Files, Playlist Files, and Overlay Files can all be individually scheduled, as seen below where different files are scheduled to run on each day of the week: </p> <p>Note: Overlay Files cannot be individually Scheduled, all Overlay Files must be scheduled for the same period.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\nschedule: weekly(monday)\n- pmm: imdb\nschedule: weekly(tuesday)\n- folder: config/Movies/\nschedule: weekly(wednesday)\n- pmm: genre\nschedule: weekly(thursday)\n- pmm: actor\nschedule: weekly(friday)\noverlay_path:\n- schedule: weekly(saturday)\n- pmm: audio_codec\n- pmm: resolution\n- pmm: video_format\nplaylist_files:\n- file: config/Playlists.yml\nschedule: weekly(sunday)\n</code></pre> <p>Below is an example of a collection which has been scheduled to run on a Sunday. In this scenario, if you run PMM on a Monday, this collection will be skipped but any other collections which do not have a scheduled defined will be run.</p> <pre><code>collections:\nTMDb Trending Weekly:\ntmdb_trending_weekly: 30\nsync_mode: sync\nschedule: weekly(sunday)\nTMDb Top Rated:\ntmdb_top_rated: 30\nsync_mode: sync\nschedule: - monthly(1)\n- monthly(15)\n</code></pre> <p>You can also schedule items to be \"pinned\" to your homescreen on a schedule. For example, this collection will be pinned to your homescreen for the month of December and on January 1st will no longer be pinned (you must run PMM on 1st January for the removal of the pin to happen)</p> <pre><code>collections:\nChristmas Movies:\nimdb_list: https://www.imdb.com/list/ls000096828/\nsync_mode: sync\nvisible_home: range(12/01-12/31)\n</code></pre> <p>Whilst it isn't possible to schedule individual Operations, you can create additional placeholder library names and point them to the original library using <code>library_name</code>. This can be used to achieve individually scheduled operations, as seen below: <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\nMovies Operations (Monday):       # Name doesn't matter\nlibrary_name: Movies            # Must match your library name in Plex\nschedule: weekly(monday)\noperations:\nmass_user_rating_update: imdb\nMovies Operations (Wednesday):       # Name doesn't matter\nlibrary_name: Movies            # Must match your library name in Plex\nschedule: weekly(wednesday)\noperations:\nmass_audience_rating_update: tmdb\nMovies Operations (Friday):       # Name doesn't matter\nlibrary_name: Movies            # Must match your library name in Plex\nschedule: weekly(friday)\noperations:\nmass_critic_rating_update: trakt\n</code></pre></p>"},{"location":"config/anidb/","title":"AniDB Attributes","text":"<p>Configuring AniDB is optional but can unlock more features from the site</p> <p>Using <code>client</code> and <code>version</code> allows access to AniDB Library Operations.</p> <p>Using <code>username</code> and <code>password</code> allows you to access mature content with AniDB Builders.</p> <p>All AniDB Builders still work without this, they will just not have mature content</p> <p>A <code>anidb</code> mapping is in the root of the config file.</p> <p>Below is a <code>anidb</code> mapping example and the full set of attributes: <pre><code>anidb:\nclient: #######\nversion: 1\nlanguage: en\ncache_expiration: 60\nusername: ######\npassword: ######\n</code></pre></p> Attribute Allowed Values Default Required <code>client</code> AniDB Client Name N/A \u274c <code>version</code> AniDB Client Version N/A \u274c <code>language</code> ISO 639-1 Code of the User Language. en \u274c <code>cache_expiration</code> Number of days before each cache mapping expires and has to be re-cached. 60 \u274c <code>username</code> AniDB Username N/A \u274c <code>password</code> AniDB Password N/A \u274c <ul> <li> <p>To get a Client Name and Client Version please follow the following steps.</p> </li> <li> <p>Login to AniDB</p> </li> <li>Go to you API Client Page and go to the <code>Add New Project</code> Tab.</li> </ul> <p></p> <ol> <li>Fill in the Project Name with whatever name you want and then hit <code>+ Add Project</code>. The rest of the settings don't matter.</li> <li>After you've added the project you should end up on the Projects Page. If not go back to the API Client Page and click your projects name. </li> <li>Once you're on the project page click <code>Add Client</code> in the top right.</li> </ol> <p></p> <p>6a. Come up with and enter a unique to AniDB Client Name 6b. Select <code>HTTP API</code> in the API Dropdown 6c. Put <code>1</code> for Version.</p> <p></p> <ol> <li>Put the Client Name and Client Version you just created in your config.yml as <code>client</code> and <code>version</code> respectively.</li> </ol> <pre><code>anidb:\nclient: UniqueAniDBName\nversion: 1\nlanguage: en\ncache_expiration: 60\n</code></pre>"},{"location":"config/configuration/","title":"Config File","text":"<p>Plex Meta Manager uses a YAML configuration file; this file contains settings that determine how Plex Meta Manager behaves, and the required connection details needed to connect to Plex Media Server, Radarr, Sonarr, and other third-party services via API.</p> <p>By default, and unless otherwise stated, Plex Meta Manager looks for the configuration file at <code>/config/config.yml</code>.</p> <p>A template Configuration File can be found in the GitHub Repo.</p> <p>This table outlines the third-party services that Plex Meta Manager can make use of. Each service has specific requirements for setup that can be found by clicking the links within the table.</p> Attribute Required <code>libraries</code> \u2705 <code>playlist_files</code> \u274c <code>settings</code> \u274c <code>webhooks</code> \u274c <code>plex</code> \u2705 Either here or per library <code>tmdb</code> \u2705 <code>tautulli</code> \u274c <code>omdb</code> \u274c <code>notifiarr</code> \u274c <code>anidb</code> \u274c <code>radarr</code> \u274c <code>sonarr</code> \u274c <code>trakt</code> \u274c <code>mal</code> \u274c"},{"location":"config/configuration/#configuration-file-example","title":"Configuration File Example","text":"<p>This example outlines what a \"standard\" config.yml file might look like when in use.</p> <pre><code>## This file is a template remove the .template to use the file\n\nlibraries:                       # This is called out once within the config.yml file\nMovies:                        # These are names of libraries in your Plex\nmetadata_path:\n- pmm: basic               # This is a file within PMM's defaults folder\n- pmm: imdb                # This is a file within PMM's defaults folder\n# see the wiki for how to use local files, folders, URLs, or files from git\noverlay_path:\n- remove_overlays: false   # Set this to true to remove all overlays\n- pmm: ribbon              # This is a file within PMM's defaults folder\n# see the wiki for how to use local files, folders, URLs, or files from git\nTV Shows:\nmetadata_path:\n- pmm: basic               # This is a file within PMM's defaults folder\n- pmm: imdb                # This is a file within PMM's defaults folder\n# see the wiki for how to use local files, folders, URLs, or files from git\noverlay_path:\n- remove_overlays: false   # Set this to true to remove all overlays\n- pmm: ribbon              # This is a file within PMM's defaults folder\n# see the wiki for how to use local files, folders, URLs, or files from git\nAnime:\nmetadata_path:\n- pmm: basic               # This is a file within PMM's defaults folder\n- pmm: anilist             # This is a file within PMM's defaults folder\n# see the wiki for how to use local files, folders, URLs, or files from git\nMusic:\nmetadata_path:\n- file: config/Music.yml   # This is a local file THAT YOU MIGHT CREATE\nplaylist_files:\n- pmm: playlist                # This is a file within PMM's defaults folder\ntemplate_variables:\nlibraries: Movies, TV Shows   # list of libraries that you want the PMM Defaults playlists to look at\n# see the wiki for how to use local files, folders, URLs, or files from git\nsettings:\ncache: true\ncache_expiration: 60\nasset_directory: config/assets\nasset_folders: true\nasset_depth: 0\ncreate_asset_folders: false\nprioritize_assets: false\ndimensional_asset_rename: false\ndownload_url_assets: false\nshow_missing_season_assets: false\nshow_missing_episode_assets: false\nshow_asset_not_needed: true\nsync_mode: append\nminimum_items: 1\ndefault_collection_order:\ndelete_below_minimum: true\ndelete_not_scheduled: false\nrun_again_delay: 2\nmissing_only_released: false\nonly_filter_missing: false\nshow_unmanaged: true\nshow_unconfigured: true\nshow_filtered: false\nshow_options: false\nshow_missing: true\nshow_missing_assets: true\nsave_report: false\ntvdb_language: eng\nignore_ids:\nignore_imdb_ids:\nitem_refresh_delay: 0\nplaylist_sync_to_user: all\nplaylist_exclude_users:\nplaylist_report: false\nverify_ssl: true\ncustom_repo:\ncheck_nightly: false\nwebhooks:                        # Can be individually specified per library as well\nerror:\nversion:\nrun_start:\nrun_end:\nchanges:\nplex:                            # Can be individually specified per library as well; REQUIRED for Plex Meta Manager to run\nurl: http://192.168.1.12:32400\ntoken: ####################\ntimeout: 60\nclean_bundles: false\nempty_trash: false\noptimize: false\ntmdb:                            # REQUIRED for Plex Meta Manager to run\napikey: ################################\nlanguage: en\ntautulli:                        # Can be individually specified per library as well\nurl: http://192.168.1.12:8181\napikey: ################################\nomdb:\napikey: ########\ncache_expiration: 60\nmdblist:\napikey: #########################\ncache_expiration: 60\nnotifiarr:\napikey: ####################################\nanidb:                           # Not required for AniDB builders unless you want mature content\nusername: ######\npassword: ######\nradarr:                          # Can be individually specified per library as well\nurl: http://192.168.1.12:7878\ntoken: ################################\nadd_missing: false\nadd_existing: false\nroot_folder_path: S:/Movies\nmonitor: true\navailability: announced\nquality_profile: HD-1080p\ntag:\nsearch: false\nradarr_path:\nplex_path:\nsonarr:                          # Can be individually specified per library as well\nurl: http://192.168.1.12:8989\ntoken: ################################\nadd_missing: false\nadd_existing: false\nroot_folder_path: \"S:/TV Shows\"\nmonitor: all\nquality_profile: HD-1080p\nlanguage_profile: English\nseries_type: standard\nseason_folder: true\ntag:\nsearch: false\ncutoff_search: false\nsonarr_path:\nplex_path:\ntrakt:\nclient_id: ####################\nclient_secret: ####################\npin:\nauthorization:\n# everything below is autofilled by Plex Meta Manager\naccess_token:\ntoken_type:\nexpires_in:\nrefresh_token:\nscope: public\ncreated_at:\nmal:\nclient_id: ####################\nclient_secret: ####################\nauthorization:\n# everything below is autofilled by Plex Meta Manager\naccess_token:\ntoken_type:\nexpires_in:\nrefresh_token:\n</code></pre>"},{"location":"config/libraries/","title":"Library Attributes","text":""},{"location":"config/libraries/#library-attributes_1","title":"Library Attributes","text":"<p>Within the Configuration File, the <code>libraries</code> attribute specifies the Plex libraries that the user wants Plex Meta Manager to act on.</p> <p>Attributes are used to instruct Plex Meta Manager what actions to take, such as \"load the following libraries\" or \"execute the following Collection Definition files\". These attributes can be specified individually per library, or can be inherited from the global value if it has been set. If an attribute is specified at both the library and global level, then the library level attribute will take priority.</p>"},{"location":"config/libraries/#example","title":"Example","text":"<p>This example is an advanced version of the library mappings which highlights some attributes being set at the global level, and some being set at the library level:</p> Example Library Mappings <p>In this example, the <code>\"TV Shows On Second Plex\"</code> library has a library-level <code>plex</code> configuration, which takes priority over the <code>plex</code> configuration set at the global level.</p> <p>The <code>\"Anime\"</code> library also has a library-level <code>radarr</code> configuration, which takes priority over the <code>radarr</code> configuration set at the global level.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\n- pmm: imdb\n- pmm: studio\n- pmm: genre\n- pmm: actor\noperations:\nmass_critic_rating_update: tmdb\nsplit_duplicates: true\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\n- pmm: tmdb\n- pmm: network\noverlay_path:\n- remove_overlays: false\n- file: config/Overlays.yml\nTV Shows On Second Plex:\nlibrary_name: TV Shows\nplex:\nurl: http://192.168.1.98:32400\ntoken: ####################\nmetadata_path:\n- file: config/TV Shows.yml\n- pmm: tmdb\n- pmm: network\nAnime:\nmetadata_path:\n- file: config/Anime.yml\n- pmm: myanimelist\nradarr:\nurl: http://192.168.1.45:7878\ntoken: ################################\nroot_folder_path: S:/Anime\nsettings:\nasset_directory: config/assets/anime\nplex:\nurl: http://192.168.1.12:32400\ntoken: ####################\nradarr:\nurl: http://192.168.1.12:7878\ntoken: ################################\nadd: true\nroot_folder_path: S:/Movies\nmonitor: true\navailability: announced\nquality_profile: HD-1080p\ntag: pmm\nsearch: false\n</code></pre>"},{"location":"config/libraries/#attributes","title":"Attributes","text":"<p>The available attributes for each library are as follows:</p> Attribute Values Default Required <code>library_name</code> Library name (required only when trying to use multiple libraries with the same name) Base Attribute Name \u274c <code>metadata_path</code> Location of Metadata YAML files <code>/config/&lt;&lt;MAPPING_NAME&gt;&gt;.yml</code> \u274c <code>overlay_path</code> Location of Overlay YAML files None \u274c <code>report_path</code> Location to create the YAML file listing added, removed, filtered, and missing items for this library <code>/config/&lt;&lt;MAPPING_NAME&gt;&gt;_report.yml</code> \u274c <code>template_variables</code> Library template variables to be applied to every Metadata and Overlay file run. N/A \u274c <code>schedule</code> Use any schedule option to control when this library is run. daily \u274c <code>operations</code> Library Operations to run N/A \u274c <code>settings</code> Any <code>setting</code> attribute that overrides a global value global \u274c <code>plex</code> Any <code>plex</code> attribute that overrides a global value global \u2705 Either here or globally <code>radarr</code> Any <code>radarr</code> attribute that overrides a global value global \u274c <code>sonarr</code> Any <code>sonarr</code> attribute that overrides a global value global \u274c <code>tautulli</code> Any <code>tautulli</code> attribute that overrides a global value global \u274c"},{"location":"config/libraries/#library-name","title":"Library Name","text":"<p>Each library that the user wants Plex Meta Manager to interact with must be documented with a library attribute. A library attribute is represented by the mapping name (i.e. <code>Movies</code> or <code>TV Shows</code>), this must have a unique name that correlates with a library of the same name within the Plex Media Server. In the situation that two servers are being connected to which both have libraries of the same name, the <code>library_name</code> attribute can be utilized to specify the real Library Name, whilst the library attribute's mapping name can be made into a placeholder. This is showcased below:</p> Library <pre><code>libraries:\nMovies01:\nlibrary_name: Movies\nMovies02:\nlibrary_name: Movies\nplex:\nurl: http://192.168.1.35:32400\ntoken: ####################\nTV Shows:\nAnime:\nplex:\nurl: http://192.168.1.12:32400\ntoken: ####################\n</code></pre> <ul> <li>In this example, <code>\"Movies01\"</code>, <code>\"TV Shows\"</code>, and <code>\"Anime\"</code> will all use the global plex server (http://192.168.1.12:32400) which is defined using the global <code>plex</code> mapping. <code>\"Movies02\"</code> will use the plex server http://192.168.1.35:32400 which is defined under its <code>plex</code> mapping over the global mapping.</li> </ul>"},{"location":"config/libraries/#metadata-path","title":"Metadata Path","text":"<p>The <code>metadata_path</code> attribute is used to define Metadata Files by specifying the path type and path of the files that will be executed against the parent library. See Path Types for how to define them.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\n- pmm: tmdb\n- pmm: network\n</code></pre> <p>By default, when <code>metadata_path</code> is missing Plex Meta Manager will look within the root PMM directory for a metadata file called <code>&lt;MAPPING_NAME&gt;.yml</code>. In this example, Plex Meta Manager will look for a file named <code>TV Shows.yml</code>.</p> <pre><code>libraries:\nTV Shows:\n</code></pre>"},{"location":"config/libraries/#overlay-path","title":"Overlay Path","text":"<p>The <code>overlay_path</code> attribute is used to define Overlay Files by specifying the path type and path of the files that will be executed against the parent library. See Path Types for how to define them.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\noverlay_path:\n- file: config/Overlays.yml\n</code></pre>"},{"location":"config/libraries/#special-overlay-path-calls","title":"Special Overlay Path Calls","text":""},{"location":"config/libraries/#remove-overlays","title":"Remove Overlays","text":"<p>This will remove all overlays from your library, but will not delete the overlaid images from your system, resulting in image bloat.</p> <p>You can remove overlays from a library by adding <code>remove_overlays: true</code> to <code>overlay_path</code>. This will remove all overlays when run and not generate new ones.</p> Proceed with Caution <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\noverlay_path:\n- remove_overlays: true\n- file: config/Overlays.yml\n</code></pre>"},{"location":"config/libraries/#reapply-overlays","title":"Reapply Overlays","text":"<p>This will reapply all overlays on each run until this attribute is set to <code>false</code>, which will result in image bloat.</p> <p>You can reapply overlays from a library by adding <code>reapply_overlays: true</code> to <code>overlay_path</code>. This will reapply overlays to every item in your library.</p> Danger <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\noverlay_path:\n- reapply_overlays: true\n- file: config/Overlays.yml\n</code></pre>"},{"location":"config/libraries/#reset-overlays","title":"Reset Overlays","text":"<p>This will reset all posters to the desired source on each run until this attribute is set to <code>false</code>, and will reapply all overlays on each run, which will result in image bloat.</p> <p>You can reset overlays from a library by adding <code>reset_overlays</code> to <code>overlay_path</code> and setting it to either <code>tmdb</code> or <code>plex</code> depending on where you want to source the images from. This will use the reset image when overlaying items in your library.</p> Proceed with Caution <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\noverlay_path:\n- reset_overlays: plex\n- file: config/Overlays.yml\n</code></pre>"},{"location":"config/libraries/#schedule-overlays","title":"Schedule Overlays","text":"<p>You can schedule all overlays from a library by adding <code>schedule</code> to <code>overlay_path</code> and setting it to Any Schedule Option.</p> <p>You cannot schedule individual Overlay Files, as any unscheduled overlay file will be removed each time PMM is run.</p> Example <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\noverlay_path:\n- schedule: weekly(sunday)\n- file: config/Overlays.yml\n</code></pre>"},{"location":"config/libraries/#report-path","title":"Report Path","text":"<p>The <code>report_path</code> attribute is used to define where to save the YAML Report file. This file is used to store information about what media is added, removed, filtered, and missing from the Plex library compared to what is expected from the Metadata file.</p> <p>If your Metadata file creates a collection with <code>Movie 1</code>, <code>Movie 2</code> and <code>Movie 3</code> but your Plex library only has <code>Movie 1</code> and <code>Movie 3</code>, then the missing YAML file will be updated to inform the user that <code>Movie 2</code> was missing from the library.</p> <p>The default and recommended path is <code>/config/&lt;&lt;MAPPING_NAME&gt;&gt;report.yml</code> where <code>&lt;&lt;MAPPING_NAME&gt;&gt;</code> is the name of the library attribute, as showcased below:</p> <pre><code>libraries:\nMovies:\nreport_path: /config/Movies_report.yml\n</code></pre> <p>Alternatively, Report YAML files can be placed in their own directory, as below:</p> <pre><code>libraries:\nMovies:\nreport_path: /config/reports/Movies.yml\n</code></pre>"},{"location":"config/libraries/#library-template-variables","title":"Library Template Variables","text":"<p>Library template variables to be applied to every Metadata and Overlay file run.</p> <pre><code>libraries:\nMovies:\ntemplate_variables:\ncollection_mode: hide_items\n</code></pre>"},{"location":"config/mdblist/","title":"MdbList Attributes","text":"<p>Configuring MdbList is optional but can allow you to mass edit metadata.</p> <p>A <code>mdblist</code> mapping is in the root of the config file.</p> <p>Below is a <code>mdblist</code> mapping example and the full set of attributes: <pre><code>mdblist:\napikey: #########################\ncache_expiration: 60\n</code></pre></p> Attribute Allowed Values Default Required <code>apikey</code> MdbList API Key N/A \u2705 <code>cache_expiration</code> Number of days before each cache mapping expires and has to be re-cached. 60 \u274c <ul> <li> <p>The MdbList apikey can be found here.</p> </li> <li> <p>The free apikey is limited to 1000 requests per day so if you hit your limit the program should be able to pick up where it left off the next day as long as the <code>cache</code> Setting is enabled </p> </li> </ul>"},{"location":"config/myanimelist/","title":"MyAnimeList Attributes","text":"<p>Configuring MyAnimeList is optional but is required for MyAnimeList based collections and operations to function.</p> <p>A <code>mal</code> mapping is in the root of the config file.</p> <p>Below is a <code>mal</code> mapping example and the full set of attributes: <pre><code>mal:\nclient_id: ################################\nclient_secret: ################################################################\nlocalhost_url: authorization:\naccess_token:\ntoken_type:\nexpires_in:\nrefresh_token:\n</code></pre></p> Attribute Allowed Values Required <code>client_id</code> MyAnimeList Application Client ID \u2705 <code>client_secret</code> MyAnimeList Application Client Secret \u2705 <code>localhost_url</code> MyAnimeList Authorization URL \u274c <ul> <li> <p>All other attributes will be filled in by Plex Meta Manager.</p> </li> <li> <p>To connect to MyAnimeList.net you must create a MyAnimeList application and supply Plex Meta Manager the <code>client id</code> and <code>client secret</code> provided, please do the following:</p> </li> <li>Click here to create a MyAnimeList API application.</li> <li>Enter an <code>App Name</code> for the application. Ex. <code>Plex Meta Manager</code></li> <li>Select <code>web</code> for <code>App Type</code>.</li> <li>Enter an <code>App Description</code> for the application Ex. <code>Plex Meta Manager manages metadata and collections</code></li> <li>Enter <code>http://localhost/</code> for <code>App Redirect URL</code>.</li> <li>Enter <code>https://github.com/meisnate12/Plex-Meta-Manager</code> for <code>Homepage URL</code>.</li> <li>Select <code>non-commercial</code> for <code>Commercial / Non-Commercial</code>.</li> <li>Enter any name under <code>Name / Company Name</code>.</li> <li>Select <code>hobbyist</code> for <code>Purpose of Use</code>.</li> <li>Agree to the API License and Developer Agreement and hit the <code>Submit</code> button</li> <li>You should see <code>Successfully registered.</code> followed by a link that says <code>Return to list</code> click this link.</li> <li>On this page Click the <code>Edit</code> button next to the application you just created.</li> <li>Record the <code>Client ID</code> and <code>Client Secret</code> found on the application page.</li> <li>Go to this URL but replace <code>CLIENT_ID</code> with your Client ID      <pre><code>https://myanimelist.net/v1/oauth2/authorize?response_type=code&amp;client_id=CLIENT_ID&amp;code_challenge=k_UHwN_eHAPQVXiceC-rYGkozKqrJmKxPUIUOBIKo1noq_4XGRVCViP_dGcwB-fkPql8f56mmWj5aWCa2HDeugf6sRvnc9Rjhbb1vKGYLY0IwWsDNXRqXdksaVGJthux\n</code></pre></li> <li> <p>You should see a page that looks like this </p> <p></p> <p>Click \"Allow\" 16. You will be taken to a page that will not load. That's fine and expected.</p> <p></p> </li> <li> <p>Copy the URL, which will be <code>localhost/?code=BLAH</code> and paste in your config file next to <code>localhost_url</code>.     NOTE: If you do not see an error as above but instead get taken to some seemingly random website, you probably have a webserver running on your local computer, probably from some sort of tutorial if you don't recall having set one up.  For example, some Docker tutorials have you start up local web servers.     You will need to stop that web server while you're doing this in order to grab that localhost URL.</p> </li> <li>Run PMM and the auth will be completed.</li> </ul>"},{"location":"config/myanimelist/#alternative-way-letting-pmm-make-the-url","title":"Alternative Way Letting PMM make the URL","text":"<p>You can record just your <code>client_id</code> and <code>client_secret</code> and pmm will create the url for you described below.</p> <ul> <li>On the first run, Plex Meta Manager will walk the user through the OAuth flow by producing a MyAnimeList URL for the user to follow. After following the URL login to MyAnimeList.net and authorize the application by clicking the <code>Allow</code> button which will redirect the user to <code>http://localhost/</code>. Copy the entire URL and paste it into Plex Meta Manager and if the URL is correct then Plex Meta Manager will populate the <code>authorization</code> sub-attributes to use in subsequent runs.</li> </ul> <p>On first run: <pre><code>|====================================================================================================|\n| Connecting to My Anime List...                                                                     |\n|                                                                                                    |\n| Navigate to: https://myanimelist.net/v1/oauth2/authorize?response_type=code&amp;client_id=BING&amp;code_challenge=BANG |\n|                                                                                                    |\n| Login and click the Allow option. You will then be redirected to a localhost                       |\n| url that most likely won't load, which is fine. Copy the URL and paste it below                    |\n| URL:\n</code></pre></p> <p>Click on that URL to open your browser to MyAnimeList; you'll be looking at a page like this:</p> <p></p> <p>Click \"Allow\", and you will be taken to a page that will not load.  That's fine and expected.</p> <p></p> <p>Copy the URL, which will be <code>localhost/?code=BLAH</code> and paste it at the prompt.</p> <p>NOTE: If you do not see an error as above but instead get taken to some seemingly random website, you probably have a webserver running on your local computer, probably from some sort of tutorial if you don't recall having set one up.  For example, some Docker tutorials have you start up local web servers.</p> <p>You will need to stop that web server while you're doing this in order to grab that localhost URL.</p> <pre><code>| URL: http://localhost/?code=BOING\n| Saving authorization information to /path/to/Plex-Meta-Manager/config/config.yml |\n| My Anime List Connection Successful                                                                |\n|====================================================================================================|\n</code></pre> OAuth Flow using Docker <p>To authenticate MyAnimeList the first time, you need run the container with the <code>-it</code> flags in order to walk through the OAuth flow mentioned above. Once you have the MyAnimeList authentication data saved into the YAML, you'll be able to run the container normally.</p> OAuth Flow using unRAID Docker <p>Directions on how to authenticate MyAnimeList on unRAID can be found on the unRAID Walkthrough page.</p>"},{"location":"config/myanimelist/#online-authorization-script","title":"Online Authorization Script","text":"<p>Plex Meta Manager requires interactive mode to be able to enter the Client ID and Client Secret. Some systems (namely NAS) make this difficult to accomplish. Chazlarson has developed an online script that can be run to generate the MAL and Trakt authentication outside of Plex Meta Manager and then paste the end-result directly into the configuration file.</p> <p>The Online Auth tool can be found here.</p> <p>Simply press the play button, wait a little bit, and then follow the on-screen prompts.</p>"},{"location":"config/notifiarr/","title":"Notifiarr Attributes","text":"<p>Configuring Notifiarr is optional but can allow you to send the webhooks straight to notifiarr.</p> <p>A <code>notifiarr</code> mapping is in the root of the config file.</p> <p>Below is a <code>notifiarr</code> mapping example and the full set of attributes:</p> <pre><code>notifiarr:\napikey: ####################################\n</code></pre> Attribute Allowed Values Required <code>apikey</code> Notifiarr API Key \u2705 <p>Once you have added the apikey your config.yml you have to add <code>notifiarr</code> to any webhook to send that notification to Notifiarr.</p> <pre><code>webhooks:\nerror: notifiarr\nversion: notifiarr\nrun_start: notifiarr\nrun_end: notifiarr\nchanges: notifiarr\n</code></pre>"},{"location":"config/omdb/","title":"OMDb Attributes","text":"<p>Configuring OMDb is optional but can allow you to mass edit metadata using IMDb.</p> <p>A <code>omdb</code> mapping is in the root of the config file.</p> <p>Below is a <code>omdb</code> mapping example and the full set of attributes: <pre><code>omdb:\napikey: ########\ncache_expiration: 60\n</code></pre></p> Attribute Allowed Values Default Required <code>apikey</code> OMDb API Key N/A \u2705 <code>cache_expiration</code> Number of days before each cache mapping expires and has to be re-cached. 60 \u274c <ul> <li> <p>The OMDb apikey can be generated here.</p> </li> <li> <p>The free apikey is limited to 1000 requests per day so if you hit your limit the program should be able to pick up where it left off the next day as long as the <code>cache</code> Setting is enabled </p> </li> </ul>"},{"location":"config/operations/","title":"Library Operations","text":"<p>There are a variety of Library Operations that can be utilized in a library.</p> <p>Within each library, operations can be defined by using the <code>operations</code> attribute, as demonstrated below.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: imdb\noperations:\nmass_critic_rating_update: tmdb\nsplit_duplicates: true\n</code></pre> <p>The available attributes for the operations attribute are as follows</p> Attribute Description Movies Shows Music Assets For All Search in assets for images for every item in your library. \u2705 \u2705 \u2705 Delete Collections Deletes collections based on a set of given attributes. \u2705 \u2705 \u2705 Mass Genre Update Updates every item's genres in the library to the chosen site's genres. \u2705 \u2705 \u2705 Mass Content Rating Update Updates every item's content rating in the library to the chosen site's content rating. \u2705 \u2705 \u274c Mass Original Title Update Updates every item's original title in the library to the chosen site's original title. \u2705 \u2705 \u274c Mass Studio Update Updates every item's studio in the library to the chosen site's studio. \u2705 \u2705 \u274c Mass Originally Available Update Updates every item's originally available date in the library to the chosen site's date. \u2705 \u2705 \u274c Mass * Rating Update Updates every item's audience/critic/user rating in the library to the chosen site's rating. \u2705 \u2705 \u274c Mass Episode * Rating Update Updates every item's episode's audience/critic/user rating in the library to the chosen site's rating. \u274c \u2705 \u274c Mass Poster Update Updates every item's poster to the chosen sites poster. Will fallback to <code>plex</code> if the given option fails. Assets will be used over anything else. \u2705 \u2705 \u274c Mass Background Update Updates every item's background to the chosen sites background. Will fallback to <code>plex</code> if the given option fails. Assets will be used over anything else. \u2705 \u2705 \u274c Mass IMDb Parental Labels Updates every item's labels in the library to match the IMDb Parental Guide. \u2705 \u274c \u274c Mass Collection Mode Updates every Collection in your library to the specified Collection Mode. \u2705 \u274c \u274c Update Blank Track Titles Search though every track in a music library and replace any blank track titles with the tracks sort title. \u274c \u274c \u2705 Remove Title Parentheses Search through every title and remove all ending parentheses in an items title if the title is not locked. \u2705 \u2705 \u274c Split Duplicates Splits all duplicate movies/shows found in this library. \u2705 \u2705 \u274c Radarr Add All Adds every item in the library to Radarr. \u2705 \u274c \u274c Radarr Remove By Tag Removes every item from Radarr with the Tags given. \u2705 \u274c \u274c Sonarr Add All Adds every item in the library to Sonarr. \u274c \u2705 \u274c Sonarr Remove By Tag Removes every item from Sonarr with the Tags given. \u274c \u2705 \u274c Genre Mapper Allows genres to be changed to other genres or be removed from every item in your library. \u2705 \u2705 \u274c Content Rating Mapper Allows content ratings to be changed to other content ratings or be removed from every item in your library. \u2705 \u2705 \u274c Metadata Backup Creates/Maintains a PMM Metadata File with a full <code>metadata</code> mapping based on the library's items locked attributes. \u2705 \u2705 \u2705"},{"location":"config/operations/#assets-for-all","title":"Assets For All","text":"<p>Search in assets for images for every item in your library.</p> <p>Attribute: <code>assets_for_all</code></p> <p>Values: <code>true</code> or <code>false</code></p>"},{"location":"config/operations/#delete-collections","title":"Delete Collections","text":"<p>Deletes collections based on a set of given attributes. The Collection must match all set attributes to be deleted.</p> <p>Attribute: <code>delete_collections</code></p> <p>Values: There are a few different options to determine how the <code>delete_collections</code> works.</p> Attribute Description <code>managed</code> Values:<code>true</code>: Collection must be a Managed Collection to be deleted (the collection has the <code>PMM</code> label)<code>false</code>: Collection must be an Unmanaged Collection to be deleted (the collection does not have the <code>PMM</code> label) <code>configured</code> Values:<code>true</code>: Collection must be a Configured Collection to be deleted (collection is in the config file of the specific PMM run)<code>false</code>: Collection must be an Unconfigured Collection to be deleted (collection is not in the config file of the specific PMM run).The collection does not need to be scheduled to be considered configured and only needs to be in the config file. <code>less</code> Collection must contain less then the given number of items to be deleted.Values: Number Greater then 0 <p>Example:</p> <p>Removes all Managed Collections (Collections with the <code>PMM</code> Label) that are not configured in the Current Run.</p> <pre><code>library:\nMovies:\noperations:\ndelete_collections:\nconfigured: false\nmanaged: true\n</code></pre>"},{"location":"config/operations/#mass-genre-update","title":"Mass Genre Update","text":"<p>Updates every item's genres in the library to the chosen site's genres.</p> <p>Attribute: <code>mass_genre_update</code></p> <p>Values:</p> Value Description <code>tmdb</code> Use TMDb for Genres <code>tvdb</code> Use TVDb for Genres <code>imdb</code> Use IMDb for Genres <code>omdb</code> Use IMDb through OMDb for Genres <code>anidb</code> Use AniDB Main Tags for Genres <code>anidb_3_0</code> Use AniDB Main Tags and All 3 Star Tags and above for Genres <code>anidb_2_5</code> Use AniDB Main Tags and All 2.5 Star Tags and above for Genres <code>anidb_2_0</code> Use AniDB Main Tags and All 2 Star Tags and above for Genres <code>anidb_1_5</code> Use AniDB Main Tags and All 1.5 Star Tags and above for Genres <code>anidb_1_0</code> Use AniDB Main Tags and All 1 Star Tags and above for Genres <code>anidb_0_5</code> Use AniDB Main Tags and All 0.5 Star Tags and above for Genres <code>mal</code> Use MyAnimeList for Genres <code>lock</code> Lock Genre Field <code>unlock</code> Unlock Genre Field <code>remove</code> Remove all Genres and Lock Field <code>reset</code> Remove all Genres and Unlock Field"},{"location":"config/operations/#mass-content-rating-update","title":"Mass Content Rating Update","text":"<p>Updates every item's content rating in the library to the chosen site's content rating.</p> <p>Attribute: <code>mass_content_rating_update</code></p> <p>Values:</p> Value Description <code>mdb</code> Use MdbList for Content Ratings <code>mdb_commonsense</code> Use Commonsense Rating through MDbList for Content Ratings <code>mdb_commonsense0</code> Use Commonsense Rating with Zero Padding through MDbList for Content Ratings <code>omdb</code> Use IMDb through OMDb for Content Ratings <code>mal</code> Use MyAnimeList for Content Ratings <code>lock</code> Lock Content Rating Field <code>unlock</code> Unlock Content Rating Field <code>remove</code> Remove Content Rating and Lock Field <code>reset</code> Remove Content Rating and Unlock Field"},{"location":"config/operations/#mass-original-title-update","title":"Mass Original Title Update","text":"<p>Updates every item's original title in the library to the chosen site's original title.</p> <p>Attribute: <code>mass_original_title_update</code></p> <p>Values:</p> Value Description <code>anidb</code> Use AniDB Main Title for Original Titles <code>anidb_official</code> Use AniDB Official Title based on the language attribute in the config file for Original Titles <code>mal</code> Use MyAnimeList Main Title for Original Titles <code>mal_english</code> Use MyAnimeList English Title for Original Titles <code>mal_japanese</code> Use MyAnimeList Japanese Title for Original Titles <code>lock</code> Lock Original Title Field <code>unlock</code> Unlock Original Title Field <code>remove</code> Remove Original Title and Lock Field <code>reset</code> Remove Original Title and Unlock Field"},{"location":"config/operations/#mass-studio-update","title":"Mass Studio Update","text":"<p>Updates every item's studio in the library to the chosen site's studio.</p> <p>Attribute: <code>mass_studio_update</code></p> <p>Values:</p> Value Description <code>anidb</code> Use AniDB Animation Work for Studio <code>mal</code> Use MyAnimeList Studio for Studio <code>tmdb</code> Use TMDb Studio for Studio <code>lock</code> Lock Original Title Field <code>unlock</code> Unlock Original Title Field <code>remove</code> Remove Original Title and Lock Field <code>reset</code> Remove Original Title and Unlock Field"},{"location":"config/operations/#mass-originally-available-update","title":"Mass Originally Available Update","text":"<p>Updates every item's originally available date in the library to the chosen site's date.</p> <p>Attribute: <code>mass_originally_available_update</code></p> <p>Values:</p> Value Description <code>tmdb</code> Use TMDb Release Date <code>tvdb</code> Use TVDb Release Date <code>omdb</code> Use IMDb Release Date through OMDb <code>mdb</code> Use MdbList Release Date <code>anidb</code> Use AniDB Release Date <code>mal</code> Use MyAnimeList Release Date <code>lock</code> Lock Originally Available Field <code>unlock</code> Unlock Originally Available Field <code>remove</code> Remove Originally Available and Lock Field <code>reset</code> Remove Originally Available and Unlock Field"},{"location":"config/operations/#mass-rating-update","title":"Mass * Rating Update","text":"<p>Updates every item's audience/critic/user rating in the library to the chosen site's rating.</p> <p>Attribute: <code>mass_audience_rating_update</code>/<code>mass_critic_rating_update</code>/<code>mass_user_rating_update</code></p> <p>Values:</p> Value Description <code>tmdb</code> Use TMDb Rating <code>imdb</code> Use IMDb Rating <code>trakt_user</code> Use Trakt User's Personal Rating <code>omdb</code> Use IMDbRating through OMDb <code>mdb</code> Use MdbList Score <code>mdb_average</code> Use MdbList Average Score <code>mdb_imdb</code> Use IMDb Rating through MDbList <code>mdb_metacritic</code> Use Metacritic Rating through MDbList <code>mdb_metacriticuser</code> Use Metacritic User Rating through MDbList <code>mdb_trakt</code> Use Trakt Rating through MDbList <code>mdb_tomatoes</code> Use Rotten Tomatoes Rating through MDbList <code>mdb_tomatoesaudience</code> Use Rotten Tomatoes Audience Rating through MDbList <code>mdb_tmdb</code> Use TMDb Rating through MDbList <code>mdb_letterboxd</code> Use Letterboxd Rating through MDbList <code>mdb_myanimelist</code> Use MyAnimeList Rating through MDbList <code>anidb_rating</code> Use AniDB Rating <code>anidb_average</code> Use AniDB Average <code>anidb_score</code> Use AniDB Review Score <code>mal</code> Use MyAnimeList Score <code>lock</code> Lock Rating Field <code>unlock</code> Unlock Rating Field <code>remove</code> Remove Rating and Lock Field <code>reset</code> Remove Rating and Unlock Field"},{"location":"config/operations/#mass-episode-rating-update","title":"Mass Episode * Rating Update","text":"<p>Updates every item's episode's audience/critic/user rating in the library to the chosen site's rating.</p> <p>Attribute: <code>mass_episode_audience_rating_update</code>/<code>mass_episode_critic_rating_update</code>/<code>mass_episode_user_rating_update</code></p> <p>Values:</p> Value Description <code>tmdb</code> Use TMDb Rating <code>imdb</code> Use IMDb Rating <code>lock</code> Lock Rating Field <code>unlock</code> Unlock Rating Field <code>remove</code> Remove Rating and Lock Field <code>reset</code> Remove Rating and Unlock Field"},{"location":"config/operations/#mass-poster-update","title":"Mass Poster Update","text":"<p>Updates every item's poster to the chosen sites poster. Will fallback to <code>plex</code> if the given option fails. Assets will be used over anything else.</p> <p>Attribute: <code>mass_poster_update</code></p> <p>Values:</p> Value Description <code>tmdb</code> Use TMDb Poster <code>plex</code> Use Plex Poster <code>lock</code> Lock Poster <code>unlock</code> Unlock Poster"},{"location":"config/operations/#mass-background-update","title":"Mass Background Update","text":"<p>Updates every item's background to the chosen sites background. Will fallback to <code>plex</code> if the given option fails. Assets will be used over anything else.</p> <p>Attribute: <code>mass_background_update</code></p> <p>Values:</p> Value Description <code>tmdb</code> Use TMDb Background <code>plex</code> Use Plex Background <code>lock</code> Lock Background <code>unlock</code> Unlock Background"},{"location":"config/operations/#mass-imdb-parental-labels","title":"Mass IMDb Parental Labels","text":"<p>Updates every item's labels in the library to match the IMDb Parental Guide.</p> <p>Attribute: <code>mass_imdb_parental_labels</code></p> <p>Values:</p> Value Description <code>none</code> Apply all Parental Labels with a value of <code>None</code>, <code>Mild</code>, <code>Moderate</code>, or <code>Severe</code> <code>mild</code> Apply all Parental Labels with a value of <code>Mild</code>, <code>Moderate</code>, or <code>Severe</code> <code>moderate</code> Apply all Parental Labels with a value of <code>Moderate</code> or <code>Severe</code> <code>severe</code> Apply all Parental Labels with a value of <code>Severe</code>"},{"location":"config/operations/#mass-collection-mode","title":"Mass Collection Mode","text":"<p>Updates every Collection in your library to the specified Collection Mode.</p> <p>Attribute: <code>mass_collection_mode</code></p> <p>Values:</p> Value Description <code>default</code> Library default <code>hide</code> Hide Collection <code>hide_items</code> Hide Items in this Collection <code>show_items</code> Show this Collection and its Items"},{"location":"config/operations/#update-blank-track-titles","title":"Update Blank Track Titles","text":"<p>Search though every track in a music library and replace any blank track titles with the tracks sort title.</p> <p>Attribute: <code>update_blank_track_titles</code></p> <p>Values: <code>true</code> or <code>false</code></p>"},{"location":"config/operations/#remove-title-parentheses","title":"Remove Title Parentheses","text":"<p>Search through every title and remove all ending parentheses in an items title if the title is not locked.</p> <p>Attribute: <code>remove_title_parentheses</code></p> <p>Values: <code>true</code> or <code>false</code></p>"},{"location":"config/operations/#split-duplicates","title":"Split Duplicates","text":"<p>Splits all duplicate movies/shows found in this library.</p> <p>Attribute: <code>split_duplicates</code></p> <p>Values: <code>true</code> or <code>false</code></p>"},{"location":"config/operations/#radarr-add-all","title":"Radarr Add All","text":"<p>Adds every item in the library to Radarr. The existing paths in plex will be used as the root folder of each item, if the paths in Plex are not the same as your Radarr paths you can use the <code>plex_path</code> and <code>radarr_path</code> Radarr details to convert the paths.</p> <p>Attribute: <code>radarr_add_all</code></p> <p>Values: <code>true</code> or <code>false</code></p>"},{"location":"config/operations/#radarr-remove-by-tag","title":"Radarr Remove By Tag","text":"<p>Removes every item from Radarr with the Tags given.</p> <p>Attribute: <code>radarr_remove_by_tag</code></p> <p>Values: List or comma separated string of tags</p>"},{"location":"config/operations/#sonarr-add-all","title":"Sonarr Add All","text":"<p>Adds every item in the library to Sonarr. The existing paths in plex will be used as the root folder of each item, if the paths in Plex are not the same as your Sonarr paths you can use the <code>plex_path</code> and <code>sonarr_path</code> Sonarr details to convert the paths.</p> <p>Attribute: <code>sonarr_add_all</code></p> <p>Values: <code>true</code> or <code>false</code></p>"},{"location":"config/operations/#sonarr-remove-by-tag","title":"Sonarr Remove By Tag","text":"<p>Removes every item from Sonarr with the Tags given.</p> <p>Attribute: <code>sonarr_remove_by_tag</code></p> <p>Values: List or comma separated string of tags</p>"},{"location":"config/operations/#genre-mapper","title":"Genre Mapper","text":"<p>Maps genres in your library to be changed to other genres.</p> <p>Attribute: <code>genre_mapper</code></p> <p>Values: Each attribute under <code>genre_mapper</code> is a separate mapping and has two parts.</p> <ul> <li>The key (<code>Action/Adventure, Action &amp; Adventure</code> in the example below) is what genres you want mapped to the value.</li> <li>The value (<code>Action</code> in the example below) is what the genres will end up as.</li> </ul> <p>So this example will change go through every item in your library and change the genre <code>Action/Adventure</code> or <code>Action &amp; Adventure</code> to <code>Action</code> and <code>Romantic Comedy</code> to <code>Comedy</code>.</p> <pre><code>library:\nMovies:\noperations:\ngenre_mapper:\n\"Action/Adventure\": Action \"Action &amp; Adventure\": Action\nRomantic Comedy: Comedy\n</code></pre> <p>To just Remove a Genre without replacing it just set the Genre to nothing like this.</p> <pre><code>library:\nMovies:\noperations:\ngenre_mapper:\n\"Action/Adventure\": Action \"Action &amp; Adventure\": Action\nRomantic Comedy:\n</code></pre> <p>This example will change go through every item in your library and change the genre <code>Action/Adventure</code> or <code>Action &amp; Adventure</code> to <code>Action</code> and remove every instance of the Genre <code>Romantic Comedy</code>.</p>"},{"location":"config/operations/#content-rating-mapper","title":"Content Rating Mapper","text":"<p>Maps content ratings in your library to be changed to other content ratings.</p> <p>Attribute: <code>content_rating_mapper</code></p> <p>Values: Each attribute under <code>content_rating_mapper</code> is a separate mapping and has two parts.</p> <ul> <li>The key (<code>PG</code>, <code>PG-13</code> in the example below) is what content ratings you want mapped to the value.</li> <li>The value (<code>Y-10</code> in the example below) is what the content ratings will end up as.</li> </ul> <p>So this example will change go through every item in your library and change the content rating <code>PG</code> or <code>PG-13</code> to <code>Y-10</code> and <code>R</code> to <code>Y-17</code>.</p> <pre><code>library:\nMovies:\noperations:\ncontent_rating_mapper:\nPG: Y-10 \"PG-13\": Y-10\nR: Y-17\n</code></pre> <p>To just Remove a content rating without replacing it just set the content rating to nothing like this.</p> <pre><code>library:\nMovies:\noperations:\ncontent_rating_mapper:\nPG: Y-10 \"PG-13\": Y-10\nR:\n</code></pre> <p>This example will change go through every item in your library and change the content rating <code>PG</code> or <code>PG-13</code> to <code>Y-10</code> and remove every instance of the content rating <code>R</code>.</p>"},{"location":"config/operations/#metadata-backup","title":"Metadata Backup","text":"<p>Creates/Maintains a Plex Meta Manager Metadata File with a full <code>metadata</code> mapping based on the library's items locked attributes.</p> <p>If you point to an existing Metadata File then PMM will Sync the changes to the file, so you won't lose non plex changes in the file.</p> <p>Attribute: <code>metadata_backup</code></p> <p>Values: There are a few different options to determine how the <code>metadata_backup</code> works.</p> Attribute Description <code>path</code> Path to where the metadata will be saved/maintainedDefault: &lt;&gt;_Metadata_Backup.yml in your config folderValues: Path to Metadata File <code>exclude</code> Exclude all listed attributes from being saved in the metadata fileValues: Comma-separated string or list of attributes <code>sync_tags</code> All Tag Attributes will have the <code>.sync</code> option and blank attribute will be added to sync to as wellDefault: <code>false</code>Values: <code>true</code> or <code>false</code> <code>add_blank_entries</code> Will add a line for entries that have no metadata changesDefault: <code>true</code>Values: <code>true</code> or <code>false</code> <p>Example:</p> <pre><code>library:\nMovies:\noperations:\nmetadata_backup:\npath: config/Movie_Backup.yml\nsync_tags: true\nadd_blank_entries: false\n</code></pre>"},{"location":"config/paths/","title":"Path Types","text":"<p>YAML Files are defined by their path type and path location for the <code>metadata_path</code>,  <code>overlay_path</code>, <code>playlist_files</code>, and <code>external_templates</code> attributes.</p> <p>They can either be on the local system, online at an url, directly from the Plex Meta Manager Configs repository, or from another <code>Custom Repository</code>.</p> <p>The path types are outlined as follows:</p> <ul> <li><code>- file:</code> refers to a metadata file which is located within the system that PMM is being run from.</li> <li><code>- folder:</code> refers to a directory containing metadata files which is located within the system that PMM is being run from.</li> <li><code>- pmm:</code> refers to a PMM Defaults builders/overlay/playlist file. </li> <li><code>- url:</code> refers to a metadata file which is hosted publicly on the internet. </li> <li><code>- git:</code> refers to a metadata file which is hosted on the Configs Repo.</li> <li><code>- repo:</code> refers to a metadata file which is hosted on a custom repository specified aby the user with the <code>custom_repo</code> Setting Attribute.</li> </ul>"},{"location":"config/paths/#yaml-controls","title":"YAML Controls","text":"<p>You can have some control of yaml files from inside your Configuration file by using YAML Controls.</p>"},{"location":"config/paths/#template-variables","title":"Template Variables","text":"<p>You can define Template Variables that will be added to every template in the associated YAML file by adding the <code>template_variables</code> attribute to the dictionary defining the file.</p>"},{"location":"config/paths/#example","title":"Example","text":"<pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: genre\ntemplate_variables:\nschedule_separator: never\ncollection_mode: hide\n- pmm: actor                  # Notice how the `-` starts this \"section\"\ntemplate_variables:\nschedule_separator: never\ncollection_mode: hide\n</code></pre> <p>In this example there will be two template variables added to every template in the git file pmm: genre.  </p> <p><code>schedule_separator</code> is set to <code>never</code> to not show a separator in this section and <code>collection_mode</code> is set to <code>hide</code>.</p> <p>What these variables will do depends on how they're defined in the Metadata File. </p>"},{"location":"config/paths/#schedule","title":"Schedule","text":"<p>Each <code>metadata_path</code>,  <code>overlay_path</code>, or <code>playlist_files</code> can be scheduled by adding the <code>schedule</code> attribute to the dictionary defining the file.</p> <p>Below is an example of a scheduled Metadata File and Playlist File:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\nschedule: weekly(friday)\n- pmm: actors\nschedule: weekly(saturday)\nplaylist_files:\n- file: config/Playlists.yml\nschedule: weekly(sunday)\n</code></pre>"},{"location":"config/paths/#asset-directory","title":"Asset Directory","text":"<p>You can define custom Asset Directories per file by adding <code>asset_directory</code> to the file call.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\nasset_directory: assets/Movies\n- pmm: actors\nasset_directory: assets/people\noverlay_path:\n- pmm: imdb\nplaylist_files:\n- file: config/Playlists.yml\nasset_directory:\n- assets/playlists1\n- assets/playlists2\n</code></pre>"},{"location":"config/paths/#metadata-path","title":"Metadata Path","text":"<p>The <code>metadata_path</code> attribute is defined under the <code>libraries</code> attribute in your Configuration File. </p> Example <p>In this example, multiple metadata file path types are defined for the <code>\"TV Shows\"</code> library:</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- file: config/TVShows.yml\n- folder: config/TV Shows/\n- pmm: tmdb\n- repo: charts\n- url: https://somewhere.com/PopularTV.yml\n</code></pre> <p>Within the above example, PMM will:</p> <ul> <li> <p>First, look within the root of the PMM directory (also known as <code>config/</code>) for a metadata file named <code>TVShows.yml</code>. If this file does not exist, PMM will skip the entry and move to the next one in the list.</p> </li> <li> <p>Then, look within the root of the PMM directory (also known as <code>config/</code>) for a directory called <code>TV Shows</code>, and then load any metadata files within that directory.</p> </li> <li> <p>Then, look at the PMM folder within the GitHub PMM Repo for a file called <code>tmdb.yml</code> which it finds here.</p> </li> <li> <p>Then, look at the within the Custom Defined Repo for a file called <code>charts.yml</code>.</p> </li> <li> <p>Finally, load the metadata file located at <code>https://somewhere.com/PopularTV.yml</code></p> </li> </ul>"},{"location":"config/paths/#overlay-path","title":"Overlay Path","text":"<p>The <code>overlay_path</code> attribute is defined under the <code>libraries</code> attribute in your Configuration File. </p> Example <p>In this example, multiple overlay file path types are defined for the <code>\"TV Shows\"</code> library:</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- file: config/overlays.yml\n- folder: config/overlay configs/\n- pmm: imdb\n- repo: overlays\n- url: https://somewhere.com/Overlays.yml\n</code></pre> <p>Within the above example, PMM will:</p> <ul> <li> <p>First, look within the root of the PMM directory (also known as <code>config/</code>) for a metadata file named <code>overlays.yml</code>. If this file does not exist, PMM will skip the entry and move to the next one in the list.</p> </li> <li> <p>Then, look within the root of the PMM directory (also known as <code>config/</code>) for a directory called <code>overlay configs</code>, and then load any metadata files within that directory.</p> </li> <li> <p>Then, look at the PMM folder within the GitHub PMM Repo for a file called <code>imdb.yml</code>.</p> </li> <li> <p>Then, look at the within the Custom Defined Repo for a file called <code>overlays.yml</code>.</p> </li> <li> <p>Finally, load the metadata file located at <code>https://somewhere.com/Overlays.yml</code></p> </li> </ul>"},{"location":"config/paths/#playlist-files","title":"Playlist Files","text":"<p>The <code>playlist_files</code> at the top level in your Configuration File. </p> Example <p>In this example, multiple <code>playlist_files</code> attribute path types are defined:</p> <pre><code>playlist_files:\n- file: config/playlists.yml\n- folder: config/Playlists/\n- pmm: playlist\n- repo: playlists\n- url: https://somewhere.com/Playlists.yml\n</code></pre> <p>Within the above example, PMM will:</p> <ul> <li> <p>First, look within the root of the PMM directory (also known as <code>config/</code>) for a playlist file named <code>Playlists.yml</code>. If this file does not exist, PMM will skip the entry and move to the next one in the list.</p> </li> <li> <p>Then, look within the root of the PMM directory (also known as <code>config/</code>) for a directory called <code>Playlists</code>, and then load any playlist files within that directory.</p> </li> <li> <p>Then, look at the PMM folder within the GitHub PMM Repo for a file called <code>playlist.yml</code> which it finds here.</p> </li> <li> <p>Then, look at the within the Custom Defined Repo for a file called <code>playlists.yml</code>.</p> </li> <li> <p>Finally, load the playlist file located at <code>https://somewhere.com/Playlists.yml</code></p> </li> </ul>"},{"location":"config/paths/#external-templates","title":"External Templates","text":"<p>The <code>external_templates</code> attribute is defined at the top level in your Metadata File. </p> Example <p>In this example, multiple external template file path types are defined:</p> <pre><code>external_templates:\n- file: config/templates.yml\n- folder: config/templates/\n- url: https://somewhere.com/templates.yml\n- pmm: templates\n- repo: templates\n</code></pre> <p>Within the above example, PMM will:</p> <ul> <li> <p>First, look within the root of the PMM directory (also known as <code>config/</code>) for a metadata file named <code>templates.yml</code>. If this file does not exist, PMM will skip the entry and move to the next one in the list.</p> </li> <li> <p>Then, look within the root of the PMM directory (also known as <code>config/</code>) for a directory called <code>templates</code>, and then load any metadata files within that directory.</p> </li> <li> <p>Then, load the metadata file located at <code>https://somewhere.com/templates.yml</code>.</p> </li> <li> <p>Then, look at the PMM folder within the GitHub PMM Repo for a file called <code>templates.yml</code> which it finds here.</p> </li> <li> <p>Finally, look at the within the Custom Defined Repo for a file called <code>templates.yml</code>.</p> </li> </ul>"},{"location":"config/playlists/","title":"Playlist Files Attributes","text":"<p>As playlists are not tied to one specific library and can combine media from multiple libraries, they require their own special Playlist Files to work.</p> <p>Within the Config File, the <code>playlist_files</code> attribute specifies the path type and path of the Playlist Files that the user wants Plex Meta Manager to act on.</p> <p>The libraries used in the playlist attribute <code>libraries</code> must be defined under the <code>libraries</code> attribute of the Config File.</p> <pre><code>playlist_files:\n- file: config/playlists.yml\n- pmm: playlist\n</code></pre>"},{"location":"config/playlists/#example","title":"Example","text":"<p>This example is an advanced version of the playlist mappings with accompanying library mappings:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\n- pmm: imdb\n- pmm: studio\n- pmm: genre\n- pmm: actor\noperations:\nmass_critic_rating_update: tmdb\nsplit_duplicates: true\nTV Shows:\nmetadata_path:\n- file: config/TV Shows.yml\n- pmm: tmdb\n- pmm: network\noverlay_path:\n- remove_overlays: false\n- file: config/Overlays.yml\nplaylist_files:\n- file: config/playlists.yml\n- pmm: playlist\n</code></pre>"},{"location":"config/plex/","title":"Plex Attributes","text":"<p>Configuring Plex is required in order to connect to your libraries.</p> <p>A <code>plex</code> mapping can be either in the root of the config file as global mapping for all libraries, or you can specify the <code>plex</code> mapping individually per library.</p> <p>Below is a <code>plex</code> mapping example and the full set of attributes: <pre><code>plex:\nurl: http://192.168.1.12:32400\ntoken: ####################\ntimeout: 60\nclean_bundles: true\nempty_trash: true\noptimize: false\n</code></pre></p> Attribute Allowed Values Default Required <code>url</code> Plex Server URLExample: http://192.168.1.12:32400 N/A \u2705 <code>token</code> Plex Server Authentication Token N/A \u2705 <code>timeout</code> Plex Server Timeout 60 \u274c <code>clean_bundles</code> Runs Clean Bundles on the Server after all Metadata Files are run false \u274c <code>empty_trash</code> Runs Empty Trash on the Server after all Metadata Files are run false \u274c <code>optimize</code> Runs Optimize on the Server after all Metadata Files are run false \u274c <ul> <li> <p>Do Not Use the Plex Token found in Plex's Preferences.xml file</p> </li> <li> <p>This script can be run on a remote Plex server, but be sure that the <code>url</code> provided is publicly addressable, and it's recommended to use <code>HTTPS</code>.</p> </li> <li> <p>If you need help finding your Plex authentication token, please see Plex's support article.</p> </li> </ul>"},{"location":"config/plex/#multi-plex-instance-setup","title":"Multi-Plex Instance Setup:","text":"<p>The below config.yml extract details how to set up multiple Plex servers within the one PMM instance, in this example there are two plex servers which are receiving the same Metadata File:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\nMovies_on_Second_Plex:\nlibrary_name: Movies\nmetadata_path:\n- file: config/Movies.yml\nplex:\nurl: http://plex.boing.bong\ntoken: SOME_TOKEN\ntimeout: 360\n...\nplex:\nurl: http://plex.bing.bang\ntoken: SOME_TOKEN\ntimeout: 60\nclean_bundles: false\nempty_trash: false\noptimize: false\n...\n</code></pre> <p>The <code>plex</code> instance at the bottom is the \"global\" plex server.  unless otherwise specified, any connection to plex is assumed to to using that plex server. The first \"Movies\" library entry is on the global <code>plex</code> server.</p> <p>The \"Movies_on_Second_Plex\" library is found on the second plex server. Note that this library has its own plex section that lists the attributes that differ from the global plex instance, namely the <code>URL</code>, <code>token</code> and <code>timeout</code>.  The library on the second server is also called \"Movies\", but since you can't have two keys (in this scenario, libraries) with the same name, it is named Movies_on_Second_Plex in the config.yml, and the <code>library_name:</code> attribute contains the name of the library on the actual plex server.</p>"},{"location":"config/radarr/","title":"Radarr Attributes","text":"<p>Configuring Radarr is optional but will allow you to send movies to a Radarr instance when they're found missing while updating a library's collections.</p> <p>Radarr V2 may work, but it is not supported please upgrade to V3 if you can.</p> <p>Items in your List Exclusions will be ignored by PMM.</p> <p>A <code>radarr</code> mapping can be either in the root of the config file as global mapping for all libraries, or you can specify the <code>radarr</code> mapping individually per library.</p> <p>At the library level, only those settings which are different to the global settings need to be specified; there is an example of this at the end of the page.</p> <p>Below is a <code>radarr</code> mapping example and the full set of attributes: <pre><code>radarr:\nurl: http://192.168.1.12:32788\ntoken: ################################\nadd_missing: false\nadd_existing: false\nupgrade_existing: false\nroot_folder_path: S:/Movies\nmonitor: movie\navailability: announced\nquality_profile: HD-1080p\ntag: pmm\nsearch: false\nradarr_path: /media\nplex_path: /share/CACHEDEV1_DATA/Multimedia\n</code></pre></p> Attribute Allowed Values Default Required <code>url</code> Radarr URL (Including URL Base if set).Example: http://192.168.1.12:32788 N/A \u2705 <code>token</code> Radarr API Token. N/A \u2705 <code>add_missing</code> Adds all missing movies found from all collections to Radarr.Use the <code>radarr_add_missing</code> Radarr Details in the collection definition to add missing per collection.boolean: true or false false \u274c <code>add_existing</code> Adds all existing movies in collections to Radarr.Use the <code>radarr_add_existing</code> Radarr Details in the collection definition to add existing per collection.boolean: true or false false \u274c <code>upgrade_existing</code> Upgrades all existing movies in collections to match the Quality Profile of the collection.Use the <code>radarr_upgrade_existing</code> Radarr Details in the collection definition to upgrade the Quality Profile per collection.boolean: true or false false \u274c <code>ignore_cache</code> Ignores PMM's cache when adding items to Radarr.Use the <code>radarr_ignore_cache</code> Radarr Details in the collection definition to ignore per collection.boolean: true or false false \u274c <code>root_folder_path</code> Default Root Folder Path to use when adding new movies.Use the <code>radarr_folder</code> Radarr Details in the collection definition to set the Root Folder per collection. N/A \u2705 <code>monitor</code> Monitor the movie when adding new movies.Use the <code>radarr_monitor</code> Radarr Details in the collection definition to set the Monitor value per collection.Options: <code>movie</code>, <code>collection</code>, <code>none</code> true \u274c <code>availability</code> Default Minimum Availability to use when adding new movies.Use the <code>radarr_availability</code> Radarr Details in the collection definition to set the Availability per collection.Options: <code>announced</code>, <code>cinemas</code>, <code>released</code>, <code>db</code> <code>announced</code> \u2705 <code>quality_profile</code> Default Quality Profile to use when adding new movies.Use the <code>radarr_quality</code> Radarr Details in the collection definition to set the Quality Profile per collection. N/A \u274c <code>tag</code> Default list or comma-separated string of tags to use when adding new movies.Use the <code>radarr_tag</code> Radarr Details in the collection definition to set the Tags per collection. <code></code> \u274c <code>search</code> Start search for missing movie when adding new movies.Use the <code>radarr_search</code> Radarr Details in the collection definition to set the search value per collection.boolean: true or false false \u274c <code>plex_path</code> When using <code>add_existing</code> or <code>radarr_add_all</code> Convert this part of the path to <code>radarr_path</code>. <code></code> \u274c <code>radarr_path</code> When using <code>add_existing</code> or <code>radarr_add_all</code> Convert the <code>plex_path</code> part of the path to this. <code></code> \u274c <ul> <li> <p>The <code>token</code> can be found by going to <code>Radarr &gt; Settings &gt; General &gt; Security &gt; API Key</code></p> </li> <li> <p>The <code>quality_profile</code> must be the exact name of the desired quality profile, including all spaces and capitalization.</p> </li> <li> <p>You can set most attributes per collection by using the Radarr Details in the collection definition.</p> </li> </ul> <p></p>"},{"location":"config/radarr/#other-examples","title":"Other examples:","text":"<p>Specifying different options for specific libraries:</p> <p>In this example we have two Radarr instances, standard and 4K, and four libraries showing how one can override individual settings at the library level.  Also, movies are being added to the \"Library05\" library outside Radarr via a custom script and I want those new movies added to Radarr for tracking.</p> <pre><code>libraries:\nLibrary01:     # this library uses the default radarr config\nmetadata_path:\n- file: config/Movies.yml\n\nLibrary02:     # this library overrides radarr root path and profile\nmetadata_path:\n- file: config/Movies.yml\nradarr:\nroot_folder_path: /data/media/movies/tony\nquality_profile: Better\n\nLibrary03:      # this library overrides radarr quality profile\nmetadata_path:\n- file: config/Movies.yml\nradarr:\nquality_profile: Best\n\nLibrary04:      # this library uses the 4K radarr instance\nmetadata_path:\n- file: config/Movies.yml\nradarr:\nurl: https://radarr-4k.bing.bang\ntoken: SOME_OTHER_TOKEN\nroot_folder_path: /data/media/movies/geezer\nquality_profile: Bestest\n\nLibrary05:      # movies get added by a custom script so they should get added to radarr-4k\nmetadata_path:\n- file: config/Movies.yml\nradarr:\nurl: https://radarr-4k.bing.bang\ntoken: SOME_OTHER_TOKEN\nroot_folder_path: /data/media/movies/bill\nquality_profile: Bestest\nadd_existing: true\nsonarr_path: /data/media/movies/bill\nplex_path: /mnt/unionfs/movies/bill\n...\nradarr:\nurl: https://radarr.bing.bang\ntoken: SOME_TOKEN\nquality_profile: Good\nadd_missing: true\nadd_existing: false\nupgrade_existing: false\nroot_folder_path: /movies\nmonitor: movie\navailability: released\ntag:\nsearch: false\nradarr_path:\nplex_path:\n...\n</code></pre>"},{"location":"config/settings/","title":"Settings","text":""},{"location":"config/settings/#overview","title":"Overview","text":"<p>The <code>settings:</code> attribute and subsequent settings can be used to command various aspects of the functionality of Plex Meta Manager.</p> <p>Examples of these settings include the ability to: * Cache each Plex GUID and IDs to increase performance * Create asset folders for collections so that custom posters can be stored for upload. * Use a custom repository as the base for all <code>git</code> Metadata files.</p> <p>The settings attribute and attributes can be specified individually per library, or can be inherited from the global value if it has been set. If an attribute is specified at both the library and global level, then the library level attribute will take priority.</p> <p>There are some attributes which can be specified at the collection level using Setting Details.</p> <p>Attributes set at the collection level will take priority over any library or global-level attribute.</p>"},{"location":"config/settings/#attributes","title":"Attributes","text":"<p>The available setting attributes which can be set at each level are outlined below:</p> Attribute Global Level Library Level Collection/Playlist Level <code>cache</code> \u2705 \u274c \u274c <code>cache_expiration</code> \u2705 \u274c \u274c <code>asset_directory</code> \u2705 \u2705 \u274c <code>asset_folders</code> \u2705 \u2705 \u274c <code>asset_depth</code> \u2705 \u2705 \u274c <code>create_asset_folders</code> \u2705 \u2705 \u274c <code>prioritize_assets</code> \u2705 \u2705 \u274c <code>dimensional_asset_rename</code> \u2705 \u2705 \u274c <code>download_url_assets</code> \u2705 \u2705 \u274c <code>show_missing_season_assets</code> \u2705 \u2705 \u274c <code>show_missing_episode_assets</code> \u2705 \u2705 \u274c <code>show_asset_not_needed</code> \u2705 \u2705 \u274c <code>sync_mode</code> \u2705 \u2705 \u2705 <code>default_collection_order</code> \u2705 \u2705 \u274c <code>minimum_items</code> \u2705 \u2705 \u2705 <code>delete_below_minimum</code> \u2705 \u2705 \u2705 <code>delete_not_scheduled</code> \u2705 \u2705 \u2705 <code>run_again_delay</code> \u2705 \u274c \u274c <code>missing_only_released</code> \u2705 \u2705 \u2705 <code>show_unmanaged</code> \u2705 \u2705 \u274c <code>show_unconfigured</code> \u2705 \u2705 \u274c <code>show_filtered</code> \u2705 \u2705 \u2705 <code>show_options</code> \u2705 \u2705 \u2705 <code>show_missing</code> \u2705 \u2705 \u2705 <code>only_filter_missing</code> \u2705 \u2705 \u2705 <code>show_missing_assets</code> \u2705 \u2705 \u2705 <code>save_report</code> \u2705 \u2705 \u2705 <code>tvdb_language</code> \u2705 \u274c \u274c <code>ignore_ids</code> \u2705 \u2705 \u2705 <code>ignore_imdb_ids</code> \u2705 \u2705 \u2705 <code>item_refresh_delay</code> \u2705 \u2705 \u2705 <code>playlist_sync_to_users</code> \u2705 \u274c \u2705 <code>playlist_exclude_users</code> \u2705 \u274c \u2705 <code>playlist_report</code> \u2705 \u274c \u274c <code>custom_repo</code> \u2705 \u274c \u274c <code>verify_ssl</code> \u2705 \u274c \u274c <code>check_nightly</code> \u2705 \u274c \u274c"},{"location":"config/settings/#cache","title":"Cache","text":"<p>Cache the Plex GUID and associated IDs for each library item for faster subsequent processing. The cache file is created in the same directory as the configuration file.</p> Default Value <code>true</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#cache-expiration","title":"Cache Expiration","text":"<p>Set the number of days before each cache mapping expires and has to be re-cached.</p> Default Value <code>60</code> Allowed Values any integer"},{"location":"config/settings/#image-asset-directory","title":"Image Asset Directory","text":"<p>Specify the directory where assets (posters, backgrounds, etc) are located.</p> Default Value <code>[Directory containing YAML config]/assets</code> Allowed Values any directory"},{"location":"config/settings/#image-asset-folders","title":"Image Asset Folders","text":"<p>Search the <code>asset_directory</code> for a dedicated folder. Set to true if each poster is within its own directory. i.e. <code>assets/Star Wars/poster.png</code> instead of <code>assets/Star Wars.png</code></p> Default Value <code>true</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#asset-depth","title":"Asset Depth","text":"<p>Specify how many folder levels to scan for an item within the asset directory At each asset level, PMM will look for either <code>medianame.ext</code> [such as Star Wars.png] or a dedicated folder containing <code>poster.ext</code> i.e. <code>assets/Star Wars/poster.png</code> and <code>assets/Star Wars.png</code> are both asset depth 0 and <code>assets/Movies/Star Wars/poster.png</code> and <code>assets/Movies/Star Wars.png</code> are both asset level 1 * <code>asset_folders</code> must be set to <code>true</code> for this to take effect. * increasing the amount of levels to scan will reduce performance</p> Default Value <code>0</code> Allowed Values any integer"},{"location":"config/settings/#create-asset-folders","title":"Create Asset Folders","text":"<p>Whilst searching for assets, if an asset folder cannot be found within the <code>asset_directory</code> one will be created.</p> <p>Asset Searches can happen in a number of ways. * Any Collection specified under the <code>collections</code> header in a Metadata File. * Any Item specified under the <code>metadata</code> header in a Metadata File. * Any Playlist specified under the <code>playlists</code> header in a Playlist File. * Any Item in a library that is running the <code>assets_for_all</code> Library Operation. * Any Item that has an Overlay applied to it. * Any Item found by a Builder while the definition also has <code>item_assets: true</code> specified. </p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#prioritize-assets","title":"Prioritize Assets","text":"<p>When determining which image to use on an item prioritize the <code>asset_directory</code> over all other images types.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#dimensional-asset-rename","title":"Dimensional Asset Rename","text":"<p>Whilst searching for assets, scan the folders within the <code>asset_directory</code> and if an asset poster (i.e. <code>/ASSET_NAME/poster.ext</code>) was not found, rename the first image found that has a height greater than or equal to its width to <code>poster.ext</code>. If an asset background (i.e. <code>/ASSET_NAME/background.ext</code>), rename the first image found that has a width greater than its height to <code>background.ext</code>. * <code>asset_folders</code> must be set to <code>true</code> for this to take effect.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#download-url-assets","title":"Download URL Assets","text":"<p>Whilst searching for assets, download images set within Metadata/Playlist files( i.e. images set by <code>url_poster</code> or <code>url_background</code>) into the asset folder if none are already present.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-missing-season-assets","title":"Show Missing Season Assets","text":"<p>Whilst searching for assets, when scanning for assets for a TV Show, if Season posters are found (i.e. <code>/ASSET_NAME/Season##.ext</code>), notify the user of any seasons which do not have an asset image.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-missing-episode-assets","title":"Show Missing Episode Assets","text":"<p>Whilst searching for assets, when scanning for assets for a TV Show, if an Episode Title Card is found (i.e. <code>/ASSET_NAME/S##E##.ext</code>), notify the user of any episodes which do not have an asset image.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-asset-not-needed","title":"Show Asset Not Needed","text":"<p>Whilst searching for assets, show or hide the <code>update not needed</code> messages.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#sync-mode","title":"Sync Mode","text":"<p>Set the default <code>sync_mode</code> for collections. * <code>sync</code> will add and remove any items that are added/removed from the source builder * <code>append</code> will only add items that are added from the source builder, but will not remove anything even if it is removed from the source builder.</p> Default Value <code>append</code> Allowed Values <code>append</code> or <code>sync</code>"},{"location":"config/settings/#default-collection-order","title":"Default Collection Order","text":"<p>Set the default <code>collection_order</code> for every collection run by PMM. * <code>custom</code> cannot be used if more than one builder is being used for the collection (such as <code>imdb_list</code> and <code>trakt_list</code> within the same collection)</p> Default Value <code>None</code> Allowed Values <code>release</code>: Order Collection by Release Dates <code>alpha</code>: Order Collection Alphabetically <code>custom</code>: Order Collection Via the Builder Order     Any <code>plex_search</code> sort option1 <p>1 <code>plex_search</code> sort options can be found here</p>"},{"location":"config/settings/#minimum-items","title":"Minimum Items","text":"<p>Set the minimum number of items that must be found in order to build or update a collection/playlist.</p> Default Value <code>1</code> Allowed Values any integer"},{"location":"config/settings/#delete-below-minimum","title":"Delete Below Minimum","text":"<p>When a collection is run, delete the collection if it is below the minimum number specified by <code>minimum_items</code>. * Relies on <code>minimum_items</code> being set to the desired integer.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#delete-not-scheduled","title":"Delete Not Scheduled","text":"<p>If a collection is skipped due to it not being scheduled, delete the collection.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#run-again-delay","title":"Run Again Delay","text":"<p>Set the number of minutes to delay running <code>run_again</code> collections after daily run is finished. For example, if a collection adds items to Sonarr/Radarr, the library can automatically re-run \"X\" amount of time later so that any downloaded items are processed. * A collection is a <code>run_again</code> collection if it has the <code>run_again</code> Setting Detail attribute set to true.</p> Default Value <code>1</code> Allowed Values any integer"},{"location":"config/settings/#missing-only-released","title":"Missing Only Released","text":"<p>Whilst running a collection, all unreleased missing items will be filtered out from the missing YAML file</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-unmanaged-collections","title":"Show Unmanaged Collections","text":"<p>List all collections not managed by Plex Meta Manager at the end of each run.</p> Default Value <code>true</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-filtered","title":"Show Filtered","text":"<p>List all items which have been filtered out of a collection (i.e. if it doesn't meet the filter criteria)</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-options","title":"Show Options","text":"<p>While <code>show_options</code> is true the available options for an attribute when using <code>plex_search</code>, <code>smart_filter</code> or <code>filters</code> will be shown. i.e. a <code>smart_filter</code> on the <code>genre</code> attribute will return all of the attributes within the specified library.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-missing","title":"Show Missing","text":"<p>While <code>show_missing</code> is true items missing from collections will be displayed.</p> Default Value <code>true</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#only-filter-missing","title":"Only Filter Missing","text":"<p>Only items missing from a collection will be filtered. Only specific filters can filter missing. See Filters for more information.  * this can be used to filter which missing media items get sent to Sonarr/Radarr</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#show-missing-assets","title":"Show Missing Assets","text":"<p>Display missing asset warnings</p> Default Value <code>true</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#save-report","title":"Save Report","text":"<p>Save a report of the items added, removed, filtered, or missing from collections to a YAML file in the same directory as your Metadata file.</p> Default Value <code>true</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#tvdb-language","title":"TVDb Language","text":"<p>Specify the language to query TVDb in. * If no language is specified or the specified language is not found then the original language is used.</p> Default Value <code>None</code> Allowed Values Any ISO 639-2 Language Code1 <p>1 Language Codes can be found here</p>"},{"location":"config/settings/#ignore-ids","title":"Ignore IDs","text":"<p>Set a list or comma-separated string of TMDb/TVDb IDs to ignore in all collections. * this does not apply to <code>smart_filter</code> Collections</p> Default Value <code>None</code> Allowed Values List or comma-separated string of TMDb/TVDb IDs"},{"location":"config/settings/#ignore-imdb-ids","title":"Ignore IMDb IDs","text":"<p>Set a list or comma-separated string of IMDb IDs to ignore in all collections. * this does not apply to <code>smart_filter</code> Collections</p> Default Value <code>None</code> Allowed Values List or comma-separated string of IMDb IDs"},{"location":"config/settings/#item-refresh-delay","title":"Item Refresh Delay","text":"<p>Specify the amount of time to wait between each <code>item_refresh</code> of every movie/show in a collection/playlist. * Useful if your Plex Media Server is having issues with high request levels.</p> Default Value <code>0</code> Allowed Values any integer"},{"location":"config/settings/#playlist-sync-to-users","title":"Playlist Sync to Users","text":"<p>Set the default playlist <code>sync_to_users</code>. To Sync a playlist to only yourself leave <code>playlist_sync_to_users</code> blank. * sharing playlists with other users will not share any posters associated with the playlist, this is a Plex limitation.</p> Default Value <code>all</code> Allowed Values <code>all</code>, list of users, or comma-separated string of users"},{"location":"config/settings/#playlist-exclude-users","title":"Playlist Exclude Users","text":"<p>Set the default playlist <code>exclude_users</code>.</p> Default Value <code> </code> Allowed Values list of users or comma-separated string of users"},{"location":"config/settings/#playlist-report","title":"Playlist Report","text":"<p>Set <code>playlist_report</code> to true to print out a playlist report at the end of the log.</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#custom-repo","title":"Custom Repo","text":"<p>Specify where the <code>repo</code> attribute's base is when defining <code>metadata_path</code>, <code>playlist_file</code> and <code>overlay_path</code>. * Ensure you are using the raw GitHub link (i.e. https://github.com/meisnate12/Plex-Meta-Manager-Configs/tree/master/meisnate12 )</p> Default Value <code>None</code> Allowed Values link to base repository"},{"location":"config/settings/#verify-ssl","title":"Verify SSL","text":"<p>Turn SSL Verification on or off. * set to false if your log file shows any errors similar to \"SSL: CERTIFICATE_VERIFY_FAILED\"</p> Default Value <code>true</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/settings/#check-nightly","title":"Check Nightly","text":"<p>Will check nightly for updates instead of develop.  * This does not affect which version of PMM is grabbed when using <code>git pull</code> or any other update mechanism, it is only used for the initial version check when PMM runs to specify if a new version is available. * It is recommended to set this to <code>true</code> if you primarily use the <code>nightly</code> branch</p> Default Value <code>false</code> Allowed Values <code>true</code> or <code>false</code>"},{"location":"config/sonarr/","title":"Sonarr Attributes","text":"<p>Configuring Sonarr is optional but will allow you to send shows to a Sonarr instance when they're found missing while updating a library's collections.</p> <p>Sonarr V2 may work, but it is not supported please upgrade to V3 if you can.</p> <p>Items in your List Exclusions will be ignored by PMM.</p> <p>A <code>sonarr</code> mapping can be either in the root of the config file as global mapping for all libraries, or you can specify the <code>sonarr</code> mapping individually per library.</p> <p>At the library level, only those settings which are different to the global settings need to be specified; there is an example of this at the end of the page.</p> <p>Below is a <code>sonarr</code> mapping example and the full set of attributes: <pre><code>sonarr:\nurl: http://192.168.1.12:32789\ntoken: ################################\nadd_missing: false\nadd_existing: false\nroot_folder_path: S:/Shows\nmonitor: all\nquality_profile: HD-1080p\nlanguage_profile: English\nseries_type: standard\nseason_folder: true\ntag: pmm\nsearch: false\ncutoff_search: false\nsonarr_path: /media\nplex_path: /share/CACHEDEV1_DATA/Multimedia\n</code></pre></p> Attribute Allowed Values Default Required <code>url</code> Sonarr URL (Including URL Base if set).Example: http://192.168.1.12:32788 N/A \u2705 <code>token</code> Sonarr API Token. N/A \u2705 <code>add_missing</code> Adds all missing shows found from all collections to Sonarr.Use the <code>sonarr_add_missing</code> Sonarr Details in the collection definition to add missing per collection.boolean: true or false false \u274c <code>add_existing</code> Adds all existing shows in collections to Sonarr.Use the <code>sonarr_add_existing</code> Sonarr Details in the collection definition to add existing per collection.boolean: true or false false \u274c <code>upgrade_existing</code> Upgrades all existing shows in collections to match the Quality Profile of the collection.Use the <code>sonarr_upgrade_existing</code> Sonarr Details in the collection definition to upgrade the Quality Profile per collection.boolean: true or false false \u274c <code>ignore_cache</code> Ignores PMM's cache when adding items to Sonarr.Use the <code>sonarr_ignore_cache</code> Sonarr Details in the collection definition to ignore per collection.boolean: true or false false \u274c <code>root_folder_path</code> Default Root Folder Path to use when adding new shows.Use the <code>sonarr_folder</code> Sonarr Details in the collection definition to set the Root Folder per collection. N/A \u2705 <code>monitor</code> Default Monitor to use when adding new shows.Use the <code>sonarr_monitor</code> Sonarr Details in the collection definition to set the Monitor value per collection.Values: <code>all</code>All episodes except specials<code>future</code>Episodes that have not aired yet<code>missing</code>Episodes that do not have files or have not aired yet<code>existing</code>Episodes that have files or have not aired yet<code>pilot</code>The first episode, all others will be ignored<code>first</code>All episodes of the first season, all others will be ignored<code>latest</code>All episodes of the latest season and future seasons<code>none</code>No episodes <code>all</code> \u274c <code>quality_profile</code> Default Quality Profile to use when adding new shows.Use the <code>sonarr_quality</code> Sonarr Details in the collection definition to set the Quality Profile per collection. N/A \u2705 <code>language_profile</code> Default Language Profile to use when adding new shows.Use the <code>sonarr_language</code> Sonarr Details in the collection definition to set the Language Profile per collection. First Profile \u274c <code>series_type</code> Default Series Type to use when adding new shows.Use the <code>sonarr_series</code> Sonarr Details in the collection definition to set the Series Type per collection.Values: <code>standard</code>Episodes released with SxxEyy pattern<code>daily</code>Episodes released daily that use year-month-day pattern (2017-05-25)<code>anime</code>Episodes released using an absolute episode number<code>standard</code>: Episodes released with SxxEyy pattern<code>daily</code>: Episodes released daily or less frequently that use year-month-day (2017-05-25)<code>anime</code>: Episodes released using an absolute episode number <code>standard</code> \u274c <code>season_folder</code> Use the Season Folder Option when adding new shows.Use the <code>sonarr_season</code> Sonarr Details in the collection definition to set the season folder value per collection. boolean: true or false true \u274c <code>tag</code> Default list or comma-separated string of tags to use when adding new shows.Use the <code>sonarr_tag</code> Sonarr Details in the collection definition to set the tags per collection. <code></code> \u274c <code>search</code> Start search for missing episodes when adding new shows.Use the <code>sonarr_search</code> Sonarr Details in the collection definition to set the search value per collection.boolean: true or false false \u274c <code>cutoff_search</code> Start search for cutoff unmet episodes when adding new shows.Use the <code>sonarr_cutoff_search</code> Sonarr Details in the collection definition to set the cutoff search value per collection.boolean: true or false false \u274c <code>plex_path</code> When using <code>add_existing</code> or <code>sonarr_add_all</code> Convert this part of the path to <code>sonarr_path</code>. <code></code> \u274c <code>sonarr_path</code> When using <code>add_existing</code> or <code>sonarr_add_all</code> Convert the <code>plex_path</code> part of the path to this. <code></code> \u274c <ul> <li> <p>The <code>token</code> can be found by going to <code>Sonarr &gt; Settings &gt; General &gt; Security &gt; API Key</code></p> </li> <li> <p>The <code>quality_profile</code> and <code>language_profile</code> must be the exact name of the desired quality profile, including all spaces and capitalization.</p> </li> <li> <p>You can set most attributes per collection by using the Sonarr Details in the collection definition.</p> </li> </ul> <p></p>"},{"location":"config/sonarr/#other-examples","title":"Other examples:","text":"<p>Specifying a second Sonarr instance for a specific library:</p> <p>In this example we have two Sonarr instances, standard and 4K, with five libraries that override various details.  Also, shows are being added to the \"Library05\" library outside Sonarr via a custom script and I want those new shows added to Sonarr for tracking.</p> <pre><code>libraries:\nLibrary01:     # this library uses the default sonarr config\nmetadata_path:\n- file: config/TV.yml\n\nLibrary02:     # this library overrides sonarr root path and profile\nmetadata_path:\n- file: config/TV.yml\nsonarr:\nroot_folder_path: /data/media/shows/tony\nquality_profile: Better\n\nLibrary03:      # this library overrides sonarr quality profile\nmetadata_path:\n- file: config/TV.yml\nsonarr:\nquality_profile: Best\n\nLibrary04:      # this library uses the 4K sonarr instance\nmetadata_path:\n- file: config/TV.yml\nsonarr:\nurl: https://sonarr-4k.bing.bang\ntoken: SOME_OTHER_TOKEN\nroot_folder_path: /data/media/shows/geezer\nquality_profile: Bestest\n\nLibrary05:      # shows get added by a custom script so they should get added to sonarr-4k\nmetadata_path:\n- file: config/TV.yml\nsonarr:\nurl: https://sonarr-4k.bing.bang\ntoken: SOME_OTHER_TOKEN\nroot_folder_path: /data/media/shows/bill\nquality_profile: Bestest\nadd_existing: true\nsonarr_path: /data/media/shows/bill\nplex_path: /mnt/unionfs/shows/bill\n\n...\nsonarr:\nurl: https://sonarr.bing.bang\ntoken: SOME_TOKEN\nadd_missing: false\nadd_existing: false\nupgrade_existing: false\nroot_folder_path: /data/media/shows/ozzy\nmonitor: all\nquality_profile: Good\nlanguage_profile: English\nseries_type: standard\nseason_folder: true\ntag:\nsearch: false\ncutoff_search: false\nsonarr_path:\nplex_path:\n...\n</code></pre>"},{"location":"config/tautulli/","title":"Tautulli Attributes","text":"<p>Configuring Tautulli is optional but can allow you to create Collections based on Tautulli's Watch Statistics.</p> <p>A <code>tautulli</code> mapping can be either in the root of the config file as global mapping for all libraries, or you can specify the <code>tautulli</code> mapping individually per library.</p> <p>Below is a <code>tautulli</code> mapping example and the full set of attributes:</p> <pre><code>tautulli:\nurl: http://192.168.1.12:8659\napikey: ################################\n</code></pre> Attribute Allowed Values Default Required <code>url</code> Tautulli URLExample: http://192.168.1.12:8659 N/A \u2705 <code>apikey</code> Tautulli API Key N/A \u2705 <ul> <li>The apikey can be found by going to Tautulli &gt; Settings &gt; Web Interface &gt; API &gt; API Key</li> </ul>"},{"location":"config/tautulli/#other-examples","title":"Other examples:","text":"<p>Specifying a second Tautulli instance for a specific library:</p> <p>In this example we have a separate Tautulli instance for TV.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- file: config/Movies.yml\nTV Shows:\nmetadata_path:\n- file: config/TV.yml\ntautulli:\nurl: http://192.168.1.14:8659\napikey: SOME_KEY\n...\ntautulli:\nurl: http://192.168.1.12:8659\napikey: SOME_KEY\n...\n</code></pre>"},{"location":"config/tmdb/","title":"TMDb Attributes","text":"<p>Configuring TheMovieDb is required in order to run Plex Meta Manager. </p> <p>A <code>tmdb</code> mapping is in the root of the config file.</p> <p>Below is a <code>tmdb</code> mapping example and the full set of attributes: <pre><code>tmdb:\napikey: ################################\nlanguage: en\nregion: US\ncache_expiration: 60\n</code></pre></p> Attribute Allowed Values Default Required <code>apikey</code> User TMDb V3 API Key N/A \u2705 <code>language</code> ISO 639-1 Code of the User Language en \u274c <code>region</code> ISO 3166-1 Code of the User Region for use with Other TMDb Builders None \u274c <code>cache_expiration</code> Number of days before each cache mapping expires and has to be re-cached. 60 \u274c <p>If you do not have a TMDb V3 API key please refer to this guide.</p>"},{"location":"config/trakt/","title":"Trakt Attributes","text":"<p>Configuring Trakt.tv is optional but is required for Trakt based collections to function. </p> <p>A <code>trakt</code> mapping is in the root of the config file.</p> <p>Below is a <code>trakt</code> mapping example and the full set of attributes: <pre><code>trakt:\nclient_id: ################################################################\nclient_secret: ################################################################\npin:\nauthorization:\naccess_token:\ntoken_type:\nexpires_in:\nrefresh_token:\nscope:\ncreated_at:\n</code></pre></p> Attribute Allowed Values Default Required <code>client_id</code> Trakt Application Client ID N/A \u2705 <code>client_secret</code> Trakt Application Client Secret N/A \u2705 <code>pin</code> Trakt Pin None \u274c <ul> <li> <p>All other attributes will be filled in by Plex Meta Manager. </p> </li> <li> <p>To connect to Trakt.tv you must create a Trakt application and supply Plex Meta Manager the <code>client_id</code>, <code>client_secret</code>, and <code>pin</code> provided, please do the following:</p> </li> <li>Click here to create a Trakt API application.</li> <li>Enter a <code>Name</code> for the application.</li> <li>Enter <code>urn:ietf:wg:oauth:2.0:oob</code> for <code>Redirect uri</code>.</li> <li>Click the <code>SAVE APP</code> button.</li> <li>Record the <code>Client ID</code> and <code>Client Secret</code> as <code>client_id</code> and <code>client_secret</code> in your Configuration File.</li> <li> <p>Click the Green Authorize Button next to the Redirect URI</p> <p> 8. Record the <code>PIN</code> as <code>pin</code> in your Configuration File.</p> </li> <li> <p>Run Plex Meta Manager shortly after obtaining your PIN; the PIN may expire at some point.</p> </li> </ul>"},{"location":"config/trakt/#online-authorization-script","title":"Online Authorization Script","text":"<p>Plex Meta Manager requires interactive mode to be able to enter the Client ID and Client Secret. Some systems (namely NAS) make this difficult to accomplish. Chazlarson has developed an online script that can be run to generate the MAL and Trakt authentication outside of Plex Meta Manager and then paste the end-result directly into the configuration file.</p> <p>The Online Auth tool can be found here.</p> <p>Simply press the play button, wait a little bit, and then follow the on-screen prompts.</p>"},{"location":"config/webhooks/","title":"Webhooks Attributes","text":"<p>Configuring Webhooks is optional but can allow you to receive notifications when certain events happen.</p> <p>Discord and Slack Direct webhooks are supported just use the correct urls. </p> <p>A <code>webhooks</code> mapping is in the root of the config file.</p> <p>Below is a <code>webhooks</code> mapping example and the full set of attributes:</p> <pre><code>webhooks:\nerror: https://www.myspecialdomain.com/pmm\nversion:\nrun_start:\nrun_end:\nchanges:\n</code></pre> Attribute Global Library Collection <code>error</code> \u2705 \u274c \u274c <code>version</code> \u2705 \u274c \u274c <code>run_start</code> \u2705 \u274c \u274c <code>run_end</code> \u2705 \u274c \u274c <code>delete</code> \u2705 \u274c \u274c <code>changes</code> \u2705 \u2705 \u2705 <ul> <li>Each Attribute can be either a webhook url as a string or a comma-separated list of webhooks urls.</li> <li>To send notifications to Notifiarr just add <code>notifiarr</code> to a webhook instead of the webhook url.</li> </ul>"},{"location":"config/webhooks/#error-notifications","title":"Error Notifications","text":"<p>The Error notification will be sent whenever an error occurs. The payload that is sent is different Depending on which level the error occurs.</p>"},{"location":"config/webhooks/#global-json-payload","title":"Global JSON Payload","text":"<pre><code>{\n\"event\": \"error\",             // Event\n\"error\": str,                 // Error Message\n\"critical\": bool              // Critical Error\n}\n</code></pre>"},{"location":"config/webhooks/#library-json-payload","title":"Library JSON Payload","text":"<pre><code>{\n\"event\": \"error\",             // Event\n\"error\": str,                 // Error Message\n\"critical\": bool,             // Critical Error\n\"server_name\": str,           // Server Name\n\"library_name\": str           // Library Name\n}\n</code></pre>"},{"location":"config/webhooks/#collection-json-payload","title":"Collection JSON Payload","text":"<pre><code>{\n\"event\": \"error\",             // Event\n\"error\": str,                 // Error Message\n\"critical\": bool,             // Critical Error\n\"server_name\": str,           // Server Name\n\"library_name\": str,          // Library Name\n\"collection\": str             // Collection Name\n}\n</code></pre>"},{"location":"config/webhooks/#playlist-json-payload","title":"Playlist JSON Payload","text":"<pre><code>{\n\"event\": \"error\",             // Event\n\"error\": str,                 // Error Message\n\"critical\": bool,             // Critical Error\n\"server_name\": str,           // Server Name\n\"library_name\": str,          // Library Name\n\"playlist\": str               // Playlist Name\n}\n</code></pre>"},{"location":"config/webhooks/#version-notifications","title":"Version Notifications","text":"<p>The Version notification will be sent at the beginning of a run if there is a newer version available.</p>"},{"location":"config/webhooks/#json-payload","title":"JSON Payload","text":"<pre><code>{\n\"event\": \"version\",           // Event\n\"current\": str,               // Current Version\n\"latest\": str,                // Latest Version \"notes\": str                  // Sends the lateset release notes or new commits to develop since your version\n}\n</code></pre>"},{"location":"config/webhooks/#run-start-notifications","title":"Run Start Notifications","text":"<p>The Run Start notification will be sent at the beginning of every run.</p>"},{"location":"config/webhooks/#json-payload_1","title":"JSON Payload","text":"<pre><code>{\n\"event\": \"run_start\",         // Event\n\"start_time\": str,            // Time Run is started Format \"YY-mm-dd HH:MM:SS\"\n}\n</code></pre>"},{"location":"config/webhooks/#run-end-notifications","title":"Run End Notifications","text":"<p>The Run End notification will be sent at the end of every run with statistics.</p>"},{"location":"config/webhooks/#json-payload_2","title":"JSON Payload","text":"<pre><code>{\n\"event\": \"run_end\",           // Event\n\"start_time\": str,            // Time Run started Format \"YY-mm-dd HH:MM:SS\"\n\"end_time\": str,              // Time Run ended Format \"YY-mm-dd HH:MM:SS\"\n\"run_time\": str,              // Time Run took to complete Format \"HH:MM\"\n\"collections_created\": int,   // Number of Collections/Playlists Created\n\"collections_modified\": int,  // Number of Collections/Playlists Modified\n\"collections_deleted\": int,   // Number of Collections/Playlists Removed\n\"items_added\": int,           // Number of Items added across all Collections/Playlists\n\"items_removed\": int,         // Number of Items removed across all Collections/Playlists\n\"added_to_radarr\": int,       // Number of Items added to Radarr\n\"added_to_sonarr\": int,       // Number of Items added to Sonarr\n\"names\": [                    // List of Dictionaries\n\"name\": str,                // Name of collection or playlist in the run \"library\": str              // Library the collection is in or PLAYLIST\n]\n}\n</code></pre>"},{"location":"config/webhooks/#delete-notifications","title":"Delete Notifications","text":"<p>The Delete Notification will be sent whenever a collection/playlist is deleted containing the following payload.</p>"},{"location":"config/webhooks/#json-payload_3","title":"JSON Payload","text":"<pre><code>{\n\"event\": \"delete\",            // Event\n\"message\": str,               // Status Message\n\"server_name\": str,           // Server Name\n\"library_name\": str,          // Library Name (Only if a Collection is deleted)\n}\n</code></pre>"},{"location":"config/webhooks/#changes-notifications","title":"Changes Notifications","text":"<p>The Changes Notification will be sent after each collection/playlist containing the following payload if the collection/playlist has been created, has new items, or has had items removed.</p>"},{"location":"config/webhooks/#json-payload_4","title":"JSON Payload","text":"<pre><code>{\n\"event\": \"changes\",           // Event\n\"server_name\": str,           // Server Name\n\"library_name\": str,          // Library Name\n\"collection\": str,            // Collection Name only in payload for a collection\n\"playlist\": str,              // Playlist Name only in payload for a playlist\n\"created\": bool,              // Was the Collection/Playlist Created on this run\n\"poster\": str,                // Base64 Encoded Collection/Playlist Poster if no poster_url is found\n\"poster_url\": str,            // Collection/Playlist Poster URL if avaiable\n\"background\": str,            // Base64 Encoded Collection/Playlist Background if no poster_url is found\n\"background_url\": str,        // Collection/Playlist Background URL if avaiable\n\"additions\": [                // List of Dictionaries\n\"title\": str,               // Title of addition\n\"tmdb_id\": int,             // TMDb ID of addition only appears if it's a Movie\n\"tvdb_id\": int              // TVDb ID of addition only appears if it's a Show\n],\n\"removals\": [                 // List of Dictionaries\n\"title\": str,               // Title of removal\n\"tmdb_id\": int,             // TMDb ID of removal only appears if it's a Movie\n\"tvdb_id\": int              // TVDb ID of removal only appears if it's a Show\n],\n\"radarr_adds\": [              // List of Dictionaries\n\"title\": str,               // Title of the Radarr Add\n\"id\":  int                  // TMDb ID of the Radarr Add\n],\n\"sonarr_adds\": [              // List of Dictionaries\n\"title\": str,               // Title of the Sonarr Add\n\"id\":  int                  // TVDb ID of the Sonarr Add\n]\n}\n</code></pre>"},{"location":"defaults/collection_list/","title":"Collection list","text":""},{"location":"defaults/collection_list/#collections","title":"Collections","text":"<p>These files can generally be used on both Movie and Show library-types, or are part of a category of collection (such as Award Shows.)</p> <p>These collections are applied by calling the below paths into the <code>metadata_path</code> section of your config.yml</p>"},{"location":"defaults/collection_list/#award-collections","title":"Award Collections","text":"Default Path Example Collections Works with Movies Works with Shows Award Separator <code>separator_award</code> Award Collections \u2705 \u2705 British Academy of Film and Television Arts <code>bafta</code> BAFTA Best Films, BAFTA 2021 \u27051 \u274c Cannes <code>cannes</code> Cannes - Palme d'or, Cannes 2018 \u27051 \u274c Critics Choice <code>choice</code> Critics Choice Awards 2020 \u27051 \u27051 Emmys <code>emmy</code> Emmys 2021 \u2705 \u2705 Golden Globes <code>golden</code> Best Motion Pictures \u2705 \u2705 Academy Awards (Oscars) <code>oscars</code> Best Picture Winners \u2705 \u274c Independent Spirit <code>spirit</code> Independent Spirit Awards 2021 \u27051 \u274c Sundance <code>sundance</code> Sundance Grand Jury Winners \u27051 \u274c Other <code>other_award</code> Berlinale Golden Bears, Venice Golden Lions \u27051 \u274c <p>1 Requires Trakt Authentication</p>"},{"location":"defaults/collection_list/#chart-collections","title":"Chart Collections","text":"Default Path Example Collections Works with Movies Works with Shows Chart Separator <code>separator_chart</code> Chart Collections \u2705 \u2705 AniList <code>anilist</code> AniList Popular, AniList Season \u2705 \u2705 Basic <code>basic</code> Newly Released, New Episodes \u2705 \u2705 FlixPatrol <code>flixpatrol</code> Top Disney, Top Max, Top Hulu, Top Netflix \u2705 \u2705 IMDb <code>imdb</code> IMDb Popular, IMDb Top 250 \u2705 \u2705 MyAnimeList <code>myanimelist</code> MyAnimeList Popular, MyAnimeList Top Rated \u2705 \u2705 Other <code>other_chart</code> AniDB Popular, Common Sense Selection \u2705 \u2705 Tautulli <code>tautulli</code> Plex Popular, Plex Watched \u27052 \u27052 TMDb <code>tmdb</code> TMDb Popular, TMDb Airing Today \u2705 \u2705 Trakt <code>trakt</code> Trakt Popular, Trakt Trending \u27051 \u27051 <p>1 Requires Trakt Authentication 2 Requires Tautulli Authentication</p>"},{"location":"defaults/collection_list/#general-collections","title":"General Collections","text":"Default Path Example Collections Works with Movies Works with Shows Actor <code>actor</code> Chris Hemsworth, Margot Robbie \u2705 \u2705 Audio Language <code>audio_language</code> French Audio, Korean Audio \u2705 \u2705 Based On... <code>based</code> Based on a Book, Based on a True Story \u2705 \u2705 Collectionless <code>collectionless</code> Collectionless \u2705 \u2705 Common Sense Content Rating <code>content_rating_cs</code> 1, 2, 3, 4, 5, 6, 15, 16, 17, 18 \u2705 \u2705 MyAnimeList Content Rating <code>content_rating_mal</code> G, PG, PG-13, R, R+, Rx \u2705 \u2705 Content Rating (UK) <code>content_rating_uk</code> U, PG, 12A \u2705 \u2705 Content Rating (US) Movie/Show <code>content_rating_us</code> G, PG, NC-17 \u2705 \u2705 Country Movie/Show <code>country</code> Belgium, India \u2705 \u2705 Decade Movie/Show <code>decade</code> Best of 2012, Best of 2022 \u2705 \u2705 Director <code>director</code> Steven Spielberg (Director), Olivia Wilde (Director) \u2705 \u274c Franchise Movie/Show <code>franchise</code> Star Wars: Skywalker Saga, Godzilla (Anime) \u2705 \u2705 Genre <code>genre</code> Action, Drama, Science Fiction \u2705 \u2705 Network <code>network</code> Disney Channel, Lifetime \u274c \u2705 Producer <code>producer</code> James Cameron (Producer), Reese Witherspoon (Producer) \u2705 \u274c Resolution <code>resolution</code> 4K Movies, 1080p Movies, 720p Movies \u2705 \u2705 Seasonal <code>seasonal</code> Easter, Christmas \u2705 \u274c Streaming <code>streaming</code> Disney+ Movies, Max Shows \u2705 \u2705 Studio <code>studio</code> DreamWorks Studios, Walt Disney Pictures \u2705 \u2705 Anime Studio <code>studio_anime</code> Bones, Studio Ghibli, Toei Animation \u2705 \u2705 Subtitle Language <code>subtitle_language</code> German Subtitles, Swedish Subtitles \u2705 \u2705 Universe <code>universe</code> Marvel Cinematic Universal, Wizarding World \u2705 \u274c Year <code>year</code> Best of 2010, Best of 2019 \u2705 \u2705 Writer <code>writer</code> James Cameron (Writer), Lilly Wachowski (Writer) \u2705 \u274c"},{"location":"defaults/collection_variables/","title":"Shared Collection Template Variables","text":"<p>There are some <code>template_variables</code> that all the PMM Defaults except <code>franchise</code> and <code>collectionless</code> can use to manipulate the file from the default settings which are provided. </p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Below are the available variables which can be used to customize the file.</p> Variable Description &amp; Values <code>language</code> Description: Set the language of Collection Names and SummariesDefault: <code>default</code>Values: <code>default</code> (English), <code>fr</code> (French), or <code>de</code> (German) <code>use_&lt;&lt;key&gt;&gt;</code>1 Description: Turns off individual Collections in a Defaults file.Values: <code>false</code> to turn off the collection <code>name_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the name of the specified key's collection.Values: New Collection Name <code>summary_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary of the specified key's collection.Values: New Collection Summary <code>collection_section</code> Description: Changes the sort order of the collection sections against other default collection sections.Values: Any number <code>sort_prefix</code> Description: Changes the prefix of the sort title.Default: <code>!</code>Values: Any String <code>sort_title</code> Description: Changes the sort title of all collections.Default: <code>&lt;&lt;sort_prefix&gt;&gt;&lt;&lt;collection_section&gt;&gt;&lt;&lt;pre&gt;&gt;&lt;&lt;order_&lt;&lt;key&gt;&gt;&gt;&gt;&lt;&lt;title&gt;&gt;</code>Values: Any String <code>name_mapping</code> Description: Changes the <code>name_mapping</code> of all collections.Default: <code>&lt;&lt;title&gt;&gt;</code>Values: Any String with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>order_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the sort order of the collections in their collection section.Values: Any number <code>collection_mode</code> Description: Controls the collection mode of all collections in a Defaults file.Values:<code>default</code>Library default<code>hide</code>Hide Collection<code>hide_items</code>Hide Items in this Collection<code>show_items</code>Show this Collection and its Items <code>ignore_ids</code> Description: Set a list or comma-separated string of TMDb/TVDb IDs to ignore in all collections.Values: List or comma-separated string of TMDb/TVDb IDs <code>ignore_imdb_ids</code> Description: Set a list or comma-separated string of IMDb IDs to ignore in all collections.Values: List or comma-separated string of IMDb IDs <code>minimum_items</code> Description: Set the number of minimum items for a collection to be created for all collections.Values: Any Number greater then 0 <code>minimum_items_&lt;&lt;key&gt;&gt;</code>1 Description: Set the number of minimum items for a collection to be created for the specified key's collection.Values: Any Number greater then 0 <code>delete_collections_named</code> Description: Used to delete any collections in your plex named one of the given collections.Values: List of Collection Names to delete <code>url_poster</code> Description: Changes the poster url for all collections.Values: URL directly to the Image <code>url_poster_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the poster url of the specified key's collection.Values: URL directly to the Image <code>file_poster</code> Description: Sets the poster filepath for all collections.Values: Filepath directly to the Image <code>file_poster_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the poster filepath of the specified key's collection.Values: Filepath directly to the Image <code>url_background</code> Description: Sets the background url for all collections.Values: URL directly to the Image <code>url_background__&lt;&lt;key&gt;&gt;</code>1 Description: Sets the background url of the specified key's collection.Values: URL directly to the Image <code>file_background</code> Description: Sets the background filepath for all collections.Values: Filepath directly to the Image <code>file_background__&lt;&lt;key&gt;&gt;</code>1 Description: Sets the background filepath of the specified key's collection.Values: Filepath directly to the Image <code>visible_library</code> Description: Controls visible on Library Recommended Tab for all collections in a Defaults file. (Only works with Plex Pass)Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>visible_library_&lt;&lt;key&gt;&gt;</code>1 Description: Controls visible on Library Recommended Tab of the specified key's collection. (Only works with Plex Pass)Default: <code>visible_library</code>Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>visible_home</code> Description: Controls visible on Home Tab for all collections in a Defaults file. (Only works with Plex Pass)Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>visible_home_&lt;&lt;key&gt;&gt;</code>1 Description: Controls visible on Home Tab of the specified key's collection. (Only works with Plex Pass)Default: <code>visible_home</code>Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>visible_shared</code> Description: Controls visible on Shared Users' Home Tab for all collections in a Defaults file. (Only works with Plex Pass)Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>visible_shared_&lt;&lt;key&gt;&gt;</code>1 Description: Controls visible on Shared Users' Home Tab of the specified key's collection. (Only works with Plex Pass)Default: <code>visible_shared</code>Values:<code>true</code>Visible<code>false</code>Not VisibleAny <code>schedule</code> OptionVisible When Scheduled <code>radarr_add_missing</code> Description: Override Radarr <code>add_missing</code> attribute for all collections in a Defaults file.Values: <code>true</code> or <code>false</code> <code>radarr_add_missing_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>add_missing</code> attribute of the specified key's collection.Default: <code>radarr_add_missing</code>Values: <code>true</code> or <code>false</code> <code>radarr_folder</code> Description: Override Radarr <code>root_folder_path</code> attribute for all collections in a Defaults file.Values: Folder Path <code>radarr_folder_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>root_folder_path</code> attribute of the specified key's collection.Default: <code>radarr_folder</code>Values: Folder Path <code>radarr_search</code> Description: Override Radarr <code>search</code> attribute or all collections in a Defaults file.Values: <code>true</code> or <code>false</code> <code>radarr_search_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>search</code> attribute of the specified key's collection.Default: <code>radarr_search</code>Values: <code>true</code> or <code>false</code> <code>radarr_tag</code> Description: Override Radarr <code>tag</code> attribute for all collections in a Defaults file.Values: List or comma-separated string of tags <code>radarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>tag</code> attribute of the specified key's collection.Default: <code>radarr_tag</code>Values: List or comma-separated string of tags <code>item_radarr_tag</code> Description: Used to append a tag in Radarr for every movie found by the builders that's in Radarr for all collections in a Defaults file.Values: List or comma-separated string of tags <code>item_radarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Used to append a tag in Radarr for every movie found by the builders that's in Radarr of the specified key's collection.Default: <code>item_radarr_tag</code>Values: List or comma-separated string of tags <code>sonarr_add_missing</code> Description: Override Sonarr <code>add_missing</code> attribute for all collections in a Defaults file.Values: <code>true</code> or <code>false</code> <code>sonarr_add_missing_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>add_missing</code> attribute of the specified key's collection.Default: <code>sonarr_add_missing</code>Values: <code>true</code> or <code>false</code> <code>sonarr_folder</code> Description: Override Sonarr <code>root_folder_path</code> attribute for all collections in a Defaults file.Values: Folder Path <code>sonarr_folder_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>root_folder_path</code> attribute of the specified key's collection.Default: <code>sonarr_folder</code>Values: Folder Path <code>sonarr_search</code> Description: Override Sonarr <code>search</code> attribute or all collections in a Defaults file.Values: <code>true</code> or <code>false</code> <code>sonarr_search_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>search</code> attribute of the specified key's collection.Default: <code>sonarr_search</code>Values: <code>true</code> or <code>false</code> <code>sonarr_tag</code> Description: Override Sonarr <code>tag</code> attribute for all collections in a Defaults file.Values: List or comma-separated string of tags <code>sonarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>tag</code> attribute of the specified key's collection.Default: <code>sonarr_tag</code>Values: List or comma-separated string of tags <code>item_sonarr_tag</code> Description: Used to append a tag in Sonarr for every series found by the builders that's in Sonarr for all collections in a Defaults file.Values: List or comma-separated string of tags <code>item_sonarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Used to append a tag in Sonarr for every series found by the builders that's in Sonarr of the specified key's collection.Default: <code>item_sonarr_tag</code>Values: List or comma-separated string of tags <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol>"},{"location":"defaults/collections/","title":"Collection Defaults","text":"<p>There are many Default Metadata Files built into PMM itself which offer an easy-to-use and customizable set of Collections that the user can achieve without having to worry about creating the files that makes the collections possible.</p> <p>This is the simplest way to create Collections using Plex Meta Manager.</p>"},{"location":"defaults/collections/#collections","title":"Collections","text":"<p>These files can generally be used on both Movie and Show library-types, or are part of a category of collection (such as Award Shows.)</p> <p>These collections are applied by calling the below paths into the <code>metadata_path</code> section of your config.yml</p>"},{"location":"defaults/collections/#award-collections","title":"Award Collections","text":"Default Path Example Collections Works with Movies Works with Shows Award Separator <code>separator_award</code> Award Collections \u2705 \u2705 British Academy of Film and Television Arts <code>bafta</code> BAFTA Best Films, BAFTA 2021 \u27051 \u274c Cannes <code>cannes</code> Cannes - Palme d'or, Cannes 2018 \u27051 \u274c Critics Choice <code>choice</code> Critics Choice Awards 2020 \u27051 \u27051 Emmys <code>emmy</code> Emmys 2021 \u2705 \u2705 Golden Globes <code>golden</code> Best Motion Pictures \u2705 \u2705 Academy Awards (Oscars) <code>oscars</code> Best Picture Winners \u2705 \u274c Independent Spirit <code>spirit</code> Independent Spirit Awards 2021 \u27051 \u274c Sundance <code>sundance</code> Sundance Grand Jury Winners \u27051 \u274c Other <code>other_award</code> Berlinale Golden Bears, Venice Golden Lions \u27051 \u274c <p>1 Requires Trakt Authentication</p>"},{"location":"defaults/collections/#chart-collections","title":"Chart Collections","text":"Default Path Example Collections Works with Movies Works with Shows Chart Separator <code>separator_chart</code> Chart Collections \u2705 \u2705 AniList <code>anilist</code> AniList Popular, AniList Season \u2705 \u2705 Basic <code>basic</code> Newly Released, New Episodes \u2705 \u2705 FlixPatrol <code>flixpatrol</code> Top Disney, Top Max, Top Hulu, Top Netflix \u2705 \u2705 IMDb <code>imdb</code> IMDb Popular, IMDb Top 250 \u2705 \u2705 MyAnimeList <code>myanimelist</code> MyAnimeList Popular, MyAnimeList Top Rated \u2705 \u2705 Other <code>other_chart</code> AniDB Popular, Common Sense Selection \u2705 \u2705 Tautulli <code>tautulli</code> Plex Popular, Plex Watched \u27052 \u27052 TMDb <code>tmdb</code> TMDb Popular, TMDb Airing Today \u2705 \u2705 Trakt <code>trakt</code> Trakt Popular, Trakt Trending \u27051 \u27051 <p>1 Requires Trakt Authentication 2 Requires Tautulli Authentication</p>"},{"location":"defaults/collections/#general-collections","title":"General Collections","text":"Default Path Example Collections Works with Movies Works with Shows Actor <code>actor</code> Chris Hemsworth, Margot Robbie \u2705 \u2705 Audio Language <code>audio_language</code> French Audio, Korean Audio \u2705 \u2705 Based On... <code>based</code> Based on a Book, Based on a True Story \u2705 \u2705 Collectionless <code>collectionless</code> Collectionless \u2705 \u2705 Common Sense Content Rating <code>content_rating_cs</code> 1, 2, 3, 4, 5, 6, 15, 16, 17, 18 \u2705 \u2705 MyAnimeList Content Rating <code>content_rating_mal</code> G, PG, PG-13, R, R+, Rx \u2705 \u2705 Content Rating (UK) <code>content_rating_uk</code> U, PG, 12A \u2705 \u2705 Content Rating (US) Movie/Show <code>content_rating_us</code> G, PG, NC-17 \u2705 \u2705 Country Movie/Show <code>country</code> Belgium, India \u2705 \u2705 Decade Movie/Show <code>decade</code> Best of 2012, Best of 2022 \u2705 \u2705 Director <code>director</code> Steven Spielberg (Director), Olivia Wilde (Director) \u2705 \u274c Franchise Movie/Show <code>franchise</code> Star Wars: Skywalker Saga, Godzilla (Anime) \u2705 \u2705 Genre <code>genre</code> Action, Drama, Science Fiction \u2705 \u2705 Network <code>network</code> Disney Channel, Lifetime \u274c \u2705 Producer <code>producer</code> James Cameron (Producer), Reese Witherspoon (Producer) \u2705 \u274c Resolution <code>resolution</code> 4K Movies, 1080p Movies, 720p Movies \u2705 \u2705 Seasonal <code>seasonal</code> Easter, Christmas \u2705 \u274c Streaming <code>streaming</code> Disney+ Movies, Max Shows \u2705 \u2705 Studio <code>studio</code> DreamWorks Studios, Walt Disney Pictures \u2705 \u2705 Anime Studio <code>studio_anime</code> Bones, Studio Ghibli, Toei Animation \u2705 \u2705 Subtitle Language <code>subtitle_language</code> German Subtitles, Swedish Subtitles \u2705 \u2705 Universe <code>universe</code> Marvel Cinematic Universal, Wizarding World \u2705 \u274c Year <code>year</code> Best of 2010, Best of 2019 \u2705 \u2705 Writer <code>writer</code> James Cameron (Writer), Lilly Wachowski (Writer) \u2705 \u274c"},{"location":"defaults/collections/#configurations","title":"Configurations","text":"<p>To run a default pmm Metadata file you can simply add it to your <code>metadata_path</code> using <code>pmm</code> like so:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: actor\n- pmm: genre\n</code></pre>"},{"location":"defaults/collections/#separators","title":"Separators","text":"<p>Most Metadata files use separators to denote different sections of collection like actor collections vs studio collections.</p> <p>Chart Separator and Award Separator each have their own file, while the other Separators are part of their respective files.</p> Click to expand to see an example of Separators.     ![](images/separators.jpg)"},{"location":"defaults/collections/#library-onoff","title":"Library On/Off","text":"<p>Chart Separators are turned On by default (except <code>seasonal</code>), to turn the Separators On/Off on a per Library basis.</p> <pre><code>libraries:\nLIBRARYNAME:\ntemplate_variables:\nuse_separator: false\nmetadata_path:\n- pmm: actor\n- pmm: genre\n</code></pre>"},{"location":"defaults/collections/#collection-section-order","title":"Collection Section Order","text":"<p>All Default Metadata Files have a <code>collection_section</code> attribute. These attributes determine the order of the various sections and can be set by customizing your config.</p> <p>For example: <code>collection_section: 01</code> translates to <code>sort_title: \"!&lt;&lt;collection_section&gt;&gt;&lt;&lt;pre&gt;&gt;&lt;&lt;order_&lt;&lt;key&gt;&gt;&gt;&gt;&lt;&lt;sort&gt;&gt;\"</code> and so for <code>genre</code> if you have a <code>Fantasy</code> collection, plex is going to show <code>!06_Fantasy</code></p> <p>This is the default PMM collection ordering:</p> Collection Collection Section <code>seasonal</code> <code>000</code> <code>basic</code> <code>010</code> <code>anilist</code> <code>020</code> <code>imdb</code> <code>020</code> <code>flixpatrol</code> <code>020</code> <code>myanimelist</code> <code>020</code> <code>other_chart</code> <code>020</code> <code>tautulli</code> <code>020</code> <code>tmdb</code> <code>020</code> <code>trakt</code> <code>020</code> <code>streaming</code> <code>030</code> <code>universe</code> <code>040</code> <code>network</code> <code>050</code> <code>genre</code> <code>060</code> <code>studio</code> <code>070</code> <code>studio_anime</code> <code>070</code> <code>country</code> <code>080</code> <code>based</code> <code>085</code> <code>audio_language</code> <code>090</code> <code>subtitle_language</code> <code>095</code> <code>decade</code> <code>100</code> <code>year</code> <code>105</code> <code>content_rating_us</code> <code>110</code> <code>content_rating_uk</code> <code>110</code> <code>content_rating_cs</code> <code>110</code> <code>resolution</code> <code>120</code> <code>bafta</code> <code>130</code> <code>cannes</code> <code>130</code> <code>choice</code> <code>130</code> <code>emmy</code> <code>130</code> <code>golden</code> <code>130</code> <code>oscars</code> <code>130</code> <code>other_award</code> <code>130</code> <code>spirit</code> <code>130</code> <code>sundance</code> <code>130</code> <code>actor</code> <code>140</code> <code>director</code> <code>150</code> <code>producer</code> <code>160</code> <code>writer</code> <code>170</code>"},{"location":"defaults/collections/#customizing-configs","title":"Customizing Configs","text":"<p>Configs can be customized using the <code>template_variables</code> attribute when calling the file. These <code>template_variables</code> will be given to every template call in the file which allows them to affect how that file runs.</p> <p>This example changes the ratings overlay to work on episodes.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: imdb\ntemplate_variables:\nuse_popular: false\nuse_lowest: false\nvisible_library_top: true\nvisible_home_top: true\nvisible_shared_top: true\n</code></pre> <p>Each file has a page on the wiki showing the available <code>template_variables</code> for each file. For example the default <code>pmm: genre</code> has a page here.</p> <p>In addition to the defined <code>template_variables</code> almost all default Metadata files have access to the Shared Variables.</p>"},{"location":"defaults/collections/#examples","title":"Examples","text":"<p>For example if you want yearly oscar collections that go back 10 years instead of 5 all of which gets sent to radarr use the <code>data</code> and <code>radarr_add_missing</code> template variables.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: oscars\ntemplate_variables:\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre> <p>Or maybe you want to change the number of actor collections made using pmm: actor.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: actor\ntemplate_variables:\ncollection_mode: hide\ndata:\ndepth: 5\nlimit: 50\n</code></pre> <p>Or maybe you want to change the collection sort order of the genre collections using pmm: genre.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: genre\ntemplate_variables:\ncollection_section: 11\n</code></pre> <p>Or maybe you want to disable separators globally per library.</p> <pre><code>libraries:\nLIBRARYNAME:\ntemplate_variables:\nuse_separator: false\nmetadata_path:\n- ...\n</code></pre> <p>Alternatively it can be turned off individually per git file:</p> <pre><code>libraries:\nLIBRARYNAME:\nmetadata_path:\n- pmm: &lt;file1&gt;    # separator is disabled\ntemplate_variables:\nuse_separator: false\n- pmm: &lt;file2&gt;    # separator is enabled by default\n- pmm: &lt;file3&gt;    # separator is disabled\ntemplate_variables:\nuse_separator: false\n</code></pre>"},{"location":"defaults/collections/#example-configuration-file","title":"Example Configuration File","text":"Click to expand sample config.yml file <pre><code>libraries:\nMovies:                                           # Must match a library name in your Plex\nreport_path: config/missing/Movies_missing.yml\ntemplate_variables:\nsep_style: purple                               # use the purple separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt8579674                # 1917 (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: studio                                   # DreamWorks Studios, Lucasfilm Ltd, etc.\n- pmm: seasonal                                 # Christmas, Halloween, etc.\ntemplate_variables:                           # Disable any US-specific seasonal collections\nschedule_independence: never\nschedule_thanksgiving: never\nschedule_memorial: never\nschedule_labor: never\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\n- pmm: universe                                 # Marvel Cinematic Universe, Wizarding World, etc.\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. style: standard/compact. compact is default\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc.\n- pmm: ribbon                                   # Used for ribbon in bottom right\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\n\nTV Shows:                                         # Must match a library name in your Plex\nreport_path: config/missing/TV_missing.yml\ntemplate_variables:\nsep_style: plum                               # use the plum separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt1190634                # The Boys (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: network                                  # ABC, CBC, NBC, FOX, etc.\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. on show and episode\n- pmm: audio_codec\ntemplate_variables:\noverlay_level: episode\n- pmm: episode_info                             # S##E## information in bottom right on episode\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. on show, episode, and season\n- pmm: resolution\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution\ntemplate_variables:\noverlay_level: season\n- pmm: ribbon                                   # Used for ribbon in bottom right on show\n- pmm: status                                   # Airing, Returning, Ended, Canceled on show\n- pmm: versions                                 # Will show duplicates for that media item on show and episode\n- pmm: versions                                 template_variables:\noverlay_level: episode\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left on show, episode, and season\n- pmm: video_format\ntemplate_variables:\noverlay_level: episode\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\nplaylist_files:\n- pmm: playlist\ntemplate_variables:\nlibraries: Movies, TV Shows                     # Must match the names of your libraries in Plex.\n</code></pre>"},{"location":"defaults/example/","title":"Example","text":""},{"location":"defaults/example/#example-configuration-file","title":"Example Configuration File","text":"Click to expand sample config.yml file <pre><code>libraries:\nMovies:                                           # Must match a library name in your Plex\nreport_path: config/missing/Movies_missing.yml\ntemplate_variables:\nsep_style: purple                               # use the purple separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt8579674                # 1917 (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: studio                                   # DreamWorks Studios, Lucasfilm Ltd, etc.\n- pmm: seasonal                                 # Christmas, Halloween, etc.\ntemplate_variables:                           # Disable any US-specific seasonal collections\nschedule_independence: never\nschedule_thanksgiving: never\nschedule_memorial: never\nschedule_labor: never\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\n- pmm: universe                                 # Marvel Cinematic Universe, Wizarding World, etc.\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. style: standard/compact. compact is default\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc.\n- pmm: ribbon                                   # Used for ribbon in bottom right\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\n\nTV Shows:                                         # Must match a library name in your Plex\nreport_path: config/missing/TV_missing.yml\ntemplate_variables:\nsep_style: plum                               # use the plum separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt1190634                # The Boys (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: network                                  # ABC, CBC, NBC, FOX, etc.\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. on show and episode\n- pmm: audio_codec\ntemplate_variables:\noverlay_level: episode\n- pmm: episode_info                             # S##E## information in bottom right on episode\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. on show, episode, and season\n- pmm: resolution\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution\ntemplate_variables:\noverlay_level: season\n- pmm: ribbon                                   # Used for ribbon in bottom right on show\n- pmm: status                                   # Airing, Returning, Ended, Canceled on show\n- pmm: versions                                 # Will show duplicates for that media item on show and episode\n- pmm: versions                                 template_variables:\noverlay_level: episode\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left on show, episode, and season\n- pmm: video_format\ntemplate_variables:\noverlay_level: episode\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\nplaylist_files:\n- pmm: playlist\ntemplate_variables:\nlibraries: Movies, TV Shows                     # Must match the names of your libraries in Plex.\n</code></pre>"},{"location":"defaults/files/","title":"List of Defaults Files","text":"<p>The below table outlines the available Defaults files which can be called via <code>metadata_path</code> (for Collections), <code>overlay_path</code> (for Overlays) and <code>playlist_files</code> (for Playlists).</p>"},{"location":"defaults/files/#collections","title":"Collections","text":"<p>These files can generally be used on both Movie and Show library-types, or are part of a category of collection (such as Award Shows.)</p> <p>These collections are applied by calling the below paths into the <code>metadata_path</code> section of your config.yml</p>"},{"location":"defaults/files/#award-collections","title":"Award Collections","text":"Default Path Example Collections Works with Movies Works with Shows Award Separator <code>separator_award</code> Award Collections \u2705 \u2705 British Academy of Film and Television Arts <code>bafta</code> BAFTA Best Films, BAFTA 2021 \u27051 \u274c Cannes <code>cannes</code> Cannes - Palme d'or, Cannes 2018 \u27051 \u274c Critics Choice <code>choice</code> Critics Choice Awards 2020 \u27051 \u27051 Emmys <code>emmy</code> Emmys 2021 \u2705 \u2705 Golden Globes <code>golden</code> Best Motion Pictures \u2705 \u2705 Academy Awards (Oscars) <code>oscars</code> Best Picture Winners \u2705 \u274c Independent Spirit <code>spirit</code> Independent Spirit Awards 2021 \u27051 \u274c Sundance <code>sundance</code> Sundance Grand Jury Winners \u27051 \u274c Other <code>other_award</code> Berlinale Golden Bears, Venice Golden Lions \u27051 \u274c <p>1 Requires Trakt Authentication</p>"},{"location":"defaults/files/#chart-collections","title":"Chart Collections","text":"Default Path Example Collections Works with Movies Works with Shows Chart Separator <code>separator_chart</code> Chart Collections \u2705 \u2705 AniList <code>anilist</code> AniList Popular, AniList Season \u2705 \u2705 Basic <code>basic</code> Newly Released, New Episodes \u2705 \u2705 FlixPatrol <code>flixpatrol</code> Top Disney, Top Max, Top Hulu, Top Netflix \u2705 \u2705 IMDb <code>imdb</code> IMDb Popular, IMDb Top 250 \u2705 \u2705 MyAnimeList <code>myanimelist</code> MyAnimeList Popular, MyAnimeList Top Rated \u2705 \u2705 Other <code>other_chart</code> AniDB Popular, Common Sense Selection \u2705 \u2705 Tautulli <code>tautulli</code> Plex Popular, Plex Watched \u27052 \u27052 TMDb <code>tmdb</code> TMDb Popular, TMDb Airing Today \u2705 \u2705 Trakt <code>trakt</code> Trakt Popular, Trakt Trending \u27051 \u27051 <p>1 Requires Trakt Authentication 2 Requires Tautulli Authentication</p>"},{"location":"defaults/files/#general-collections","title":"General Collections","text":"Default Path Example Collections Works with Movies Works with Shows Actor <code>actor</code> Chris Hemsworth, Margot Robbie \u2705 \u2705 Audio Language <code>audio_language</code> French Audio, Korean Audio \u2705 \u2705 Based On... <code>based</code> Based on a Book, Based on a True Story \u2705 \u2705 Collectionless <code>collectionless</code> Collectionless \u2705 \u2705 Common Sense Content Rating <code>content_rating_cs</code> 1, 2, 3, 4, 5, 6, 15, 16, 17, 18 \u2705 \u2705 MyAnimeList Content Rating <code>content_rating_mal</code> G, PG, PG-13, R, R+, Rx \u2705 \u2705 Content Rating (UK) <code>content_rating_uk</code> U, PG, 12A \u2705 \u2705 Content Rating (US) Movie/Show <code>content_rating_us</code> G, PG, NC-17 \u2705 \u2705 Country Movie/Show <code>country</code> Belgium, India \u2705 \u2705 Decade Movie/Show <code>decade</code> Best of 2012, Best of 2022 \u2705 \u2705 Director <code>director</code> Steven Spielberg (Director), Olivia Wilde (Director) \u2705 \u274c Franchise Movie/Show <code>franchise</code> Star Wars: Skywalker Saga, Godzilla (Anime) \u2705 \u2705 Genre <code>genre</code> Action, Drama, Science Fiction \u2705 \u2705 Network <code>network</code> Disney Channel, Lifetime \u274c \u2705 Producer <code>producer</code> James Cameron (Producer), Reese Witherspoon (Producer) \u2705 \u274c Resolution <code>resolution</code> 4K Movies, 1080p Movies, 720p Movies \u2705 \u2705 Seasonal <code>seasonal</code> Easter, Christmas \u2705 \u274c Streaming <code>streaming</code> Disney+ Movies, Max Shows \u2705 \u2705 Studio <code>studio</code> DreamWorks Studios, Walt Disney Pictures \u2705 \u2705 Anime Studio <code>studio_anime</code> Bones, Studio Ghibli, Toei Animation \u2705 \u2705 Subtitle Language <code>subtitle_language</code> German Subtitles, Swedish Subtitles \u2705 \u2705 Universe <code>universe</code> Marvel Cinematic Universal, Wizarding World \u2705 \u274c Year <code>year</code> Best of 2010, Best of 2019 \u2705 \u2705 Writer <code>writer</code> James Cameron (Writer), Lilly Wachowski (Writer) \u2705 \u274c"},{"location":"defaults/files/#overlays","title":"Overlays","text":"<p>These files apply overlays and can generally be used on both Movie and Show library-types, and often works at the season and episode-level too.</p> <p>It should be noted that when an overlay has \u2757 for a season or episode, it normally means that whilst the overlay can technically be applied at the level, it wasn't designed for this purpose. For example, a show's season cannot have a resolution since it is not a video file, and an episode cannot have a commonsense age-rating since only Movies and Shows are rated by CommonSense. </p> <p>In the scenario where there is missing data such as age ratings for episodes, then generally the highest-level data available will be applied at the lower level (i.e. a Show's CommonSense age rating would apply to all episodes).</p> <p>These overlays are applied by calling the below paths into the <code>overlay_path</code> section of your config.yml</p>"},{"location":"defaults/files/#overlay-files","title":"Overlay Files","text":"Default path Example Overlays Movies Shows Seasons Episodes Audio Codec <code>audio_codec</code> Dolby Atmos logo, DTS logo \u27051 \u27051 \u27051 \u27051 CommonSense Age Rating <code>commonsense</code> \"3+\", \"16+\" \u2705 \u2705 \u2757 \u2757 Direct Play <code>direct_play</code> \"Direct Play Only\" \u2705 \u2757 \u2757 \u2705 Episode Info <code>episode_info</code> \"S01E01\", \"S02E09\" \u274c \u274c \u274c \u2705 FlixPatrol <code>flixpatrol</code> \"Streaming service logo with words \"TOP\" \u2705 \u2705 \u274c \u274c Language Count <code>language_count</code> Dual-Audio, Multi-Audio, Dual-Subtitle, Multi-Subtitle \u2705 \u2705 \u2705 \u2705 Languages <code>languages</code> Flags Based on the Audio/Subtitles a file has \u2705 \u2705 \u2705 \u2705 Mediastinger <code>mediastinger</code> Mediastinger Logo for After/During Credit Scenes \u2705 \u2705 \u274c \u274c Ratings <code>ratings</code> IMDb Audience Rating, Metacritic Critic Rating \u27053 \u27053 \u274c \u27053 Resolution/Editions <code>resolution</code> 4K Dolby Vision logo, 720P logo, \"Director's Cut\", \"Criterion Collection\" \u27052 \u27052 \u274c \u27052 Ribbon <code>ribbon</code> IMDb Top 250 Ribbon, RT Fresh Ribbon \u2705 \u2705 \u274c \u274c Runtimes <code>runtimes</code> \"Runtime: 1h 30m\" \u2705 \u2705 \u274c \u2705 Status <code>status</code> Airing, Returning, Canceled, Ended \u274c \u2705 \u274c \u274c Streaming <code>streaming</code> Netflix logo, Hulu logo \u2705 \u2705 \u274c \u274c Versions <code>versions</code> Multiple Versions logo \u2705 \u2705 \u2705 \u2705 Video Format <code>video_format</code> \"REMUX\", \"HDTV\" \u27051 \u2757 \u2757 \u27051 <p>1 Designed for TRaSH Guides filename naming scheme 2 Requires Plex Pass or TRaSH Guides filename naming scheme 3 Requires Template Variables to function</p>"},{"location":"defaults/files/#playlists","title":"Playlists","text":"<p>These files apply playlists to the \"Playlists\" section of Plex and are applied by calling the below paths into the <code>playlist_files</code> section of your config.yml</p>"},{"location":"defaults/files/#playlist-files","title":"Playlist Files","text":"Default path Example Overlays Playlist <code>playlist</code> Arrowverse (Timeline Order), Pok\u00e9mon (Timeline Order)"},{"location":"defaults/guide/","title":"Defaults Usage Guide","text":"<p>Plex Meta Manager includes a pre-created set of Metadata Files and Overlay Files which can be found in the \"defaults\" folder in the root of your Plex Meta Manager installation directory.</p> <p>These files offer an easy-to-use and customizable set of Collections and Overlays that the user can achieve without having to worry about creating the files that make the collections and overlays possible.</p> <p>All Collections come with a matching poster to make a clean, consistent set of collections in your library. These files are stored in the Plex Meta Manager Images Repository and each poster is downloaded straight to your Plex Collection when you run Plex Meta Manager.</p> <p>Credits to Sohjiro, Bullmoose20, Yozora, Cpt Kuesel, and anon_fawkes for helping drive this entire Default Set of Configs through the concept, design and implementation.</p> <p>Special thanks to Magic815 for the overlay image inspiration and base template.</p> <p>Please consider donating towards the project.</p>"},{"location":"defaults/guide/#collection-defaults","title":"Collection Defaults","text":"<p>See the Collection Defaults Page for more information on the specifics of the Collection Defaults.</p>"},{"location":"defaults/guide/#overlay-defaults","title":"Overlay Defaults","text":"<p>See the Overlay Defaults Page for more information on the specifics of the Overlay Defaults.</p>"},{"location":"defaults/guide/#configurations","title":"Configurations","text":"<p>To run a default pmm Metadata or Overlay file you can simply add it to your <code>metadata_path</code> (For Metadata Files) or <code>overlay_path</code> (For Overlay Files) using <code>pmm</code> like so:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: actor\n- pmm: genre\noverlay_path:\n- pmm: ribbon\n- pmm: ratings\n</code></pre>"},{"location":"defaults/guide/#customizing-configs","title":"Customizing Configs","text":"<p>Configs can be customized using the <code>template_variables</code> attribute when calling the file. These <code>template_variables</code> will be given to every template call in the file which allows them to affect how that file runs.</p> <p>This example changes the ratings overlay to work on episodes.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: imdb\ntemplate_variables:\nuse_popular: false\nuse_lowest: false\nvisible_library_top: true\nvisible_home_top: true\nvisible_shared_top: true\noverlay_path:\n- pmm: ratings\ntemplate_variables:\noverlay_level: episode\n</code></pre> <p>Each file has a page on the wiki showing the available <code>template_variables</code> for each file. For example the default <code>pmm: ratings</code> has a page here.</p> <p>In addition to the defined <code>template_variables</code> almost all default Metadata and Overlay files have access to their respective Metadata/Overlay Shared Variables.</p>"},{"location":"defaults/guide/#example-configuration-file","title":"Example Configuration File","text":"Click to expand sample config.yml file <pre><code>libraries:\nMovies:                                           # Must match a library name in your Plex\nreport_path: config/missing/Movies_missing.yml\ntemplate_variables:\nsep_style: purple                               # use the purple separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt8579674                # 1917 (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: studio                                   # DreamWorks Studios, Lucasfilm Ltd, etc.\n- pmm: seasonal                                 # Christmas, Halloween, etc.\ntemplate_variables:                           # Disable any US-specific seasonal collections\nschedule_independence: never\nschedule_thanksgiving: never\nschedule_memorial: never\nschedule_labor: never\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\n- pmm: universe                                 # Marvel Cinematic Universe, Wizarding World, etc.\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. style: standard/compact. compact is default\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc.\n- pmm: ribbon                                   # Used for ribbon in bottom right\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\n\nTV Shows:                                         # Must match a library name in your Plex\nreport_path: config/missing/TV_missing.yml\ntemplate_variables:\nsep_style: plum                               # use the plum separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt1190634                # The Boys (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: network                                  # ABC, CBC, NBC, FOX, etc.\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. on show and episode\n- pmm: audio_codec\ntemplate_variables:\noverlay_level: episode\n- pmm: episode_info                             # S##E## information in bottom right on episode\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. on show, episode, and season\n- pmm: resolution\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution\ntemplate_variables:\noverlay_level: season\n- pmm: ribbon                                   # Used for ribbon in bottom right on show\n- pmm: status                                   # Airing, Returning, Ended, Canceled on show\n- pmm: versions                                 # Will show duplicates for that media item on show and episode\n- pmm: versions                                 template_variables:\noverlay_level: episode\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left on show, episode, and season\n- pmm: video_format\ntemplate_variables:\noverlay_level: episode\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\nplaylist_files:\n- pmm: playlist\ntemplate_variables:\nlibraries: Movies, TV Shows                     # Must match the names of your libraries in Plex.\n</code></pre>"},{"location":"defaults/overlay_list/","title":"Overlay list","text":""},{"location":"defaults/overlay_list/#overlays","title":"Overlays","text":"<p>These files apply overlays and can generally be used on both Movie and Show library-types, and often works at the season and episode-level too.</p> <p>It should be noted that when an overlay has \u2757 for a season or episode, it normally means that whilst the overlay can technically be applied at the level, it wasn't designed for this purpose. For example, a show's season cannot have a resolution since it is not a video file, and an episode cannot have a commonsense age-rating since only Movies and Shows are rated by CommonSense. </p> <p>In the scenario where there is missing data such as age ratings for episodes, then generally the highest-level data available will be applied at the lower level (i.e. a Show's CommonSense age rating would apply to all episodes).</p> <p>These overlays are applied by calling the below paths into the <code>overlay_path</code> section of your config.yml</p>"},{"location":"defaults/overlay_list/#overlay-files","title":"Overlay Files","text":"Default path Example Overlays Movies Shows Seasons Episodes Audio Codec <code>audio_codec</code> Dolby Atmos logo, DTS logo \u27051 \u27051 \u27051 \u27051 CommonSense Age Rating <code>commonsense</code> \"3+\", \"16+\" \u2705 \u2705 \u2757 \u2757 Direct Play <code>direct_play</code> \"Direct Play Only\" \u2705 \u2757 \u2757 \u2705 Episode Info <code>episode_info</code> \"S01E01\", \"S02E09\" \u274c \u274c \u274c \u2705 FlixPatrol <code>flixpatrol</code> \"Streaming service logo with words \"TOP\" \u2705 \u2705 \u274c \u274c Language Count <code>language_count</code> Dual-Audio, Multi-Audio, Dual-Subtitle, Multi-Subtitle \u2705 \u2705 \u2705 \u2705 Languages <code>languages</code> Flags Based on the Audio/Subtitles a file has \u2705 \u2705 \u2705 \u2705 Mediastinger <code>mediastinger</code> Mediastinger Logo for After/During Credit Scenes \u2705 \u2705 \u274c \u274c Ratings <code>ratings</code> IMDb Audience Rating, Metacritic Critic Rating \u27053 \u27053 \u274c \u27053 Resolution/Editions <code>resolution</code> 4K Dolby Vision logo, 720P logo, \"Director's Cut\", \"Criterion Collection\" \u27052 \u27052 \u274c \u27052 Ribbon <code>ribbon</code> IMDb Top 250 Ribbon, RT Fresh Ribbon \u2705 \u2705 \u274c \u274c Runtimes <code>runtimes</code> \"Runtime: 1h 30m\" \u2705 \u2705 \u274c \u2705 Status <code>status</code> Airing, Returning, Canceled, Ended \u274c \u2705 \u274c \u274c Streaming <code>streaming</code> Netflix logo, Hulu logo \u2705 \u2705 \u274c \u274c Versions <code>versions</code> Multiple Versions logo \u2705 \u2705 \u2705 \u2705 Video Format <code>video_format</code> \"REMUX\", \"HDTV\" \u27051 \u2757 \u2757 \u27051 <p>1 Designed for TRaSH Guides filename naming scheme 2 Requires Plex Pass or TRaSH Guides filename naming scheme 3 Requires Template Variables to function</p>"},{"location":"defaults/overlay_variables/","title":"Shared Overlay Template Variables","text":"<p>There are some <code>template_variables</code> that all the PMM Defaults expect <code>franchise</code> can use to manipulate the file from the default settings which are provided. </p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Below are the available variables which can be used to customize the file.</p> Variable Description &amp; Values <code>use_&lt;&lt;key&gt;&gt;</code>1 Description: Turns off individual Overlays in a Defaults file.Values: <code>false</code> to turn off the overlay <code>file</code> Description: Controls the images associated with all the Overlays to a local file.Values: Filepath to Overlay Image <code>file_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the image associated with this key's Overlay to a local file.Values: Filepath to Overlay Image <code>url</code> Description: Controls the images associated with all the Overlays to a url.Values: URL to Overlay Image <code>url_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the image associated with this key's Overlay to a url.Values: URL to Overlay Image <code>git</code> Description: Controls the images associated with all the Overlays to the git repo.Values: Git Path to Overlay Image <code>git_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the image associated with this key's Overlay to the git repo.Values: Git Path to Overlay Image <code>repo</code> Description: Controls the images associated with all the Overlays to a custom repo.Values: Repo Path to Overlay Image <code>repo_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the image associated with this key's Overlay to a custom repo.Values: Repo Path to Overlay Image <code>horizontal_offset</code> Description: Controls the Horizontal Offset of this overlay. Can be a %.Values: Number 0 or greater or 0%-100% <code>horizontal_align</code> Description: Controls the Horizontal Alignment of the overlay.Values: <code>left</code>, <code>center</code>, or <code>right</code> <code>vertical_offset</code> Description: Controls the Vertical Offset of this overlay. Can be a %.Values: Number 0 or greater or 0%-100% <code>vertical_align</code> Description: Controls the Vertical Alignment of the overlay.Values: <code>top</code>, <code>center</code>, or <code>bottom</code> <code>back_color</code> Description: Controls the Backdrop Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>back_width</code> Description: Controls the Backdrop Width for the Text Overlay. If <code>back_width</code> is not specified the Backdrop Sizes to the textValues: Any Number greater then 0 <code>back_height</code> Description: Controls the Backdrop Height for the Text Overlay. If <code>back_height</code> is not specified the Backdrop Sizes to the textValues: Any Number greater then 0 <code>back_align</code> Description: Controls the Alignment for the Text Overlay inside the backdrop. If <code>back_align</code> is not specified the Backdrop Centers the text.Values: <code>left</code>, <code>right</code>, <code>center</code>, <code>top</code>, or <code>bottom</code> <code>back_padding</code> Description: Controls the Backdrop Padding for the Text Overlay.Values: Any Number greater then 0 <code>back_radius</code> Description: Controls the Backdrop Radius for the Text Overlay.Values: Any Number greater then 0 <code>back_line_color</code> Description: Controls the Backdrop Line Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>back_line_width</code> Description: Controls the Backdrop Line Width for the Text Overlay.Values: Any Number greater then 0 <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol>"},{"location":"defaults/overlays/","title":"Overlay Defaults","text":"<p>There are many Default Overlay Files built into PMM itself which offer an easy-to-use and customizable set of Overlays that the user can achieve without having to worry about creating the files that makes the overlays possible.</p> <p>This is the simplest way to create Overlays using Plex Meta Manager.</p>"},{"location":"defaults/overlays/#overlays","title":"Overlays","text":"<p>These files apply overlays and can generally be used on both Movie and Show library-types, and often works at the season and episode-level too.</p> <p>It should be noted that when an overlay has \u2757 for a season or episode, it normally means that whilst the overlay can technically be applied at the level, it wasn't designed for this purpose. For example, a show's season cannot have a resolution since it is not a video file, and an episode cannot have a commonsense age-rating since only Movies and Shows are rated by CommonSense. </p> <p>In the scenario where there is missing data such as age ratings for episodes, then generally the highest-level data available will be applied at the lower level (i.e. a Show's CommonSense age rating would apply to all episodes).</p> <p>These overlays are applied by calling the below paths into the <code>overlay_path</code> section of your config.yml</p>"},{"location":"defaults/overlays/#overlay-files","title":"Overlay Files","text":"Default path Example Overlays Movies Shows Seasons Episodes Audio Codec <code>audio_codec</code> Dolby Atmos logo, DTS logo \u27051 \u27051 \u27051 \u27051 CommonSense Age Rating <code>commonsense</code> \"3+\", \"16+\" \u2705 \u2705 \u2757 \u2757 Direct Play <code>direct_play</code> \"Direct Play Only\" \u2705 \u2757 \u2757 \u2705 Episode Info <code>episode_info</code> \"S01E01\", \"S02E09\" \u274c \u274c \u274c \u2705 FlixPatrol <code>flixpatrol</code> \"Streaming service logo with words \"TOP\" \u2705 \u2705 \u274c \u274c Language Count <code>language_count</code> Dual-Audio, Multi-Audio, Dual-Subtitle, Multi-Subtitle \u2705 \u2705 \u2705 \u2705 Languages <code>languages</code> Flags Based on the Audio/Subtitles a file has \u2705 \u2705 \u2705 \u2705 Mediastinger <code>mediastinger</code> Mediastinger Logo for After/During Credit Scenes \u2705 \u2705 \u274c \u274c Ratings <code>ratings</code> IMDb Audience Rating, Metacritic Critic Rating \u27053 \u27053 \u274c \u27053 Resolution/Editions <code>resolution</code> 4K Dolby Vision logo, 720P logo, \"Director's Cut\", \"Criterion Collection\" \u27052 \u27052 \u274c \u27052 Ribbon <code>ribbon</code> IMDb Top 250 Ribbon, RT Fresh Ribbon \u2705 \u2705 \u274c \u274c Runtimes <code>runtimes</code> \"Runtime: 1h 30m\" \u2705 \u2705 \u274c \u2705 Status <code>status</code> Airing, Returning, Canceled, Ended \u274c \u2705 \u274c \u274c Streaming <code>streaming</code> Netflix logo, Hulu logo \u2705 \u2705 \u274c \u274c Versions <code>versions</code> Multiple Versions logo \u2705 \u2705 \u2705 \u2705 Video Format <code>video_format</code> \"REMUX\", \"HDTV\" \u27051 \u2757 \u2757 \u27051 <p>1 Designed for TRaSH Guides filename naming scheme 2 Requires Plex Pass or TRaSH Guides filename naming scheme 3 Requires Template Variables to function</p>"},{"location":"defaults/overlays/#configurations","title":"Configurations","text":"<p>To run a default pmm Overlay file you can simply add it to your <code>overlay_path</code> using <code>pmm</code> like so:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: ribbon\n- pmm: ratings\n</code></pre>"},{"location":"defaults/overlays/#example-poster-overlays","title":"Example Poster Overlays","text":"Click to expand sample config.yml Movies overlays section:  **Note: This uses fonts not packaged with PMM. See [bullmoose20's Configs](https://github.com/meisnate12/Plex-Meta-Manager-Configs/tree/master/bullmoose20)**  <pre><code>libraries:\nMovies:\noverlay_path:\n- remove_overlays: false\n- reapply_overlay: true\n- pmm: resolution                                                    # 1, 4\n- pmm: audio_codec                                                   # 2\n- pmm: mediastinger                                                  # 3\n- pmm: ratings                                                       # 5, 6, 7\ntemplate_variables:\nrating1: user                                                    # 5 as this is user and mass_user_rating_update: mdb_tomatoes\nrating1_image: rt_tomato                                         # 5 as this is user and mass_user_rating_update: mdb_tomatoes\nrating1_font: config/custom_fonts/Adlib.ttf                      # 5 local font accessible to PMM\nrating1_font_size: 63                                            # 5 adjusted font size to fit rating\n\nrating2: critic                                                  # 6 as this is critic and mass_critic_rating_update: imdb\nrating2_image: imdb                                              # 6 as this is critic and mass_critic_rating_update: imdb\nrating2_font: config/custom_fonts/Impact.ttf                     # 6 local font accessible to PMM\nrating2_font_size: 70                                            # 6 adjusted font size to fit rating\n\nrating3: audience                                                # 7 as this is audience and mass_audience_rating_update: tmdb\nrating3_image: tmdb                                              # 7 as this is audience and mass_audience_rating_update: tmdb\nrating3_font: config/custom_fonts/Avenir_95_Black.ttf            # 7 local font accessible to PMM\nrating3_font_size: 70                                            # 7 adjusted font size to fit rating\n\nhorizontal_position: right                                       # the set of ratings is on the right of the poster\n- pmm: streaming                                                     # 8\n- pmm: video_format                                                  # 9\n- pmm: language_count                                                # 10\n- pmm: ribbon                                                        # 11, 12 Bottom right sash is used by more than one overlay so a weight for priority can be applied \noperations:\nmass_user_rating_update: mdb_tomatoes                              # 5 This operation will update the user rating in plex with Rotten Tomatoes ratings information gathered through mdblist.com (mdblist config required)\nmass_critic_rating_update: imdb                                    # 6 This operation will update the critic rating in plex with IMDb ratings information\nmass_audience_rating_update: tmdb                                  # 7 This operation will update the audience rating in plex with TMDb ratings information\n</code></pre>"},{"location":"defaults/overlays/#example-tv-shows-show-overlays","title":"Example TV Shows - Show Overlays","text":"Click to expand sample config.yml TV Shows overlays section for the Show Poster:  **Note: This uses fonts not packaged with PMM. See [bullmoose20's Configs](https://github.com/meisnate12/Plex-Meta-Manager-Configs/tree/master/bullmoose20)**  <pre><code>libraries:\nTV Shows:\noverlay_path:\n- remove_overlays: false\n- reapply_overlay: true\n- pmm: resolution                                                    # 1\n- pmm: audio_codec                                                   # 2\n- pmm: mediastinger                                                  # 3\n- pmm: ratings                                                       # 4, 5, 6\ntemplate_variables:           rating1: user                                                    # 4 as this is user and mass_user_rating_update: mdb_tomatoes\nrating1_image: rt_tomato                                         # 4 as this is user and mass_user_rating_update: mdb_tomatoes\nrating1_font: config/custom_fonts/Adlib.ttf                      # 4 local font accessible to PMM\nrating1_font_size: 63                                            # 4 adjusted font size to fit rating\n\nrating2: critic                                                  # 5 as this is critic and mass_critic_rating_update: imdb\nrating2_image: imdb                                              # 5 as this is critic and mass_critic_rating_update: imdb\nrating2_font: config/custom_fonts/Impact.ttf                     # 5 local font accessible to PMM\nrating2_font_size: 70                                            # 5 adjusted font size to fit rating\n\nrating3: audience                                                # 6 as this is audience and mass_audience_rating_update: tmdb\nrating3_image: tmdb                                              # 6 as this is audience and mass_audience_rating_update: tmdb\nrating3_font: config/custom_fonts/Avenir_95_Black.ttf            # 6 local font accessible to PMM\nrating3_font_size: 70                                            # 6 adjusted font size to fit rating\n\nhorizontal_position: right                                       # the set of ratings is on the right of the poster\n- pmm: streaming                                                     # 7\n- pmm: video_format                                                  # 8\n- pmm: ribbon                                                        # 10, 11 Bottom right sash is used by more than one overlay so a weight for priority can be applied \noperations:\nmass_user_rating_update: mdb_tomatoes                              # 4 This operation will update the user rating in plex with Rotten Tomatoes ratings information gathered through mdblist.com (mdblist config required)\nmass_critic_rating_update: imdb                                    # 5 This operation will update the critic rating in plex with IMDb ratings information\nmass_audience_rating_update: tmdb                                  # 6 This operation will update the audience rating in plex with TMDb ratings information\n</code></pre>"},{"location":"defaults/overlays/#example-tv-shows-season-overlays","title":"Example TV Shows - Season Overlays","text":"Click to expand sample config.yml TV Shows overlays section for the Season Poster: <pre><code>libraries:\nTV Shows:\noverlay_path:\n- remove_overlays: false\n- reapply_overlay: true\n- pmm: resolution                                                    # 1\ntemplate_variables:\noverlay_level: season\n- pmm: audio_codec                                                   # 2\ntemplate_variables:\noverlay_level: season\n- pmm: video_format                                                  # 3\ntemplate_variables:\noverlay_level: season\n</code></pre>"},{"location":"defaults/overlays/#example-tv-shows-episode-overlays","title":"Example TV Shows - Episode Overlays","text":"Click to expand sample config.yml TV Shows overlays section for the Episode Poster:  **Note: This uses fonts not packaged with PMM. See [bullmoose20's Configs](https://github.com/meisnate12/Plex-Meta-Manager-Configs/tree/master/bullmoose20)**  <pre><code>libraries:\nTV Shows:\noverlay_path:\n- remove_overlays: false\n- reapply_overlay: true\n- pmm: resolution                                                    # 1\ntemplate_variables:\noverlay_level: episode\n- pmm: audio_codec                                                   # 2\ntemplate_variables:\noverlay_level: episode\n- pmm: ratings                                                       # 3, 4\ntemplate_variables:\n\nrating1: critic                                                  # 3 as this is critic and mass_critic_rating_update: imdb\nrating1_image: imdb                                              # 3 as this is critic and mass_critic_rating_update: imdb\nrating1_font: config/custom_fonts/Impact.ttf                     # 3 local font accessible to PMM\nrating1_font_size: 70                                            # 3 adjusted font size to fit rating\n\nrating2: audience                                                # 4 as this is audience and mass_audience_rating_update: tmdb\nrating2_image: tmdb                                              # 4 as this is audience and mass_audience_rating_update: tmdb\nrating2_font: config/custom_fonts/Avenir_95_Black.ttf            # 4 local font accessible to PMM\nrating2_font_size: 70                                            # 4 adjusted font size to fit rating\n\nhorizontal_position: right                                       # the set of ratings is on the right of the poster\noverlay_level: episode\n- pmm: video_format                                                  # 5\ntemplate_variables:\noverlay_level: episode\n- pmm: episode_info                                                  # 6\ntemplate_variables:\noverlay_level: episode\n- pmm: runtimes                                                      # 7\ntemplate_variables:\noverlay_level: episode\n\noperations:\nmass_episode_critic_rating_update: imdb                            # 3 This operation will update the episodes critic rating in plex with IMDb ratings information\nmass_episode_audience_rating_update: tmdb                          # 4 This operation will update the episodes audience rating in plex with TMDb ratings information\n</code></pre>"},{"location":"defaults/overlays/#rating-overlays","title":"Rating Overlays","text":"<p>By default, for Movies in Plex, the <code>Ratings Source</code> dropdown (<code>#3</code>) below, can come from Rotten Tomatoes (and includes Critic Ratings and Audience Ratings) or IMDb (Audience Ratings). This only changes the tiny icons displayed and where Plex will retrieve the ratings from upon initial scan and import of the media metadata.</p> <p>Plex Meta Manager can insert up to three ratings of your choice into the three spots regardless of what you choose in the <code>Advanced</code> tab of that Plex library</p> <p></p> <p>Plex has three available spots in the Plex DB to store ratings and thus Plex Meta Manager can be used to insert ratings sources of your choice into those spots. They are known as the User Rating (<code>#1</code>), Critic Rating (<code>#2</code>), and Audience Rating (<code>#3</code>). </p> <p>Note that the little icons cannot be changed and that the numbers next to the little icons are reflected in the poster ratings overlay</p> <p></p> <p>To be able to insert the ratings you want, Plex Meta Manager operations need to be defined. In this example below, User ratings (<code>#1</code>) are being filled with Rotten Tomatoes Critics Ratings. Critic ratings (<code>#2</code>) are filled with IMDb, and Audience ratings (<code>#3</code>) are filled with TMDb.</p> <p>mass_*_rating_update sources can be found here: operations</p> <p></p> <p>Finally, to show the ratings on the poster, the following was added to the <code>overlay_path</code> section in the <code>config.yml</code> file to post Rotten Tomatoes Critics Ratings in (<code>#1</code>), IMDb ratings in (<code>#2</code>), and TMDb ratings in (<code>#3</code>)</p> <p></p>"},{"location":"defaults/overlays/#customizing-configs","title":"Customizing Configs","text":"<p>Configs can be customized using the <code>template_variables</code> attribute when calling the file. These <code>template_variables</code> will be given to every template call in the file which allows them to affect how that file runs.</p> <p>This example changes the ratings overlay to work on episodes.</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: ratings\ntemplate_variables:\noverlay_level: episode\n</code></pre> <p>Each file has a page on the wiki showing the available <code>template_variables</code> for each file. For example the default <code>pmm: ratings</code> has a page here.</p> <p>In addition to the defined <code>template_variables</code> almost all default Overlay files have access to the Shared Variables.</p>"},{"location":"defaults/overlays/#examples","title":"Examples","text":""},{"location":"defaults/overlays/#example-configuration-file","title":"Example Configuration File","text":"Click to expand sample config.yml file <pre><code>libraries:\nMovies:                                           # Must match a library name in your Plex\nreport_path: config/missing/Movies_missing.yml\ntemplate_variables:\nsep_style: purple                               # use the purple separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt8579674                # 1917 (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: studio                                   # DreamWorks Studios, Lucasfilm Ltd, etc.\n- pmm: seasonal                                 # Christmas, Halloween, etc.\ntemplate_variables:                           # Disable any US-specific seasonal collections\nschedule_independence: never\nschedule_thanksgiving: never\nschedule_memorial: never\nschedule_labor: never\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\n- pmm: universe                                 # Marvel Cinematic Universe, Wizarding World, etc.\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. style: standard/compact. compact is default\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc.\n- pmm: ribbon                                   # Used for ribbon in bottom right\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\n\nTV Shows:                                         # Must match a library name in your Plex\nreport_path: config/missing/TV_missing.yml\ntemplate_variables:\nsep_style: plum                               # use the plum separators globally for this library\ncollection_mode: hide                         # hide the collections within the \"library\" tab in Plex.\nplaceholder_imdb_id: tt1190634                # The Boys (2019) placeholder id for the separators, avoids a plex bug.\nmetadata_path:\n- pmm: separator_award                          # An \"index card\"\n- pmm: bafta                                    # BAFTA Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: golden                                   # Golden Globes Awards\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: oscars                                   # The Oscars\ntemplate_variables:                           # Show collections from current_year-10 onwards.\ndata:\nstarting: current_year-10\nending: current_year\n- pmm: separator_chart                          # An \"index card\"\n- pmm: basic                                    # Some basic chart collections\n- pmm: tmdb                                     # TMDb Charts (Popular, Trending, etc.)\n- pmm: audio_language                           # English, French, Arabic, German, etc. audio language \n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. with the standards style \ntemplate_variables:\nstyle: standards\n- pmm: network                                  # ABC, CBC, NBC, FOX, etc.\n- pmm: streaming                                # Streaming on Disney+, Netflix, etc.\ntemplate_variables:\noriginals_only: true                        # Only create collections for Original Content (i.e. Netflix Originals)\noverlay_path:\n- remove_overlays: false                        # Set to true if you want to remove overlays\n# - reapply_overlay: false                        # If you are doing a lot of testing and changes like me, keep this to true to always reapply overlays - can cause image bloat\n# - reset_overlays: tmdb                          # if you want to reset the poster to default poster from tmdb - can cause image bloat\n- pmm: audio_codec                              # FLAC, DTS-X, TrueHD, etc. on show and episode\n- pmm: audio_codec\ntemplate_variables:\noverlay_level: episode\n- pmm: episode_info                             # S##E## information in bottom right on episode\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution                               # 4K HDR, 1080P FHD, etc. on show, episode, and season\n- pmm: resolution\ntemplate_variables:\noverlay_level: episode\n- pmm: resolution\ntemplate_variables:\noverlay_level: season\n- pmm: ribbon                                   # Used for ribbon in bottom right on show\n- pmm: status                                   # Airing, Returning, Ended, Canceled on show\n- pmm: versions                                 # Will show duplicates for that media item on show and episode\n- pmm: versions                                 template_variables:\noverlay_level: episode\n- pmm: video_format                             # Remux, DVD, Blu-Ray, etc. in bottom left on show, episode, and season\n- pmm: video_format\ntemplate_variables:\noverlay_level: episode\nsettings:\nasset_directory:\n- config/assets\n\noperations:\nsplit_duplicates: false\nassets_for_all: false\nplaylist_files:\n- pmm: playlist\ntemplate_variables:\nlibraries: Movies, TV Shows                     # Must match the names of your libraries in Plex.\n</code></pre>"},{"location":"defaults/people/","title":"People","text":""},{"location":"defaults/people/#poster-styles","title":"Poster Styles","text":"<p>This Default can use the <code>style</code> template variable to easily change the posters styles.</p>"},{"location":"defaults/people/#black-white-style-default","title":"Black &amp; White Style (Default)","text":""},{"location":"defaults/people/#rainier-style","title":"Rainier Style","text":""},{"location":"defaults/people/#signature-style","title":"Signature Style","text":""},{"location":"defaults/people/#diiivoy-style","title":"Diiivoy Style","text":""},{"location":"defaults/people/#diiivoy-color-style","title":"Diiivoy Color Style","text":""},{"location":"defaults/playlist/","title":"Playlists","text":"<p>The <code>playlist</code> Default Metadata File is used to create playlists based on popular Movie/TV Show universes (such as the Marvel Cinematic Universe or Star Trek).</p> <p>This Default file requires Trakt Authentication</p> <p>This file assumes that you have libraries named <code>Movies</code> and <code>TV Shows</code>. If you do not have these libraries or want to use alternative/additional libraries, use the <code>libraries</code> template variable which is outlined in the Template Variables table. </p>"},{"location":"defaults/playlist/#playlists_1","title":"Playlists","text":"Playlist Key Description <code>Arrowverse (Timeline Order)</code> <code>arrow</code> Playlist of Movies and Episodes in the Arrowverse (Timeline Order) <code>DC Animated Universe (Timeline Order)</code> <code>dcau</code> Playlist of Movies and Episodes in the DC Animated Universe (Timeline Order) <code>Dragon Ball (Timeline Order)</code> <code>dragonball</code> Playlist of Movies and Episodes in the Dragon Ball (Timeline Order) <code>Marvel Cinematic Universe (Timeline Order)</code> <code>mcu</code> Playlist of Movies and Episodes in the Marvel Cinematic Universe (Timeline Order) <code>Pok\u00e9mon (Timeline Order)</code> <code>pokemon</code> Playlist of Movies and Episodes in the Pok\u00e9mon (Timeline Order) <code>Star Trek (Timeline Order)</code> <code>startrek</code> Playlist of Movies and Episodes in the Star Trek (Timeline Order) <code>Star Wars (Timeline Order)</code> <code>starwars</code> Playlist of Movies and Episodes in the Star Wars (Timeline Order) <code>Star Wars The Clone Wars (Timeline Order)</code> <code>clonewars</code> Playlist of Movies and Episodes in the Star Wars The Clone Wars (Timeline Order) <code>X-Men (Timeline Order)</code> <code>xmen</code> Playlist of Movies and Episodes in the X-Men (Timeline Order)"},{"location":"defaults/playlist/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>playlist_files:\n- pmm: playlist\n</code></pre>"},{"location":"defaults/playlist/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Shared Variables are NOT available to this default file.</p> Variable Description &amp; Values <code>use_&lt;&lt;key&gt;&gt;</code>1 Description: Turns off individual Playlists in a Defaults file.Values: <code>false</code> to turn off the playlist <code>name_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the name of the specified key's playlist.Values: New Playlist Name <code>summary_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary of the specified key's playlist.Values: New Playlist Summary <code>libraries</code> Description: Sets the names of the libraries to use for the Playlists.Default: <code>Movies, TV Shows</code>Values: Comma-separated string or list of library mapping names defined in the <code>libraries</code> attribute in the base of your Configuration File. <code>sync_to_user</code> Description: Sets the users to sync all playlists to.Default: <code>playlist_sync_to_user</code> Global Setting ValueValues: Comma-separated string or list of user names. <code>sync_to_user_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the users to sync the specified key's playlist to.Default: <code>sync_to_user</code> ValueValues: Comma-separated string or list of user names. <code>exclude_user</code> Description: Sets the users to exclude from sync for all playlists.Default: <code>playlist_sync_to_user</code> Global Setting ValueValues: Comma-separated string or list of user names. <code>exclude_user_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the users to exclude from sync the specified key's playlist.Default: <code>sync_to_user</code> ValueValues: Comma-separated string or list of user names. <code>trakt_list_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the Movies in the Trakt List to the specified key's playlist. Overrides the default trakt_list for that playlist if used.Values: List of Trakt List URLs <code>delete_playlist</code> Description: Will delete all playlists for the users defined by sync_to_users.Values: <code>true</code> or <code>false</code> <code>delete_playlist_&lt;&lt;key&gt;&gt;</code>1 Description: Will delete the specified key's playlists for the users defined by sync_to_users.Values: <code>true</code> or <code>false</code> <code>ignore_ids</code> Description: Set a list or comma-separated string of TMDb/TVDb IDs to ignore in all playlists.Values: List or comma-separated string of TMDb/TVDb IDs <code>ignore_imdb_ids</code> Description: Set a list or comma-separated string of IMDb IDs to ignore in all playlists.Values: List or comma-separated string of IMDb IDs <code>url_poster_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the poster url of the specified key's playlist.Values: URL directly to the Image <code>radarr_add_missing</code> Description: Override Radarr <code>add_missing</code> attribute for all playlists in a Defaults file.Values: <code>true</code> or <code>false</code> <code>radarr_add_missing_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>add_missing</code> attribute of the specified key's playlist.Default: <code>radarr_add_missing</code>Values: <code>true</code> or <code>false</code> <code>radarr_folder</code> Description: Override Radarr <code>root_folder_path</code> attribute for all playlists in a Defaults file.Values: Folder Path <code>radarr_folder_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>root_folder_path</code> attribute of the specified key's playlist.Default: <code>radarr_folder</code>Values: Folder Path <code>radarr_tag</code> Description: Override Radarr <code>tag</code> attribute for all playlists in a Defaults file.Values: List or comma-separated string of tags <code>radarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>tag</code> attribute of the specified key's playlist.Default: <code>radarr_tag</code>Values: List or comma-separated string of tags <code>item_radarr_tag</code> Description: Used to append a tag in Radarr for every movie found by the builders that's in Radarr for all playlists in a Defaults file.Values: List or comma-separated string of tags <code>item_radarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Used to append a tag in Radarr for every movie found by the builders that's in Radarr of the specified key's playlist.Default: <code>item_radarr_tag</code>Values: List or comma-separated string of tags <code>sonarr_add_missing</code> Description: Override Sonarr <code>add_missing</code> attribute for all playlists in a Defaults file.Values: <code>true</code> or <code>false</code> <code>sonarr_add_missing_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>add_missing</code> attribute of the specified key's playlist.Default: <code>sonarr_add_missing</code>Values: <code>true</code> or <code>false</code> <code>sonarr_folder</code> Description: Override Sonarr <code>root_folder_path</code> attribute for all playlists in a Defaults file.Values: Folder Path <code>sonarr_folder_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>root_folder_path</code> attribute of the specified key's playlist.Default: <code>sonarr_folder</code>Values: Folder Path <code>sonarr_tag</code> Description: Override Sonarr <code>tag</code> attribute for all playlists in a Defaults file.Values: List or comma-separated string of tags <code>sonarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>tag</code> attribute of the specified key's playlist.Default: <code>sonarr_tag</code>Values: List or comma-separated string of tags <code>item_sonarr_tag</code> Description: Used to append a tag in Sonarr for every series found by the builders that's in Sonarr for all playlists in a Defaults file.Values: List or comma-separated string of tags <code>item_sonarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Used to append a tag in Sonarr for every series found by the builders that's in Sonarr of the specified key's playlist.Default: <code>item_sonarr_tag</code>Values: List or comma-separated string of tags <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>playlist_files:\n- pmm: playlist\ntemplate_variables:\nradarr_add_missing: true\n</code></pre>"},{"location":"defaults/playlist/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/playlist/#default-trakt_list","title":"Default <code>trakt_list</code>","text":"<p>The below Trakt lists are used to populate the playlists associated with the keys.</p> <pre><code>trakt_list:\narrow: https://trakt.tv/users/donxy/lists/arrowverse\ndcau: https://trakt.tv/users/donxy/lists/dc-animated-series-universe\ndragonball: https://trakt.tv/users/qamazi/lists/dragon-ball-binged-out\nmcu: https://trakt.tv/users/donxy/lists/marvel-cinematic-universe\npokemon: https://trakt.tv/users/munch54/lists/pokemon-watching-order\nstartrek: https://trakt.tv/users/goodevilgenius/lists/star-trek-chronology\nstarwars: https://trakt.tv/users/ruben_vw_/lists/star-wars-canon-timeline\nclonewars: https://trakt.tv/users/tomfin46/lists/star-wars-the-clone-wars-chronological-episode-order\nxmen: https://trakt.tv/users/heyitsbea/lists/x-men\n</code></pre>"},{"location":"defaults/separators/","title":"Separators Default Metadata Files","text":"<p>Separators are a special form of collections which are used similar to index cards in a library, they help to \"split up\" collections by identifying categories (such as \"Studio Collections\" and \"Holiday Collections\").</p> <p>These are empty collections which do not contain any movies/shows themselves, but highlight that the collections which follow it are of a certain category.</p> <p>Below is an example of a separator, which can be seen surrounded by a red square.</p> <p></p>"},{"location":"defaults/separators/#separator-files","title":"Separator Files","text":"<p>These are all the files that contain a separator </p> Collection Name Default File Seasonal Collections <code>seasonal</code> Chart Collections <code>separator_chart</code> Universe Collections <code>universe</code> Streaming Collections <code>streaming</code> Network Collections <code>network</code> Genre Collections <code>genre</code> Studio Collections <code>studio</code> Country Collections <code>country</code> Audio Language Collections <code>audio_language</code> Subtitle Language Collections <code>subtitle_language</code> Decade Collections <code>decade</code> Year Collections <code>year</code> Ratings Collections <code>content_rating*</code> Resolution Collections <code>resolution*</code> Award Collections <code>separator_award</code> Actors Collections <code>actor</code> Directors Collections <code>director</code> Producers Collections <code>producer</code> Writers Collections <code>writer</code> Based On... Collections <code>based</code>"},{"location":"defaults/separators/#shared-separator-variables","title":"Shared Separator Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Shared Variables are NOT available to separator collections in any default file.</p> Variable Description &amp; Values <code>use_separator</code> Description: Turn the Separator Collection off.Values: <code>false</code> to turn of the collection <code>sep_style</code> Description: Choose the Separator Style.Default: <code>orig</code>Values: <code>amethyst</code>, <code>aqua</code>, <code>blue</code>, <code>forest</code>, <code>fuchsia</code>, <code>gold</code>, <code>gray</code>, <code>green</code>, <code>navy</code>, <code>ocean</code>, <code>olive</code>, <code>orchid</code>, <code>orig</code>, <code>pink</code>, <code>plum</code>, <code>purple</code>, <code>red</code>, <code>rust</code>, <code>salmon</code>, <code>sand</code>, <code>stb</code>, or <code>tan</code> <code>sort_prefix</code> Description: Changes the prefix of the sort title.Default: <code>!</code>Values: Any String <code>sort_title</code> Description: Changes the sort title of all collections.Default: <code>&lt;&lt;sort_prefix&gt;&gt;&lt;&lt;collection_section&gt;&gt;_!&lt;&lt;title&gt;&gt;</code>Values: Any String <code>placeholder_tmdb_movie</code> Description: Add a placeholder Movie to the Separator.Values: TMDb Movie ID <code>placeholder_tvdb_show</code> Description: Add a placeholder Show to the Separator.Values: TVDb Show ID <code>placeholder_imdb_id</code> Description: Add a placeholder Movie/Show to the Separator.Values: IMDb ID <code>name_separator</code> Description: Changes the name of the specified key's collection.Values: New Collection Name <code>summary_separator</code> Description: Changes the summary of the specified key's collection.Values: New Collection Summary <code>collection_section</code> Description: Changes the sort order of the collection sections against other default collection sections.Values: Any number <code>collection_mode</code> Description: Controls the collection mode of all collections in a Defaults file.Values:<code>default</code>Library default<code>hide</code>Hide Collection<code>hide_items</code>Hide Items in this Collection<code>show_items</code>Show this Collection and its Items <code>url_poster_separator</code> Description: Changes the poster url of the specified key's collection.Values: URL directly to the Image"},{"location":"defaults/separators/#use-separators","title":"Use Separators","text":"<p>Separators are enabled by default, but can be disabled/enabled per-file and per-library.</p> <p>An example of disabling separators at the library-level can be seen here</p> <pre><code>libraries:\nMovies:\ntemplate_variables:\nuse_separator: false\n</code></pre> <p>And at the file-level</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: studio\ntemplate_variables:\nuse_separator: false\n</code></pre>"},{"location":"defaults/separators/#separator-styles","title":"Separator Styles","text":"<p>Multiple styles are available for Separators, to match Plex's \"categories\" feature.</p> <p>The available styles available are:</p> Style Value Original <code>orig</code> Amethyst <code>amethyst</code> Aqua <code>aqua</code> Blue <code>blue</code> Forest <code>green</code> Fuchsia <code>fuchsia</code> Gold <code>gold</code> Gray <code>gray</code> Green <code>green</code> Navy <code>navy</code> Ocean <code>ocean</code> Olive <code>olive</code> Orchid <code>orchid</code> Pink <code>pink</code> Plum <code>plum</code> Purple <code>purple</code> Red <code>red</code> Rust <code>rust</code> Salmon <code>salmon</code> Sand <code>sand</code> Brown <code>stb</code> Tan <code>tan</code> <p>This image shows an example separator in each of the above styles</p> <p></p> <p>An example of changing the separator style at the library-level can be seen here</p> <pre><code>libraries:\nMovies:\ntemplate_variables:\nsep_style: red\n</code></pre> <p>And at the file-level</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: studio\ntemplate_variables:\nsep_style: stb\n</code></pre>"},{"location":"defaults/award/bafta/","title":"British Academy of Film and Television Arts Awards Collections","text":"<p>The <code>bafta</code> Default Metadata File is used to create collections based on the British Academy of Film and Television Arts Awards.</p> <p></p>"},{"location":"defaults/award/bafta/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p> <p>Requirements: Trakt Authentication</p>"},{"location":"defaults/award/bafta/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>BAFTA Best Films</code> <code>best</code> Collection of British Academy of Film and Television Arts Best Film Award Winners. <code>BAFTA &lt;&lt;year&gt;&gt;</code>Example: <code>BAFTA 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of British Academy of Film and Television Arts Award Winners for the given year."},{"location":"defaults/award/bafta/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: bafta\n</code></pre>"},{"location":"defaults/award/bafta/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn of the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-5Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>BAFTA &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; BAFTA Awards.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: bafta\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre>"},{"location":"defaults/award/cannes/","title":"Cannes Awards Collections","text":"<p>The <code>cannes</code> Default Metadata File is used to create collections based on the Cannes Film Awards.</p> <p></p>"},{"location":"defaults/award/cannes/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p> <p>Requirements: Trakt Authentication</p>"},{"location":"defaults/award/cannes/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Cannes Golden Palm Winners</code> <code>palm</code> Collection of Cannes Golden Palm Award Winners. <code>Cannes &lt;&lt;year&gt;&gt;</code>Example: <code>Cannes 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of Cannes Film Award Winners for the given year."},{"location":"defaults/award/cannes/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: cannes\n</code></pre>"},{"location":"defaults/award/cannes/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn of the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-5Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Cannes &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; Cannes Awards.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: cannes\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre>"},{"location":"defaults/award/choice/","title":"Critics Choice Awards Collections","text":"<p>The <code>choice</code> Default Metadata File is used to create collections based on the Critics Choice Awards.</p> <p></p>"},{"location":"defaults/award/choice/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Requirements: Trakt Authentication</p>"},{"location":"defaults/award/choice/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Critics Choice Awards &lt;&lt;year&gt;&gt;</code>Example: <code>Critics Choice Awards 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of Critics Choice Award Winners for the given year."},{"location":"defaults/award/choice/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: choice\nTV Shows:\nmetadata_path:\n- pmm: choice\n</code></pre>"},{"location":"defaults/award/choice/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn of the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-5Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Critics Choice &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; Critics Choice Awards.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: choice\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre>"},{"location":"defaults/award/emmy/","title":"Emmy Awards Collections","text":"<p>The <code>emmy</code> Default Metadata File is used to create collections based on the Emmy Awards.</p> <p></p>"},{"location":"defaults/award/emmy/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/award/emmy/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Emmys &lt;&lt;year&gt;&gt;</code>Example: <code>Emmys 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of Emmys Award Winners for the given year."},{"location":"defaults/award/emmy/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: emmy\nTV Shows:\nmetadata_path:\n- pmm: emmy\n</code></pre>"},{"location":"defaults/award/emmy/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn off the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-5Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Emmys &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; Emmy Winners.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: emmy\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre>"},{"location":"defaults/award/golden/","title":"Golden Globes Awards Collections","text":"<p>The <code>golden</code> Default Metadata File is used to create collections based on the Golden Globe Awards.</p> <p></p>"},{"location":"defaults/award/golden/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Recommendations: The <code>Golden Globe Best Motion Pictures</code> Collection only works with Movie Libraries</p>"},{"location":"defaults/award/golden/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Golden Globes Best Picture Winners</code> <code>best_picture</code> Collection of Golden Globe Best Picture Award Winners. <code>Golden Globes Best Director Winners</code> <code>best_director</code> Collection of Golden Globe Best Director Award Winners. <code>Golden Globe &lt;&lt;year&gt;&gt;</code>Example: <code>Golden Globe 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of Golden Globe Award Winners for the given year."},{"location":"defaults/award/golden/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: golden\nTV Shows:\nmetadata_path:\n- pmm: golden\n</code></pre>"},{"location":"defaults/award/golden/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn of the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-5Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Golden Globe &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; Golden Globe Winners.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: golden\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre>"},{"location":"defaults/award/oscars/","title":"Academy Awards (Oscars) Collections","text":"<p>The <code>oscars</code> Default Metadata File is used to create collections based on the Academy Awards (Oscars).</p> <p></p>"},{"location":"defaults/award/oscars/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/award/oscars/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Oscars Best Picture Winners</code> <code>best_picture</code> Collection of Oscars Best Picture Award Winners. <code>Oscars Best Director Winners</code> <code>best_director</code> Collection of Oscars Best Director Award Winners. <code>Oscars Winners &lt;&lt;year&gt;&gt;</code>Example: <code>Oscars Winners 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of Oscars Award Winners for the given year."},{"location":"defaults/award/oscars/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: oscars\n</code></pre>"},{"location":"defaults/award/oscars/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn of the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-6Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_year-1Values: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Oscars Winners &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>Academy Awards (Oscars) Winners for &lt;&lt;key_name&gt;&gt;.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: oscars\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year-1\n</code></pre>"},{"location":"defaults/award/other/","title":"Other Awards Collections","text":"<p>The <code>other_award</code> Default Metadata File is used to  create collections based on numerous other awards.</p> <p></p>"},{"location":"defaults/award/other/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Requirements: Trakt Authentication</p>"},{"location":"defaults/award/other/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Berlinale Golden Bears</code> <code>berlinale</code> Collection of Berlinale Golden Bears Award Winners. <code>C\u00e9sar Best Film Winners</code> <code>cesar</code> Collection of C\u00e9sar Best Film Winners Award Winners. <code>Razzies Golden Raspberry Winners</code> <code>razzie</code> Collection of Razzies Golden Raspberry Winners Award Winners. <code>Venice Golden Lions</code> <code>venice</code> Collection of Venice Golden Lions Award Winners."},{"location":"defaults/award/other/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: other_award\n</code></pre>"},{"location":"defaults/award/other/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below shows an example config.yml with template_variables set away from their defaults:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: other_award\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\n</code></pre>"},{"location":"defaults/award/separator/","title":"Award Separator Collections","text":"<p>The <code>separator_award</code> Default Metadata File is used to create a seperator collection for Awards.</p> <p></p>"},{"location":"defaults/award/separator/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/award/separator/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Award Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections."},{"location":"defaults/award/separator/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: separator_award\nTV Shows:\nmetadata_path:\n- pmm: separator_award\n</code></pre>"},{"location":"defaults/award/separator/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Shared Collection Variables are NOT available to this default file.</p> <p>This file contains only a Separator so all Shared Separator Variables are available.</p> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: separator_award\ntemplate_variables:\nuse_separator: false\nsep_style: purple\n</code></pre>"},{"location":"defaults/award/spirit/","title":"Independent Spirit Awards Collections","text":"<p>The <code>spirit</code> Default Metadata File is used to  create collections based on the Independent Spirit Awards.</p> <p></p>"},{"location":"defaults/award/spirit/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p> <p>Requirements: Trakt Authentication</p>"},{"location":"defaults/award/spirit/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Independent Spirit Awards &lt;&lt;year&gt;&gt;</code>Example: <code>Independent Spirit Awards 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of Independent Spirit Award Winners for the given year."},{"location":"defaults/award/spirit/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: spirit\n</code></pre>"},{"location":"defaults/award/spirit/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn of the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-5Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Independent Spirit Awards &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; Independent Spirit Awards.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: spirit\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre>"},{"location":"defaults/award/sundance/","title":"Sundance Film Festival Awards Collections","text":"<p>The <code>sundance</code> Default Metadata File is used to  create collections based on the Sundance Film Festival Awards.</p> <p></p>"},{"location":"defaults/award/sundance/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p> <p>Requirements: Trakt Authentication</p>"},{"location":"defaults/award/sundance/#collections-section-130","title":"Collections Section 130","text":"Collection Key Description <code>Sundance Grand Jury Winners</code> <code>grand</code> Collection of Sundance Film Festival Grand Jury Award Winners. <code>Sundance Film Festival &lt;&lt;year&gt;&gt;</code>Example: <code>Sundance Film Festival 2022</code> <code>&lt;&lt;year&gt;&gt;</code>Example: <code>2022</code> Collection of Sundance Film Festival Award Winners for the given year."},{"location":"defaults/award/sundance/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: sundance\n</code></pre>"},{"location":"defaults/award/sundance/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>use_year_collections</code> Description: Turn the individual year collections off.Values: <code>false</code> to turn of the collections <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-5Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Sundance Film Festival &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>Sundance Film Festival of &lt;&lt;key_name&gt;&gt;.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: sundance\ntemplate_variables:\ncollection_mode: show_items\ncollection_order: alpha\nradarr_add_missing: true\ndata:\nstarting: current_year-10\nending: current_year\n</code></pre>"},{"location":"defaults/both/actor/","title":"Actor Collections","text":"<p>The <code>actor</code> Default Metadata File is used to dynamically create collections based on the most popular actors/actresses in your library.</p>"},{"location":"defaults/both/actor/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/actor/#collections-section-140","title":"Collections Section 140","text":"Collection Key Description <code>Actors Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;actor_name&gt;&gt;</code>Example: <code>Frank Welker</code> <code>&lt;&lt;actor_name&gt;&gt;</code>Example: <code>Frank Welker</code> Collection of Movies/Shows the actor is top billing in."},{"location":"defaults/both/actor/#poster-styles","title":"Poster Styles","text":"<p>This Default can use the <code>style</code> template variable to easily change the posters styles.</p>"},{"location":"defaults/both/actor/#black-white-style-default","title":"Black &amp; White Style (Default)","text":""},{"location":"defaults/both/actor/#rainier-style","title":"Rainier Style","text":""},{"location":"defaults/both/actor/#signature-style","title":"Signature Style","text":""},{"location":"defaults/both/actor/#diiivoy-style","title":"Diiivoy Style","text":""},{"location":"defaults/both/actor/#diiivoy-color-style","title":"Diiivoy Color Style","text":""},{"location":"defaults/both/actor/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: actor\nTV Shows:\nmetadata_path:\n- pmm: actor\n</code></pre>"},{"location":"defaults/both/actor/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>style</code> Description: Controls the visual theme of the collections created.Default: <code>bw</code>Values: <code>bw</code>, <code>rainier</code>, <code>signature</code>, <code>diiivoy</code>, or <code>diiivoycolor</code> <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>depth</code>Controls the depth within the casting credits to search for common actorsDefault: 5Values: Number greater than 0<code>limit</code>Controls the maximum number of collections to createDefault: 25Values: Number greater than 0 <code>include</code> Description: Force these Actors to be included to create a Dynamic Collection.Values: List of Actor Names <code>exclude</code> Description: Exclude these Actors from creating a Dynamic Collection.Values: List of Actor Names <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s with &lt;&lt;key_name&gt;&gt;.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>tmdb_birthday</code> Description: Controls if the Definition is run based on <code>tmdb_person</code>'s Birthday. Has 3 possible attributes <code>this_month</code>, <code>before</code> and <code>after</code>.Values:<code>this_month</code>Run's if Birthday is in current Month<code>true</code>/<code>false</code><code>before</code>Run if X Number of Days before the BirthdayNumber 0 or greater<code>after</code>Run if X Number of Days after the BirthdayNumber 0 or greater <code>tmdb_person_offset_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary tmdb_person_offset for the specific key.Default: <code>0</code>Values: Dictionary of Actor Name as the keys and the tmdb_person_offset as the value. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: actor\ntemplate_variables:\ndata:\ndepth: 10\nlimit: 20\nstyle: diiivoy\nsort_by: title.asc\nuse_separator: false\nsep_style: purple\ntmdb_person_offset_Richard Brooks: 1\n</code></pre>"},{"location":"defaults/both/audio_language/","title":"Audio Language Collections","text":"<p>The <code>audio_language</code> Default Metadata File is used to dynamically create collections based on the audio languages available in your library.</p> <p></p>"},{"location":"defaults/both/audio_language/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/audio_language/#collections-section-090","title":"Collections Section 090","text":"Collection Key Description <code>Audio Language Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Audio Language&gt;&gt; Audio</code>Example: <code>Japanese</code> <code>&lt;&lt;ISO 639-1 Code&gt;&gt;</code>Example: <code>ja</code> Collection of Movies/Shows that have this Audio Language. <code>Other Audio</code> <code>other</code> Collection of Movies/Shows that are less common Languages."},{"location":"defaults/both/audio_language/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: audio_language\nTV Shows:\nmetadata_path:\n- pmm: audio_language\n</code></pre>"},{"location":"defaults/both/audio_language/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include listValues: List of ISO 639-1 codes <code>exclude</code> Description: Exclude these Audio Languages from creating a Dynamic Collection.Values: List of ISO 639-1 codes <code>append_include</code> Description: Appends to the default include listValues: List of ISO 639-1 codes <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; Audio</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s filmed in the &lt;&lt;key_name&gt;&gt; Language.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: audio_language\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: purple\nexclude:\n- fr  # exclude French\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/both/audio_language/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/audio_language/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- ab     # Abkhazian\n- aa     # Afar\n- af     # Afrikaans\n- ak     # Akan\n- sq     # Albanian\n- am     # Amharic\n- ar     # Arabic\n- an     # Aragonese\n- hy     # Armenian\n- as     # Assamese\n- av     # Avaric\n- ae     # Avestan\n- ay     # Aymara\n- az     # Azerbaijani\n- bm     # Bambara\n- ba     # Bashkir\n- eu     # Basque\n- be     # Belarusian\n- bn     # Bengali\n- bi     # Bislama\n- bs     # Bosnian\n- br     # Breton\n- bg     # Bulgarian\n- my     # Burmese\n- ca     # Catalan, Valencian\n- km     # Central Khmer\n- ch     # Chamorro\n- ce     # Chechen\n- ny     # Chichewa, Chewa, Nyanja\n- zh     # Chinese\n- cu     # Church\u00a0Slavic, Old Slavonic, Church Slavonic, Old Bulgarian,\u00a0Old\u00a0Church\u00a0Slavonic\n- cv     # Chuvash\n- kw     # Cornish\n- co     # Corsican\n- cr     # Cree\n- hr     # Croatian\n- cs     # Czech\n- da     # Danish\n- dv     # Divehi, Dhivehi, Maldivian\n- nl     # Dutch,\u00a0Flemish\n- dz     # Dzongkha\n- en     # English\n- eo     # Esperanto\n- et     # Estonian\n- ee     # Ewe\n- fo     # Faroese\n- fj     # Fijian\n- fil    # Filipino\n- fi     # Finnish\n- fr     # French\n- ff     # Fulah\n- gd     # Gaelic, Scottish Gaelic\n- gl     # Galician\n- lg     # Ganda\n- ka     # Georgian\n- de     # German\n- el     # Greek, Modern (1453\u2013)\n- gn     # Guarani\n- gu     # Gujarati\n- ht     # Haitian, Haitian Creole\n- ha     # Hausa\n- he     # Hebrew\n- hz     # Herero\n- hi     # Hindi\n- ho     # Hiri Motu\n- hu     # Hungarian\n- is     # Icelandic\n- io     # Ido\n- ig     # Igbo\n- id     # Indonesian\n- ia     # Interlingua\u00a0(International Auxiliary Language Association)\n- ie     # Interlingue, Occidental\n- iu     # Inuktitut\n- ik     # Inupiaq\n- ga     # Irish\n- it     # Italian\n- ja     # Japanese\n- jv     # Javanese\n- kl     # Kalaallisut, Greenlandic\n- kn     # Kannada\n- kr     # Kanuri\n- ks     # Kashmiri\n- kk     # Kazakh\n- ki     # Kikuyu, Gikuyu\n- rw     # Kinyarwanda\n- ky     # Kirghiz, Kyrgyz\n- kv     # Komi\n- kg     # Kongo\n- ko     # Korean\n- kj     # Kuanyama, Kwanyama\n- ku     # Kurdish\n- lo     # Lao\n- la     # Latin\n- lv     # Latvian\n- li     # Limburgan, Limburger, Limburgish\n- ln     # Lingala\n- lt     # Lithuanian\n- lu     # Luba-Katanga\n- lb     # Luxembourgish, Letzeburgesch\n- mk     # Macedonian\n- mg     # Malagasy\n- ms     # Malay\n- ml     # Malayalam\n- mt     # Maltese\n- gv     # Manx\n- mi     # Maori\n- mr     # Marathi\n- mh     # Marshallese\n- mn     # Mongolian\n- na     # Nauru\n- nv     # Navajo, Navaho\n- ng     # Ndonga\n- ne     # Nepali\n- nd     # North Ndebele\n- se     # Northern Sami\n- no     # Norwegian\n- nb     # Norwegian Bokm\u00e5l\n- nn     # Norwegian Nynorsk\n- oc     # Occitan\n- oj     # Ojibwa\n- or     # Oriya\n- om     # Oromo\n- os     # Ossetian, Ossetic\n- pi     # Pali\n- ps     # Pashto, Pushto\n- fa     # Persian\n- pl     # Polish\n- pt     # Portuguese\n- pa     # Punjabi, Panjabi\n- qu     # Quechua\n- ro     # Romanian,\u00a0Moldavian, Moldovan\n- rm     # Romansh\n- rn     # Rundi\n- ru     # Russian\n- sm     # Samoan\n- sg     # Sango\n- sa     # Sanskrit\n- sc     # Sardinian\n- sr     # Serbian\n- sn     # Shona\n- ii     # Sichuan Yi, Nuosu\n- sd     # Sindhi\n- si     # Sinhala, Sinhalese\n- sk     # Slovak\n- sl     # Slovenian\n- so     # Somali\n- nr     # South Ndebele\n- st     # Southern Sotho\n- es     # Spanish, Castilian\n- su     # Sundanese\n- sw     # Swahili\n- ss     # Swati\n- sv     # Swedish\n- tl     # Tagalog\n- ty     # Tahitian\n- tg     # Tajik\n- ta     # Tamil\n- tt     # Tatar\n- te     # Telugu\n- th     # Thai\n- bo     # Tibetan\n- ti     # Tigrinya\n- to     # Tonga\u00a0(Tonga Islands)\n- ts     # Tsonga\n- tn     # Tswana\n- tr     # Turkish\n- tk     # Turkmen\n- tw     # Twi\n- ug     # Uighur, Uyghur\n- uk     # Ukrainian\n- ur     # Urdu\n- uz     # Uzbek\n- ve     # Venda\n- vi     # Vietnamese\n- vo     # Volap\u00fck\n- wa     # Walloon\n- cy     # Welsh\n- fy     # Western Frisian\n- wo     # Wolof\n- xh     # Xhosa\n- yi     # Yiddish\n- yo     # Yoruba\n- za     # Zhuang, Chuang\n- zu     # Zulu\n</code></pre>"},{"location":"defaults/both/based/","title":"Based On... Collections","text":"<p>The <code>based</code> Default Metadata File is used to create collections with items that are based on or inspired by various media outlets (such as Books or Video Games).</p> <p></p>"},{"location":"defaults/both/based/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/based/#collections-section-085","title":"Collections Section 085","text":"Collection Key Description <code>Based on...  Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>Based on a Book</code> <code>books</code> Collection of Movies/Shows based on or inspired by books <code>Based on a Comic</code> <code>comics</code> Collection of Movies/Shows based on or inspired by comics <code>Based on a True Story</code> <code>true_story</code> Collection of Movies/Shows based on or inspired by true stories <code>Based on a Video Game</code> <code>video_games</code> Collection of Movies/Shows based on or inspired by video games"},{"location":"defaults/both/based/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: based\nTV Shows:\nmetadata_path:\n- pmm: based\n</code></pre>"},{"location":"defaults/both/based/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>exclude</code> Description: Exclude these Media Outlets from creating a Dynamic Collection.Values: List of Media Outlet Keys <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Based on a &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s based on or inspired by &lt;&lt;translated_key_name&gt;&gt;s.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: based\ntemplate_variables:\nuse_separator: false\nsep_style: purple\nuse_comics: false\norder_true_story: 01\nvisible_library_video_games: true\nvisible_home_video_games: true\nvisible_shared_video_games: true\n</code></pre>"},{"location":"defaults/both/collectionless/","title":"Collectionless Collection","text":"<p>The <code>collectionless</code> Default Metadata File is used to create a Collectionless collection to help Show/Hide Movies/Shows properly in your library.</p> <p></p>"},{"location":"defaults/both/collectionless/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Requirements: For this file to work it needs to run last under <code>metadata_path</code> and all other normal collections must use <code>collection_mode: hide_items</code></p>"},{"location":"defaults/both/collectionless/#collection","title":"Collection","text":"Collection Description <code>Collectionless</code> Collectionless collection to help Show/Hide Movies/Shows properly in your library.."},{"location":"defaults/both/collectionless/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\ntemplate_variables:\ncollection_mode: hide_items\nmetadata_path:\n- pmm: collectionless\nTV Shows:\ntemplate_variables:\ncollection_mode: hide_items\nmetadata_path:\n- pmm: collectionless\n</code></pre>"},{"location":"defaults/both/collectionless/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Shared Collection Variables are NOT available to this default file.</p> Variable Description &amp; Values <code>name_collectionless</code> Description: Changes the name of the collection.Values: New Collection Name <code>summary_collectionless</code> Description: Changes the summary of the collection.Values: New Collection Summary <code>sort_title</code> Description: Sets the sort title for the collection.Default: <code>~_Collectionless</code>Values: Any String <code>collection_order</code> Description: Changes the Collection Order for all collections in this file.Default: <code>alpha</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>url_poster</code> Description: Changes the poster url of thecollection.Values: URL directly to the Image <code>exclude</code> Description: Exclude these Collections from being considered for collectionless.Values: List of Collections <code>exclude_prefix</code> Description: Overrides the default exclude_prefix list. Exclude Collections with one of these prefixes from being considered for collectionless.Default: default exclude_prefix listValues: List of Prefixes <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\ntemplate_variables:\ncollection_mode: hide_items\nmetadata_path:\n- pmm: collectionless\ntemplate_variables:\nexclude:\n- Marvel Cinematic Universe\ncollection_order: release\n</code></pre>"},{"location":"defaults/both/collectionless/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/collectionless/#default-exclude_prefix","title":"Default <code>exclude_prefix</code>","text":"<pre><code>exclude_prefix:\n- \"!\"\n- \"~\"\n</code></pre>"},{"location":"defaults/both/content_rating_cs/","title":"Common Sense Media Content Rating Collections","text":"<p>The <code>content_rating_cs</code> Default Metadata File is used to dynamically create collections based on the content ratings available in your library.</p> <p>If you do not use the Common Sense-based rating system within Plex, this file will attempt to match the ratings in your library to the respective rating system.</p> <p></p>"},{"location":"defaults/both/content_rating_cs/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Recommendations: Use the Mass Content Rating Update Library Operation with either <code>mdb_commonsense</code> or <code>mdb_commonsense0</code> to update Plex to the Common Sense Rating.</p>"},{"location":"defaults/both/content_rating_cs/#collections-section-110","title":"Collections Section 110","text":"Collection Key Description <code>Ratings Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Content Rating&gt;&gt; Movies/Shows</code>Example: <code>Age 5+ Movies</code> <code>&lt;&lt;Number&gt;&gt;</code>Example: <code>5</code> Collection of Movies/Shows that have this Content Rating. <code>Not Rated Movies/Shows</code> <code>other</code> Collection of Movies/Shows that are Unrated, Not Rated or any other uncommon Ratings."},{"location":"defaults/both/content_rating_cs/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_cs\nTV Shows:\nmetadata_path:\n- pmm: content_rating_cs\n</code></pre>"},{"location":"defaults/both/content_rating_cs/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Content Ratings found in your library <code>exclude</code> Description: Exclude these Content Ratings from creating a Dynamic Collection.Values: List of Content Ratings found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Content Ratings found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Content Ratings found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Content Ratings found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Age &lt;&lt;key_name&gt;&gt;+ &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that are rated &lt;&lt;key_name&gt;&gt; accorfing to the Common Sense Rating System.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_cs\ntemplate_variables:\nuse_separator: false\nsep_style: blue\nuse_other: false\nappend_addons:\nGerman 18:  # this doesn't have to exist already\n- de/18 # adds \"de/18\" to the existing \"18\" addon list\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/both/content_rating_cs/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/content_rating_cs/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- 7\n- 8\n- 9\n- 10\n- 11\n- 12\n- 13\n- 14\n- 15\n- 16\n- 17\n- 18\n</code></pre>"},{"location":"defaults/both/content_rating_cs/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\n1:\n- gb/U\n- gb/0+\n- G\n- TV-Y\n- E\n- gb/E\n- G - All Ages\n- \"01\"\n2:\n- gb/U\n- gb/0+\n- G\n- TV-Y\n- E\n- gb/E\n- G - All Ages\n- \"02\"\n3:\n- gb/U\n- gb/0+\n- G\n- TV-Y\n- E\n- gb/E\n- G - All Ages\n- \"03\"\n4:\n- gb/U\n- gb/0+\n- G\n- TV-Y\n- E\n- gb/E\n- G - All Ages\n- \"04\"\n5:\n- gb/U\n- gb/0+\n- G\n- TV-Y\n- E\n- gb/E\n- G - All Ages\n- \"05\"\n6:\n- gb/U\n- gb/0+\n- G\n- TV-Y\n- E\n- gb/E\n- G - All Ages\n- \"06\"\n7:\n- gb/PG\n- TV-PG\n- TV-Y7\n- TV-Y7-FV\n- PG\n- PG - Children\n- \"07\"\n8:\n- gb/PG\n- TV-PG\n- TV-Y7\n- TV-Y7-FV\n- PG\n- PG - Children\n- \"08\"\n9:\n- gb/PG\n- TV-PG\n- TV-Y7\n- TV-Y7-FV\n- PG\n- PG - Children\n- gb/9+\n- \"09\"\n10:\n- gb/PG\n- TV-PG\n- TV-Y7\n- TV-Y7-FV\n- PG\n- PG - Children\n- gb/9+\n11:\n- gb/PG\n- TV-PG\n- TV-Y7\n- TV-Y7-FV\n- PG\n- PG - Children\n- gb/9+\n12:\n- gb/12\n- gb/12A\n- 12+\n- PG\n- PG - Children\n13:\n- gb/12\n- gb/12A\n- 12+\n- PG-13\n- PG-13 - Teens 13 or older\n14:\n- gb/12\n- 12\n- gb/12A\n- 12+\n- PG-13\n- TV-14\n- 13\n- PG-13 - Teens 13 or older\n15:\n- gb/15\n- gb/14+\n- TV-14\n- 13\n- 14\n- PG-13 - Teens 13 or older\n16:\n- gb/15\n- gb/14+\n- TV-14\n- 13\n- 14\n- 15\n- PG-13 - Teens 13 or older\n17:\n- gb/15\n- gb/14+\n- TV-14\n- 13\n- 14\n- 15\n- 16\n- R - 17+ (violence &amp; profanity)\n18:\n- gb/18\n- MA-17\n- TVMA\n- TV-MA\n- R\n- 16\n- 17\n- gb/R18\n- gb/X\n- X\n- NC-17\n- R - 17+ (violence &amp; profanity)\n- R+ - Mild Nudity\n- Rx - Hentai\n</code></pre>"},{"location":"defaults/both/content_rating_mal/","title":"MAL Content Rating Collections","text":"<p>The <code>content_rating_mal</code> Default Metadata File is used to dynamically create collections based on the content ratings available in your library.</p> <p>If you do not use the MAL-based rating system within Plex, this file will attempt to match the ratings in your library to the respective rating system.</p> <p></p>"},{"location":"defaults/both/content_rating_mal/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Recommendations: Use the Mass Content Rating Update Library Operation with <code>mal</code> to update Plex to the MyAnimeList Content Rating.</p>"},{"location":"defaults/both/content_rating_mal/#collections-section-110","title":"Collections Section 110","text":"Collection Key Description <code>Ratings Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Content Rating&gt;&gt; Movies/Shows</code>Example: <code>PG-13 Shows</code> <code>&lt;&lt;Content Rating&gt;&gt;</code>Example: <code>PG-13</code> Collection of Shows that have this Content Rating. <code>Not Rated Movies/Shows</code> <code>other</code> Collection of Shows that are Unrated, Not Rated or any other uncommon Ratings."},{"location":"defaults/both/content_rating_mal/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_mal\nTV Shows:\nmetadata_path:\n- pmm: content_rating_mal\n</code></pre>"},{"location":"defaults/both/content_rating_mal/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Content Ratings found in your library <code>exclude</code> Description: Exclude these Content Ratings from creating a Dynamic Collection.Values: List of Content Ratings found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Content Ratings found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Content Ratings found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Content Ratings found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that are rated &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_mal\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: blue\nappend_addons:\n\"R+ - Mild Nudity\":\n- \"de/18\"\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/both/content_rating_mal/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/content_rating_mal/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- \"G\"\n- \"PG\"\n- \"PG-13\"\n- \"R\"\n- \"R+\"\n- \"Rx\"\n</code></pre>"},{"location":"defaults/both/content_rating_mal/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>    addons:\nG:\n- gb/U\n- gb/0+\n- U\n- G\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- \"01\"\n- \"02\"\n- \"03\"\n- \"04\"\n- \"05\"\n- \"06\"\n- G - All Ages\nPG:\n- TV-Y7\n- TV-Y7-FV\n- 7\n- 8\n- 9\n- \"07\"\n- \"08\"\n- \"09\"\n- gb/PG\n- gb/9+\n- 10\n- 11\n- 12\n- PG - Children\nPG-13:\n- 13\n- gb/12A\n- 12+\n- PG-13\n- TV-13\n- gb/14+\n- gb/15\n- 14\n- 15\n- 16\n- PG-13 - Teens 13 or older\nR:\n- 17\n- 18\n- gb/18\n- MA-17\n- NC-17\n- R\n- TVMA\n- R - 17+ (violence &amp; profanity)\nR+:\n- R+ - Mild Nudity\nRx:\n- Rx - Hentai\n</code></pre>"},{"location":"defaults/both/content_rating_uk/","title":"UK Content Rating Collections","text":"<p>The <code>content_rating_uk</code> Default Metadata File is used to dynamically create collections based on the content ratings available in your library.</p> <p>If you do not use the UK-based rating system within Plex, this file will attempt to match the ratings in your library to the respective rating system.</p> <p></p>"},{"location":"defaults/both/content_rating_uk/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Recommendation: Set the Certification Country within your library's advanced settings to \"United Kingdom\"</p>"},{"location":"defaults/both/content_rating_uk/#collections-section-110","title":"Collections Section 110","text":"Collection Key Description <code>Ratings Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Content Rating&gt;&gt; Movies/Shows</code>Example: <code>15 Movies</code> <code>&lt;&lt;Content Rating&gt;&gt;</code>Example: <code>15</code> Collection of Movies/Shows that have this Content Rating. <code>Not Rated Movies/Shows</code> <code>other</code> Collection of Movies/Shows that are Unrated, Not Rated or any other uncommon Ratings."},{"location":"defaults/both/content_rating_uk/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_uk\nTV Shows:\nmetadata_path:\n- pmm: content_rating_uk\n</code></pre>"},{"location":"defaults/both/content_rating_uk/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Content Ratings found in your library <code>exclude</code> Description: Exclude these Content Ratings from creating a Dynamic Collection.Values: List of Content Ratings found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Content Ratings found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Content Ratings found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Content Ratings found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that are rated &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_uk\ntemplate_variables:\nuse_separator: false\nsep_style: blue\nuse_other: false\nappend_addons:\n15:\n- de/15 # adds \"de/15\" to the existing \"15\" addon list\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/both/content_rating_uk/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/content_rating_uk/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- U\n- PG\n- 12\n- 12A\n- 15\n- 18\n- R18\n</code></pre>"},{"location":"defaults/both/content_rating_uk/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>    addons:\nU:\n- gb/U\n- gb/0+\n- G\n- TV-Y\n- TV-G\n- E\n- gb/E\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- \"01\"\n- \"02\"\n- \"03\"\n- \"04\"\n- \"05\"\n- \"06\"\n- G - All Ages\nPG:\n- gb/PG\n- gb/9+\n- TV-PG\n- TV-Y7\n- TV-Y7-FV\n- PG\n- 7\n- 8\n- 9\n- 10\n- 11\n- \"07\"\n- \"08\"\n- \"09\"\n- PG - Children\n12:\n- gb/12\n- 12\n- PG-13 - Teens 13 or older\n12A:\n- gb/12A\n- 12+\n- PG-13\n- TV-13\n- 12\n- PG-13 - Teens 13 or older\n15:\n- gb/15\n- gb/14+\n- TV-14\n- 13\n- 14\n- 15\n- PG-13 - Teens 13 or older\n18:\n- gb/18\n- MA-17\n- TVMA\n- TV-MA\n- R\n- 16\n- 17\n- 18\n- R - 17+ (violence &amp; profanity)\n- R+ - Mild Nudity\nR18:\n- gb/R18\n- gb/X\n- X\n- NC-17\n- Rx - Hentai\n</code></pre>"},{"location":"defaults/both/genre/","title":"Genre Collections","text":"<p>The <code>genre</code> Default Metadata File is used to dynamically create collections based on the genres available in your library.</p> <p>This file also merges similarly named genres (such as \"Sci-Fi\", \"SciFi\" and \"Sci-Fi &amp; Fantasy\") into one (\"Science Fiction\")</p> <p></p>"},{"location":"defaults/both/genre/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/genre/#collections-section-060","title":"Collections Section 060","text":"Collection Key Description <code>Genre Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Genre&gt;&gt; Movies/Shows</code>Example: <code>Action Movies</code> <code>&lt;&lt;Number&gt;&gt;</code>Example: <code>5</code> Collection of Movies/Shows that have this Genre."},{"location":"defaults/both/genre/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: genre\nTV Shows:\nmetadata_path:\n- pmm: genre\n</code></pre>"},{"location":"defaults/both/genre/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>exclude</code> Description: Exclude these Genres from creating a Dynamic Collection.Values: List of Genres found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Genres found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Genres found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that have the genre &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: genre\ntemplate_variables:\nuse_separator: false\nsep_style: red\nexclude:\n- Politics\n- News\nappend_addons:\nHorror:\n- Thriller  # Adds all thriller items to the Horror collection\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/both/genre/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/genre/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\nAction:\n- Action/Adventure\n- Action/adventure\n- Action &amp; Adventure\n- Action &amp; adventure\n- Action and Adventure\n- Action and adventure\nAdventure:\n- Action/Adventure\n- Action/adventure\n- Action &amp; Adventure\n- Action &amp; adventure\n- Action and Adventure\n- Action and adventure\nBiopic:\n- Biography\nFamily:\n- Kids &amp; Family\nFantasy:\n- SciFi &amp; Fantasy\n- Science Fiction &amp; Fantasy\n- Science-Fiction &amp; Fantasy\n- Sci-Fi &amp; Fantasy\nFilm Noir:\nFilm-Noir\nPolitics:\n- War &amp; Politics\nScience Fiction:\n- SciFi\n- Sci-Fi\n- Science-Fiction\n- SciFi &amp; Fantasy\n- Science Fiction &amp; Fantasy\n- Sci-Fi &amp; Fantasy\nTalk Show:\n- Talk\nWar:\n- War &amp; Politics\n</code></pre>"},{"location":"defaults/both/resolution/","title":"Resolution Collections","text":"<p>The <code>resolution</code> Default Metadata File is used to dynamically create collections based on the resolutions available in your library.</p> <p></p>"},{"location":"defaults/both/resolution/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/resolution/#collections-section-120","title":"Collections Section 120","text":"Collection Key Description <code>Resolution Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Resolution&gt;&gt; Movies/Shows</code>Example: <code>1080p Movies</code> <code>&lt;&lt;Number&gt;&gt;</code>Example: <code>1080</code> Collection of Movies/Shows that have this Resolution."},{"location":"defaults/both/resolution/#standards-style","title":"Standards Style","text":"<p>Below is a screenshot of the alternative Standards (<code>standards</code>) style which can be set via the <code>style</code> template variable.</p> <p>Standards Style takes the base resolutions (\"4K\" and \"720p\") and turns them into the commonly-known standards name (\"Ultra HD\" and \"HD Ready\")</p> <p></p>"},{"location":"defaults/both/resolution/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: resolution\nTV Shows:\nmetadata_path:\n- pmm: resolution\n</code></pre>"},{"location":"defaults/both/resolution/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>style</code> Description: Controls the visual theme of the collections created.Values:<code>default</code>Default Theme<code>standards</code>Standards Theme <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: Any Resolutions found in your library <code>exclude</code> Description: Exclude these Resolutions from creating a Dynamic Collection.Values: List of Resolutions found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Resolutions found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Resolutions found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Resolutions found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that have the resolution &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: resolution\ntemplate_variables:\nuse_separator: false\nsep_style: green\nexclude:\n- SD\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/both/resolution/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/resolution/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- 4k\n- 1080\n- 720\n- 480\n</code></pre>"},{"location":"defaults/both/resolution/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\n4k:\n- 8k\n1080:\n- 2k\n480:\n- 144\n- 240\n- 360\n- sd\n- 576\n</code></pre>"},{"location":"defaults/both/streaming/","title":"Streaming Collections","text":"<p>The <code>streaming</code> Default Metadata File is used to dynamically create collections based on the streaming Services that your media is available on.</p> <p></p>"},{"location":"defaults/both/streaming/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/streaming/#collections-section-030","title":"Collections Section 030","text":"Collection Key Description <code>Streaming Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>All 4 Movies/Shows</code> <code>all4</code> Collection of Movies/Shows Streaming on All 4. <code>Apple TV+ Movies/Shows</code> <code>appletv</code> Collection of Movies/Shows Streaming on Apple TV+. <code>BET+ Movies/Shows</code> <code>bet</code> Collection of Movies/Shows Streaming on BET+. <code>BritBox Movies/Shows</code> <code>britbox</code> Collection of Movies/Shows Streaming on BritBox. <code>Crave Movies/Shows</code> <code>crave</code> Collection of Movies/Shows Streaming on Crave. <code>Crunchyroll Shows</code> <code>crunchyroll</code> Collection of Shows Streaming on Crunchyroll. <code>discovery+ Shows</code> <code>discovery</code> Collection of Shows Streaming on discovery+. <code>Disney+ Movies/Shows</code> <code>disney</code> Collection of Movies/Shows Streaming on Disney+. <code>hayu Shows</code> <code>hayu</code> Collection of Shows Streaming on hayu. <code>Max Movies/Shows</code> <code>max</code> Collection of Movies/Shows Streaming on Max. <code>Hulu Movies/Shows</code> <code>hulu</code> Collection of Movies/Shows Streaming on Hulu. <code>Netflix Movies/Shows</code> <code>netflix</code> Collection of Movies/Shows Streaming on Netflix. <code>NOW Movies/Shows</code> <code>now</code> Collection of Movies/Shows Streaming on NOW. <code>Paramount+ Movies/Shows</code> <code>paramount</code> Collection of Movies/Shows Streaming on Paramount+. <code>Peacock Movies/Shows</code> <code>peacock</code> Collection of Movies/Shows Streaming on Peacock. <code>Prime Video Movies/Shows</code> <code>amazon</code> Collection of Movies/Shows Streaming on Prime Video. <code>Showtime Movies/Shows</code> <code>showtime</code> Collection of Movies/Shows Streaming on Showtime."},{"location":"defaults/both/streaming/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: streaming\nTV Shows:\nmetadata_path:\n- pmm: streaming\n</code></pre>"},{"location":"defaults/both/streaming/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>exclude</code> Description: Exclude these Streaming Services from creating a Dynamic Collection.Values: List of Streaming Service Keys <code>region</code> Description: Changes some Streaming Service lists to regional variants (see below table for more information.Default: <code>us</code>Values: <code>us</code>,<code>uk</code>,<code>ca</code>, <code>da</code>, <code>de</code>, <code>es</code>, <code>fr</code>, <code>it</code>, <code>pt-br</code> <code>originals_only</code> Description: Changes  Streaming Service lists to only show original content produced by the service.Note: Cannot be used with <code>region</code>, and only produces collections for <code>amazon</code>, <code>appletv</code>, <code>disney</code>, <code>max</code>, <code>hulu</code>, <code>netflix</code>, <code>paramount</code>, <code>peacock</code>Default: <code>false</code>Values: <code>true</code>, <code>false</code> <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s streaming on &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol>"},{"location":"defaults/both/streaming/#regional-variants","title":"Regional Variants","text":"<p>Some logic is applied to allow for regional streaming service lists to be available to users depending on where they are, as detailed below:</p> Region Key Description any besides <code>us</code> <code>amazon</code>, <code>disney</code>, <code>netflix</code> These collections will use regional variant lists to ensure the lists populate with what is available in the region specified any besides <code>uk</code> <code>all4</code>, <code>britbox</code>, <code>hayu</code>, <code>now</code> These collections will not be created if the region is not <code>uk</code> as these streaming services are UK-focused any besides <code>ca</code> <code>crave</code> These collections will not be created if the region is not <code>ca</code> as these streaming services are Canada-focused <code>ca</code> <code>max</code>, <code>showtime</code> These collections will not be created if the region is <code>ca</code> as these streaming services are part of the Crave streaming service in Canada <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: streaming\ntemplate_variables:\nregion: fr\nuse_separator: false\nsep_style: stb\nvisible_library_disney: true\nvisible_home_disney: true\nvisible_shared_disney: true\nsonarr_add_missing_hulu: true\nradarr_add_missing_amazon: true\nsort_by: random\n</code></pre>"},{"location":"defaults/both/studio/","title":"Studio Collections","text":"<p>The <code>studio</code> Default Metadata File is used to dynamically create collections based on the studios available in your library.</p> <p>This file also merges similarly named studios (such as \"20th Century Fox\" and \"20th Century Animation\") into one (\"20th Century Studios\")</p> <p></p>"},{"location":"defaults/both/studio/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/studio/#collections-section-070","title":"Collections Section 070","text":"Collection Key Description <code>Studio Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Studio&gt;&gt;</code>Example: <code>Blumhouse Productions</code> <code>&lt;&lt;Studio&gt;&gt;</code>Example: <code>Blumhouse Productions</code> Collection of Movies/Shows that have this Studio."},{"location":"defaults/both/studio/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: studio\nTV Shows:\nmetadata_path:\n- pmm: studio\n</code></pre>"},{"location":"defaults/both/studio/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Studios found in your library <code>exclude</code> Description: Exclude these Studios from creating a Dynamic Collection.Values: List of Studios found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Studios found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Studios found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Studios found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that have the resolution &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: studio\ntemplate_variables:\nappend_include:\n- Big Bull Productions\nsort_by: title.asc\ncollection_section: 4\ncollection_mode: show_items\nuse_separator: false\nsep_style: gray\n</code></pre>"},{"location":"defaults/both/studio/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/studio/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- 20th Century Studios\n- Amazon Studios\n- Amblin Entertainment\n- Blue Sky Studios\n- Blumhouse Productions\n- Chernin Entertainment\n- Columbia Pictures\n- Constantin Film\n- DreamWorks Studios\n- Grindstone Entertainment Group\n- Happy Madison Productions\n- Illumination Entertainment\n- Ingenious Media\n- Legendary Pictures\n- Lionsgate\n- Lucasfilm Ltd\n- Malevolent Films\n- Marvel Studios\n- Metro-Goldwyn-Mayer\n- Millennium Films\n- Miramax\n- New Line Cinema\n- Original Film\n- Orion Pictures\n- Paramount Pictures\n- Pixar\n- PlanB Entertainment\n- Sony Pictures\n- Studio Ghibli\n- Summit Entertainment\n- Universal Pictures\n- Village Roadshow Pictures\n- Walt Disney Pictures\n- Warner Bros. Pictures\n</code></pre>"},{"location":"defaults/both/studio/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\n20th Century Studios:\n- 20th Century\n- 20th Century Animation\n- 20th Century Fox\nAmazon Studios:\n- Amazon\nBlue Sky Studios:\n- Blue Sky Films\nColumbia Pictures:\n- Columbia TriStar\n- TriStar\nDreamWorks Studios:\n- DreamWorks\n- DreamWorks Animation\nIllumination Entertainment:\n- Illumination Films\nLucasfilm Ltd:\n- Lucasfilm\nMarvel Studios:\n- Marvel Animation\n- Marvel Enterprises\n- Marvel Entertainment\n- Marvel\nMetro-Goldwyn-Mayer:\n- MGM\nNew Line Cinema:\n- New Line\nParamount Pictures:\n- Paramount\n- Paramount Animation\nPixar:\n- Pixar Animation Studios\nSony Pictures:\n- Sony\n- Sony Pictures Animation\nUniversal Pictures:\n- Universal\n- Universal Animation Studios\nWalt Disney Pictures:\n- Disney\n- Walt Disney Animation Studios\nWarner Bros. Pictures:\n- Warner\n- Warner Animation Group\n</code></pre>"},{"location":"defaults/both/studio_anime/","title":"Anime Studio Collections","text":"<p>The <code>studio_anime</code> Default Metadata File is used to dynamically create collections based on the studios available in your library.</p> <p></p>"},{"location":"defaults/both/studio_anime/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/studio_anime/#collections-section-070","title":"Collections Section 070","text":"Collection Key Description <code>Studio Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Studio&gt;&gt;</code>Example: <code>Blumhouse Productions</code> <code>&lt;&lt;Studio&gt;&gt;</code>Example: <code>Blumhouse Productions</code> Collection of Movies/Shows that have this Studio."},{"location":"defaults/both/studio_anime/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: studio_anime\nTV Shows:\nmetadata_path:\n- pmm: studio_anime\n</code></pre>"},{"location":"defaults/both/studio_anime/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Studios found in your library <code>exclude</code> Description: Exclude these Studios from creating a Dynamic Collection.Values: List of Studios found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Studios found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Studios found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Studios found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that have the resolution &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: studio_anime\ntemplate_variables:\nappend_include:\n- Bandai Namco Entertainment\nsort_by: title.asc\ncollection_section: 4\ncollection_mode: show_items\nuse_separator: false\nsep_style: gray\n</code></pre>"},{"location":"defaults/both/studio_anime/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/studio_anime/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- 8bit\n- A-1 Pictures\n- Bones\n- Brain`s Base\n- Clover Works\n- Doga Kobo\n- Gainax\n- J.C.Staff\n- Kinema Citrus\n- Kyoto Animation\n- Madhouse\n- MAPPA\n- P.A. Works\n- Production I.G\n- Shaft\n- Silver Link\n- Studio DEEN\n- Studio Ghibli\n- Sunrise\n- Studio Pierrot\n- Toei Animation\n- Trigger\n- Ufotable\n- White Fox\n- Wit Studio\n</code></pre>"},{"location":"defaults/both/studio_anime/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\n8bit:\n- 8-bit\nStudio DEEN:\n- Studio Deen\n</code></pre>"},{"location":"defaults/both/subtitle_language/","title":"Subtitle Language Collections","text":"<p>The <code>subtitle_language</code> Default Metadata File is used to dynamically create collections based on the subtitle languages available in your library.</p> <p></p>"},{"location":"defaults/both/subtitle_language/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/subtitle_language/#collections-section-095","title":"Collections Section 095","text":"Collection Key Description <code>Subtitle Language Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Subtitle Language&gt;&gt; Audio</code>Example: <code>Japanese</code> <code>&lt;&lt;ISO 639-1 Code&gt;&gt;</code>Example: <code>ja</code> Collection of Movies/Shows that have this Subtitle Language. <code>Other Subtitles</code> <code>other</code> Collection of Movies/Shows that are less common Languages."},{"location":"defaults/both/subtitle_language/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: subtitle_language\nTV Shows:\nmetadata_path:\n- pmm: subtitle_language\n</code></pre>"},{"location":"defaults/both/subtitle_language/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include listValues: List of ISO 639-1 codes <code>exclude</code> Description: Exclude these Subtitle Languages from creating a Dynamic Collection.Values: List of ISO 639-1 codes <code>append_include</code> Description: Appends to the default include listValues: List of ISO 639-1 codes <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; Subtitles</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s with &lt;&lt;key_name&gt;&gt; Subtitles.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: subtitle_language\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: purple\nexclude:\n- fr  # Exclude French\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/both/subtitle_language/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- ab     # Abkhazian\n- aa     # Afar\n- af     # Afrikaans\n- ak     # Akan\n- sq     # Albanian\n- am     # Amharic\n- ar     # Arabic\n- an     # Aragonese\n- hy     # Armenian\n- as     # Assamese\n- av     # Avaric\n- ae     # Avestan\n- ay     # Aymara\n- az     # Azerbaijani\n- bm     # Bambara\n- ba     # Bashkir\n- eu     # Basque\n- be     # Belarusian\n- bn     # Bengali\n- bi     # Bislama\n- bs     # Bosnian\n- br     # Breton\n- bg     # Bulgarian\n- my     # Burmese\n- ca     # Catalan, Valencian\n- km     # Central Khmer\n- ch     # Chamorro\n- ce     # Chechen\n- ny     # Chichewa, Chewa, Nyanja \n- zh     # Chinese\n- cu     # Church\u00a0Slavic, Old Slavonic, Church Slavonic, Old Bulgarian,\u00a0Old\u00a0Church\u00a0Slavonic\n- cv     # Chuvash\n- kw     # Cornish\n- co     # Corsican\n- cr     # Cree\n- hr     # Croatian\n- cs     # Czech\n- da     # Danish\n- dv     # Divehi, Dhivehi, Maldivian\n- nl     # Dutch,\u00a0Flemish\n- dz     # Dzongkha\n- en     # English\n- eo     # Esperanto\n- et     # Estonian\n- ee     # Ewe\n- fo     # Faroese\n- fj     # Fijian\n- fil    # Filipino\n- fi     # Finnish\n- fr     # French\n- ff     # Fulah\n- gd     # Gaelic, Scottish Gaelic\n- gl     # Galician\n- lg     # Ganda\n- ka     # Georgian\n- de     # German\n- el     # Greek, Modern (1453\u2013)\n- gn     # Guarani\n- gu     # Gujarati\n- ht     # Haitian, Haitian Creole\n- ha     # Hausa\n- he     # Hebrew\n- hz     # Herero\n- hi     # Hindi\n- ho     # Hiri Motu\n- hu     # Hungarian\n- is     # Icelandic\n- io     # Ido\n- ig     # Igbo\n- id     # Indonesian\n- ia     # Interlingua\u00a0(International Auxiliary Language Association)\n- ie     # Interlingue, Occidental\n- iu     # Inuktitut\n- ik     # Inupiaq\n- ga     # Irish\n- it     # Italian\n- ja     # Japanese\n- jv     # Javanese\n- kl     # Kalaallisut, Greenlandic\n- kn     # Kannada\n- kr     # Kanuri\n- ks     # Kashmiri\n- kk     # Kazakh\n- ki     # Kikuyu, Gikuyu\n- rw     # Kinyarwanda\n- ky     # Kirghiz, Kyrgyz\n- kv     # Komi\n- kg     # Kongo\n- ko     # Korean\n- kj     # Kuanyama, Kwanyama\n- ku     # Kurdish\n- lo     # Lao\n- la     # Latin\n- lv     # Latvian\n- li     # Limburgan, Limburger, Limburgish\n- ln     # Lingala\n- lt     # Lithuanian\n- lu     # Luba-Katanga\n- lb     # Luxembourgish, Letzeburgesch\n- mk     # Macedonian\n- mg     # Malagasy\n- ms     # Malay\n- ml     # Malayalam\n- mt     # Maltese\n- gv     # Manx\n- mi     # Maori\n- mr     # Marathi\n- mh     # Marshallese\n- mn     # Mongolian\n- na     # Nauru\n- nv     # Navajo, Navaho\n- ng     # Ndonga\n- ne     # Nepali\n- nd     # North Ndebele\n- se     # Northern Sami\n- no     # Norwegian\n- nb     # Norwegian Bokm\u00e5l\n- nn     # Norwegian Nynorsk\n- oc     # Occitan\n- oj     # Ojibwa\n- or     # Oriya\n- om     # Oromo\n- os     # Ossetian, Ossetic\n- pi     # Pali\n- ps     # Pashto, Pushto\n- fa     # Persian\n- pl     # Polish\n- pt     # Portuguese\n- pa     # Punjabi, Panjabi\n- qu     # Quechua\n- ro     # Romanian,\u00a0Moldavian, Moldovan\n- rm     # Romansh\n- rn     # Rundi\n- ru     # Russian\n- sm     # Samoan\n- sg     # Sango\n- sa     # Sanskrit\n- sc     # Sardinian\n- sr     # Serbian\n- sn     # Shona\n- ii     # Sichuan Yi, Nuosu\n- sd     # Sindhi\n- si     # Sinhala, Sinhalese\n- sk     # Slovak\n- sl     # Slovenian\n- so     # Somali\n- nr     # South Ndebele\n- st     # Southern Sotho\n- es     # Spanish, Castilian\n- su     # Sundanese\n- sw     # Swahili\n- ss     # Swati\n- sv     # Swedish\n- tl     # Tagalog\n- ty     # Tahitian\n- tg     # Tajik\n- ta     # Tamil\n- tt     # Tatar\n- te     # Telugu\n- th     # Thai\n- bo     # Tibetan\n- ti     # Tigrinya\n- to     # Tonga\u00a0(Tonga Islands)\n- ts     # Tsonga\n- tn     # Tswana\n- tr     # Turkish\n- tk     # Turkmen\n- tw     # Twi\n- ug     # Uighur, Uyghur\n- uk     # Ukrainian\n- ur     # Urdu\n- uz     # Uzbek\n- ve     # Venda\n- vi     # Vietnamese\n- vo     # Volap\u00fck\n- wa     # Walloon\n- cy     # Welsh\n- fy     # Western Frisian\n- wo     # Wolof\n- xh     # Xhosa\n- yi     # Yiddish\n- yo     # Yoruba\n- za     # Zhuang, Chuang\n- zu     # Zulu\n</code></pre>"},{"location":"defaults/both/universe/","title":"Universe Collections","text":"<p>The <code>universe</code> Default Metadata File is used to create collections based on popular Movie universes (such as the Marvel Cinematic Universe or Wizarding World).</p> <p></p>"},{"location":"defaults/both/universe/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie &amp; Show</p>"},{"location":"defaults/both/universe/#collections-section-040","title":"Collections Section 040","text":"Collection Key Description <code>Universe Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>Alien / Predator</code> <code>avp</code> Collection of Movies in the Alien / Predator Universe <code>Arrowverse</code> <code>arrow</code> Collection of Movies in the The Arrow Universe <code>DC Animated Universe</code> <code>dca</code> Collection of Movies in the DC Animated Universe <code>DC Extended Universe</code> <code>dcu</code> Collection of Movies in the DC Extended Universe <code>Fast &amp; Furious</code> <code>fast</code> Collection of Movies in the Fast &amp; Furious Universe <code>In Association with Marvel</code> <code>marvel</code> Collection of Movies in the Marvel Universe (but not part of MCU) <code>Marvel Cinematic Universe</code> <code>mcu</code> Collection of Movies in the Marvel Cinematic Universe <code>Middle Earth</code> <code>middle</code> Collection of Movies in the Middle Earth Universe <code>The Mummy Universe</code> <code>mummy</code> Collection of Movies in the The Mummy Universe <code>Rocky / Creed</code> <code>rocky</code> Collection of Movies in the Rocky / Creed Universe <code>Star Trek</code> <code>trek</code> Collection of Movies in the Star Trek Universe <code>Star Wars Universe</code> <code>star</code> Collection of Movies in the Star Wars Universe <code>View Askewverse</code> <code>askew</code> Collection of Movies in the The View Askew Universe <code>Wizarding World</code> <code>wizard</code> Collection of Movies in the Wizarding World Universe <code>X-Men Universe</code> <code>xmen</code> Collection of Movies in the X-Men Universe"},{"location":"defaults/both/universe/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: universe\nTV Shows:\nmetadata_path:\n- pmm: universe\n</code></pre>"},{"location":"defaults/both/universe/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>minimum_items</code> Description: Controls the minimum items that the collection must have to be created.Default: <code>2</code>Values: Any number <code>name_mapping_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the name mapping value for using assets of the specified key's collection. Values: Any String <code>imdb_list_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the Movies in the IMDb List to the specified key's collection.Values: List of IMDb List URLs <code>mdblist_list_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the Movies in the MDBList List to the specified key's collection. Overrides the default mdblist_list for that collection if used.Values: List of MDBList List URLs <code>trakt_list_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the Movies in the Trakt List to the specified key's collection.Values: List of Trakt List URLs <code>data</code> Description: Overrides the default data dictionary. Defines the data that the custom dynamic collection processes.Values: Dictionary List of keys/names <code>append_data</code> Description: Appends to the default data dictionary.Values: Dictionary List of keys/names <code>exclude</code> Description: Exclude these Universes from creating a Dynamic Collection.Values: List of Universes <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: universe\ntemplate_variables:\nuse_separator: false\nsep_style: gray\ncollection_order: release\nradarr_add_missing: true\n# Add a custom universe\nappend_data:\nmonster: MonsterVerse\ntrakt_list_monster: https://trakt.tv/users/rzepkowski/lists/monsterverse-movies\n</code></pre>"},{"location":"defaults/both/universe/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/both/universe/#default-data","title":"Default <code>data</code>","text":"<pre><code>data:\navp: Alien / Predator\narrow: Arrowverse\ndca: DC Animated Universe\ndcu: DC Extended Universe\nfast: Fast &amp; Furious\nmarvel: In Association With Marvel\nmcu: Marvel Cinematic Universe\nmiddle: Middle Earth\nmummy: The Mummy Universe\nrocky: Rocky / Creed\ntrek: Star Trek\nstar: Star Wars Universe\naskew: View Askewniverse\nwizard: Wizarding World\nxmen: X-Men Universe\n</code></pre>"},{"location":"defaults/both/universe/#default-mdblist_list","title":"Default <code>mdblist_list</code>","text":"<pre><code>trakt_list:\nmcu: https://trakt.tv/users/donxy/lists/marvel-cinematic-universe\nmiddle: https://trakt.tv/users/oya-kesh/lists/middle-earth\ntrek: https://trakt.tv/users/wdvhucb/lists/star-trek\nmdblist_list:\navp: https://mdblist.com/lists/plexmetamanager/external/9243\narrow: https://mdblist.com/lists/plexmetamanager/external/15113\ndca: https://mdblist.com/lists/plexmetamanager/external/15405\ndcu: https://mdblist.com/lists/plexmetamanager/external/15107\nfast: https://mdblist.com/lists/plexmetamanager/external/9246\nmarvel: https://mdblist.com/lists/plexmetamanager/external/15110\nmummy: https://mdblist.com/lists/plexmetamanager/external/9249\nrocky: https://mdblist.com/lists/plexmetamanager/external/9248\nstar: https://mdblist.com/lists/plexmetamanager/external/15105\naskew: https://mdblist.com/lists/plexmetamanager/external/15362\nwizard: https://mdblist.com/lists/plexmetamanager/external/9242\nxmen: https://mdblist.com/lists/plexmetamanager/external/9244\n</code></pre>"},{"location":"defaults/both/year/","title":"Year Collections","text":"<p>The <code>year</code> Default Metadata File is used to dynamically create collections based on the years available in your library, sorted by critic rating to create a \"best of \" <p></p>"},{"location":"defaults/both/year/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/both/year/#collections-section-105","title":"Collections Section 105","text":"Collection Key Description <code>Year Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>Best of &lt;&lt;Year&gt;&gt;</code>Example: <code>Best of 2022</code> <code>&lt;&lt;Year&gt;&gt;</code>Example: <code>2022</code> Collection of Movies/Shows that have this Year."},{"location":"defaults/both/year/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: year\nTV Shows:\nmetadata_path:\n- pmm: year\n</code></pre>"},{"location":"defaults/both/year/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Default: <code>10</code>Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>starting</code>Controls the starting year for collectionsDefault: current_year-10Values: Number greater than 0<code>ending</code>Controls the ending year for collectionsDefault: current_yearValues: Number greater than 1<code>increment</code>Controls the increment (i.e. every 5th year)Default: 1Values: Number greater than 0<ul><li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li><li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li></ul> <code>exclude</code> Description: Exclude these Years from creating a Dynamic Collection.Values: List of Years <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: year\ntemplate_variables:\nuse_separator: false\nsep_style: purple\nsort_by: title.asc\nsort_by_2022: release.desc\n</code></pre>"},{"location":"defaults/chart/anilist/","title":"Anilist Charts Collections","text":"<p>The <code>anilist</code> Default Metadata File is used to create collections based on Anilist charts.</p> <p></p>"},{"location":"defaults/chart/anilist/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/chart/anilist/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>AniList Popular</code> <code>popular</code> Collection of the most Popular Anime on AniList. <code>AniList Top Rated</code> <code>top</code> Collection of the Top Rated Anime on AniList. <code>AniList Trending</code> <code>trending</code> Collection of the Trending Anime on AniList. <code>AniList Season</code> <code>season</code> Collection of the Current Season's Anime on AniList."},{"location":"defaults/chart/anilist/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: anilist\nTV Shows:\nmetadata_path:\n- pmm: anilist\n</code></pre>"},{"location":"defaults/chart/anilist/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the number of items in a collection for all collections in a Defaults file.Default: <code>100</code>Values: Number greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the number of items in a collection of the specified key's collection.Default: <code>limit</code>Values: Number greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: anilist\ntemplate_variables:\nuse_popular: false\norder_top: 01\nsummary_top: \"Top 10 Rated movies on AniList\"\nlimit_top: 10\nvisible_library_popular: true\nvisible_home_popular: true\nvisible_shared_popular: true\nsonarr_add_missing: true\ncollection_section: 09\ncollection_mode: show_items\n</code></pre>"},{"location":"defaults/chart/basic/","title":"Basic Charts Collections","text":"<p>The <code>basic</code> Default Metadata File is used to create collections based on recently released media in your library.</p> <p></p>"},{"location":"defaults/chart/basic/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/chart/basic/#collections-section-010","title":"Collections Section 010","text":"Collection Key Description <code>Newly Released</code> <code>released</code> Collection of Movies or TV Shows released in the last 90 days. <code>New Episodes</code> <code>episodes</code> Collection of Episodes released in the last 7 days."},{"location":"defaults/chart/basic/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: basic\nTV Shows:\nmetadata_path:\n- pmm: basic\n</code></pre>"},{"location":"defaults/chart/basic/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Smart Filter Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>in_the_last_&lt;&lt;key&gt;&gt;</code>1 Description: Changes how far back the Smart Filter looks.Default:<code>released</code><code>90</code><code>episodes</code><code>7</code>Values: Number Greater then 0 <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: basic\ntemplate_variables:\nuse_released: false\nin_the_last_episodes: 14\nvisible_library_released: true\nvisible_home_released: true\nvisible_shared_released: true\n</code></pre>"},{"location":"defaults/chart/flixpatrol/","title":"FlixPatrol Charts Collections","text":"<p>The <code>flixpatrol</code> Default Metadata File is used to create collections based on FlixPatrol Charts.</p> <p></p>"},{"location":"defaults/chart/flixpatrol/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/chart/flixpatrol/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>Netflix Top 10 Movies/Shows</code> <code>netflix</code> Collection of the Top Movies/Shows on Netflix according to FlixPatrol. <code>Disney+ Top 10 Movies/Shows</code> <code>disney</code> Collection of the Top Movies/Shows on Disney+ according to FlixPatrol. <code>HBO Top 10 Movies/Shows</code> <code>hbo</code> Collection of the Top Movies/Shows on HBO according to FlixPatrol. <code>Hulu Top 10 Movies/Shows</code> <code>hulu</code> Collection of the Top Movies/Shows on Hulu according to FlixPatrol. <code>Paramount+ Top 10 Movies/Shows</code> <code>paramount</code> Collection of the Top Movies/Shows on Paramount+ according to FlixPatrol. <code>Prime Video Top 10 Movies/Shows</code> <code>prime</code> Collection of the Top Movies/Shows on Prime Video according to FlixPatrol. <code>Apple+ Top 10 Movies/Shows</code> <code>apple</code> Collection of the Top Movies/Shows on Apple+ according to FlixPatrol."},{"location":"defaults/chart/flixpatrol/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: flixpatrol\nTV Shows:\nmetadata_path:\n- pmm: flixpatrol\n</code></pre>"},{"location":"defaults/chart/flixpatrol/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Default: <code>10</code>Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>location</code> Description: Changes the Builder Location for all collections in a Defaults file.Default: <code>world</code>Values: <code>location</code> Attribute Options <code>location_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Location of the specified key's collection.Default: <code>location</code>Values: <code>location</code> Attribute Options <code>time_window</code> Description: Changes the Builder Time Window for all collections in a Defaults file.Default: <code>last_week</code>Values: <code>time_window</code> Attribute Options <code>time_window_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Time Window of the specified key's collection.Default: <code>time_window</code>Values: <code>time_window</code> Attribute Options <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: flixpatrol\ntemplate_variables:\nlocation: united_states\ntime_window: last_month\n</code></pre>"},{"location":"defaults/chart/imdb/","title":"IMDb Charts Collections","text":"<p>The <code>imdb</code> Default Metadata File is used to create collections based on IMDb Charts.</p> <p></p>"},{"location":"defaults/chart/imdb/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Recommendations: The <code>IMDb Lowest Rated</code> Collection only works with Movie Libraries</p>"},{"location":"defaults/chart/imdb/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>IMDb Popular</code> <code>popular</code> Collection of the most Popular Movies/Shows on IMDb. <code>IMDb Top 250</code> <code>top</code> Collection of Top 250 Movies/Shows on IMDb. <code>IMDb Lowest Rated</code> <code>lowest</code> Collection of the lowest Rated Movies on IMDb."},{"location":"defaults/chart/imdb/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: imdb\nTV Shows:\nmetadata_path:\n- pmm: imdb\n</code></pre>"},{"location":"defaults/chart/imdb/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: imdb\ntemplate_variables:\nuse_popular: false\nvisible_library_top: true\nvisible_home_top: true\nvisible_shared_top: true\n</code></pre>"},{"location":"defaults/chart/myanimelist/","title":"MyAnimeList Charts Collections","text":"<p>The <code>myanimelist</code> Default Metadata File is used to create collections based on MyAnimeList Charts.</p> <p></p>"},{"location":"defaults/chart/myanimelist/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/chart/myanimelist/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>MyAnimeList Popular</code> <code>popular</code> Collection of the most Popular Anime on MyAnimeList. <code>MyAnimeList Favorited</code> <code>favorited</code> Collection of most Favorited Anime on MyAnimeList. <code>MyAnimeList Top Rated</code> <code>top</code> Collection of the Top Rated Anime on MyAnimeList. <code>MyAnimeList Top Airing</code> <code>airing</code> Collection of the Top Rated Airing on MyAnimeList. <code>MyAnimeList Season</code> <code>season</code> Collection of the Current Seasons Anime on MyAnimeList."},{"location":"defaults/chart/myanimelist/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: myanimelist\nTV Shows:\nmetadata_path:\n- pmm: myanimelist\n</code></pre>"},{"location":"defaults/chart/myanimelist/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Default: <code>100</code>Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: myanimelist\ntemplate_variables:\nuse_season: false\norder_popular: 01\nlimit_popular: 20\nvisible_library_popular: true\nvisible_home_popular: true\nvisible_shared_popular: true\n</code></pre>"},{"location":"defaults/chart/other/","title":"Other Charts Collections","text":"<p>The <code>other_chart</code> Default Metadata File is used to create collections based on other Charts.</p> <p></p>"},{"location":"defaults/chart/other/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Recommendations: The <code>StevenLu's Popular Movies</code> and <code>Top 10 Pirated Movies of the Week</code> Collections only work with Movie Libraries</p>"},{"location":"defaults/chart/other/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>AniDB Popular</code> <code>anidb</code> Collection of the most Popular Anime on AniDB. <code>Common Sense Selection</code> <code>commonsense</code> Collection of Common Sense Selection Movies/Shows. <code>StevenLu's Popular Movies</code> <code>stevenlu</code> Collection of StevenLu's Popular Movies. <code>Top 10 Pirated Movies of the Week</code> <code>pirated</code> Collection of the Top 10 Pirated Movies of the Week."},{"location":"defaults/chart/other/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: other_chart\nTV Shows:\nmetadata_path:\n- pmm: other_chart\n</code></pre>"},{"location":"defaults/chart/other/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>limit_anidb</code> Description: Changes the Builder Limit of the AniDB Popular Collection.Default: <code>30</code>Values: Number Greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: other_chart\ntemplate_variables:\nuse_anidb: false\nvisible_library_commonsense: true\nvisible_home_commonsense: true\nvisible_shared_commonsense: true\n</code></pre>"},{"location":"defaults/chart/separator/","title":"Chart Separator Collections","text":"<p>The <code>separator_chart</code> Default Metadata File is used to create a seperator collection for Charts.</p> <p></p>"},{"location":"defaults/chart/separator/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p>"},{"location":"defaults/chart/separator/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>Chart Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections."},{"location":"defaults/chart/separator/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: separator_chart\nTV Shows:\nmetadata_path:\n- pmm: separator_chart\n</code></pre>"},{"location":"defaults/chart/separator/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Shared Collection Variables are NOT available to this default file.</p> <p>This file contains only a Separator so all Shared Separator Variables are available.</p> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: separator_chart\ntemplate_variables:\nuse_separator: false\nsep_style: purple\n</code></pre>"},{"location":"defaults/chart/tautulli/","title":"Tautulli Charts Collections","text":"<p>The <code>tautulli</code> Default Metadata File is used to create collections based on Tautulli/Plex Charts.</p> <p></p>"},{"location":"defaults/chart/tautulli/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Requirements: Tautulli Authentication</p>"},{"location":"defaults/chart/tautulli/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>Plex Popular</code> <code>popular</code> Collection of the most Popular Movies/Shows on Plex. <code>Plex Watched</code> <code>watched</code> Collection of the most Watched Movies/Shows on Plex."},{"location":"defaults/chart/tautulli/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: tautulli\nTV Shows:\nmetadata_path:\n- pmm: tautulli\n</code></pre>"},{"location":"defaults/chart/tautulli/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>list_days</code> Description: Changes the <code>list_days</code> attribute of the builder for all collections in a Defaults file.Values: Number greater then 0 <code>list_days_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the <code>list_days</code> attribute of the builder of the specified key's collection.Values: Number greater then 0 <code>list_size</code> Description: Changes the <code>list_size</code> attribute of the builder for all collections in a Defaults file.Values: Number greater then 0 <code>list_size_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the <code>list_size</code> attribute of the builder of the specified key's collection.Values: Number greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: tautulli\ntemplate_variables:\nuse_watched: false\nlist_days_popular: 7\nlist_size_popular: 10\nvisible_library_watched: true\nvisible_home_watched: true\nvisible_shared_watched: true\n</code></pre>"},{"location":"defaults/chart/tmdb/","title":"TMDb Charts Collections","text":"<p>The <code>tmdb</code> Default Metadata File is used to create collections based on TMDb Charts.</p> <p></p>"},{"location":"defaults/chart/tmdb/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Recommendations: The <code>TMDb Airing Today</code> and <code>TMDb On The Air</code> Collections only work with Show Libraries</p>"},{"location":"defaults/chart/tmdb/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>TMDb Popular</code> <code>popular</code> Collection of the Most Popular Movies/Shows on TMDb. <code>TMDb Top Rated</code> <code>top</code> Collection of the Top Rated Movies/Shows on TMDb. <code>TMDb Trending</code> <code>trending</code> Collection of Trending Movies/Shows on TMDb. <code>TMDb Airing Today</code> <code>airing</code> Collection of Shows Airing Today on TMDb. <code>TMDb On The Air</code> <code>air</code> Collection of Shows currently On The Air on TMDb."},{"location":"defaults/chart/tmdb/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: tmdb\nTV Shows:\nmetadata_path:\n- pmm: tmdb\n</code></pre>"},{"location":"defaults/chart/tmdb/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Default: <code>100</code>Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: tmdb\ntemplate_variables:\nuse_trending: false\nlimit_popular: 20\nvisible_library_popular: true\nvisible_home_popular: true\nvisible_shared_popular: true\n</code></pre>"},{"location":"defaults/chart/trakt/","title":"Trakt Charts Collections","text":"<p>The <code>trakt</code> Default Metadata File is used to create collections based on Trakt Charts.</p> <p></p>"},{"location":"defaults/chart/trakt/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie, Show</p> <p>Requirements: Trakt Authentication</p>"},{"location":"defaults/chart/trakt/#collections-section-020","title":"Collections Section 020","text":"Collection Key Description <code>Trakt Collected</code> <code>collected</code> Collection of the Most Collected Movies/Shows on Trakt. <code>Trakt Popular</code> <code>popular</code> Collection of the Most Popular Movies/Shows on Trakt. <code>Trakt Recommended</code> <code>recommended</code> Collection of Recommended Movies/Shows on Trakt. <code>Trakt Trending</code> <code>trending</code> Collection of Trending Movies/Shows on Trakt. <code>Trakt Watched</code> <code>watched</code> Collection of the Most Watched Movies/Shows on Trakt."},{"location":"defaults/chart/trakt/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: trakt\nTV Shows:\nmetadata_path:\n- pmm: trakt\n</code></pre>"},{"location":"defaults/chart/trakt/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Default: <code>100</code>Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in a Defaults file.Default: <code>custom</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: trakt\ntemplate_variables:\nuse_collected: false\nuse_recommended: false\nuse_watched: false\nlimit: 20\nvisible_library_popular: true\nvisible_home_popular: true\nvisible_shared_popular: true\n</code></pre>"},{"location":"defaults/movie/content_rating_us/","title":"US Content Rating Collections","text":"<p>The <code>content_rating_us</code> Default Metadata File is used to dynamically create collections based on the content ratings available in your library.</p> <p>If you do not use the US-based rating system within Plex, this file will attempt to match the ratings in your library to the respective rating system.</p> <p>This file has a Show Library Counterpart.</p> <p></p>"},{"location":"defaults/movie/content_rating_us/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p> <p>Recommendation: Set the Certification Country within your library's advanced settings to \"United States\".</p>"},{"location":"defaults/movie/content_rating_us/#collections-section-110","title":"Collections Section 110","text":"Collection Key Description <code>Country Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Content Rating&gt;&gt; Movies</code>Example: <code>R Movies</code> <code>&lt;&lt;Content Rating&gt;&gt;</code>Example: <code>R</code> Collection of Movies that have this Content Rating. <code>Not Rated Movies</code> <code>other</code> Collection of Movies that are Unrated, Not Rated or any other uncommon Ratings."},{"location":"defaults/movie/content_rating_us/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_us\n</code></pre>"},{"location":"defaults/movie/content_rating_us/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Content Ratings found in your library <code>exclude</code> Description: Exclude these Content Ratings from creating a Dynamic Collection.Values: List of Content Ratings found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Content Ratings found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Content Ratings found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Content Ratings found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that are rated &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: content_rating_us\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: blue\nappend_addons:\nR:\n- \"de/18\"\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/movie/content_rating_us/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/movie/content_rating_us/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- G\n- PG\n- PG-13\n- R\n- NC-17\n</code></pre>"},{"location":"defaults/movie/content_rating_us/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\nG:\n- gb/U\n- gb/0+\n- U\n- TV-Y\n- TV-G\n- E\n- gb/E\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- \"01\"\n- \"02\"\n- \"03\"\n- \"04\"\n- \"05\"\n- \"06\"\n- G - All Ages\nPG:\n- gb/PG\n- gb/9+\n- TV-PG\n- TV-Y7\n- TV-Y7-FV\n- 7\n- 8\n- 9\n- \"07\"\n- \"08\"\n- \"09\"\n- \"10\"\n- \"11\"\n- PG - Children\nPG-13:\n- gb/12A\n- gb/12\n- 12+\n- TV-13\n- gb/14+\n- gb/15\n- TV-14\n- 12\n- 13\n- 14\n- 15\n- 16\n- PG-13 - Teens 13 or older\nR:\n- 17\n- 18\n- gb/18\n- MA-17\n- TVMA\n- TV-MA\n- R - 17+ (violence &amp; profanity)\n- R+ - Mild Nudity\nNC-17:\n- gb/R18\n- gb/X\n- R18\n- X\n- Rx - Hentai\n</code></pre>"},{"location":"defaults/movie/country/","title":"Country Collections","text":"<p>The <code>country</code> Default Metadata File is used to dynamically create collections based on the countries available in your library.</p> <p>This file has a Show Library Counterpart.</p> <p></p>"},{"location":"defaults/movie/country/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/movie/country/#collections-section-080","title":"Collections Section 080","text":"Collection Key Description <code>Country Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Country&gt;&gt;</code>Example: <code>Germany</code> <code>&lt;&lt;Country&gt;&gt;</code>Example: <code>Germany</code> Collection of Movies that have this Country. <code>Other Countries</code> <code>other</code> Collection of Movies that are in other uncommon Countries."},{"location":"defaults/movie/country/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: country\n</code></pre>"},{"location":"defaults/movie/country/#color-style","title":"Color Style","text":"<p>Below is a screenshot of the alternative Color (<code>color</code>) style which can be set via the <code>style</code> template variable.</p> <p></p>"},{"location":"defaults/movie/country/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>style</code> Description: Controls the visual theme of the collections createdValues:<code>white</code>White Theme<code>color</code>Color Theme <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Countries found in your library <code>exclude</code> Description: Exclude these Countries from creating a Dynamic Collection.Values: List of Countries found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Countries found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Countries found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Countries found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s filmed in &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: country\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: purple\nexclude:\n- France\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/movie/country/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/movie/country/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n# - Afghanistan                   # af\n# - \u00c5land Islands                 # ax\n# - Albania                       # al\n# - Algeria                       # dz\n# - Andorra                       # ad\n# - Angola                        # ao\n# - Anguilla                      # ai\n# - Antarctica                    # aq\n# - Antigua                       # ag\n- Argentina                     # ar\n# - Armenia                       # am\n# - Aruba                         # aw\n- Australia                     # au\n- Austria                       # at\n# - Azerbaijan                    # az\n- Bahamas                       # bs\n# - Bahrain                       # bh\n# - Bangladesh                    # bd\n# - Barbados                      # bb\n# - Belarus                       # by\n- Belgium                       # be\n# - Belize                        # bz\n# - Benin                         # bj\n# - Bermuda                       # bm\n# - Bhutan                        # bt\n# - Bolivia                       # bo\n# - Bonaire                       # bq\n# - Bosnia and Herzegovina        # ba\n# - Botswana                      # bw\n# - Bouvet Island                 # bv\n- Brazil                        # br\n# - Brunei                        # bn\n- Bulgaria                      # bg\n# - Burkina Faso                  # bf\n# - Burundi                       # bi\n# - Cabo Verde                    # cv\n# - Cambodia                      # kh\n# - Cameroon                      # cm\n- Canada                        # ca\n# - Cayman Islands                # ky\n# - Central African Republic      # cf\n# - Chad                          # td\n- Chile                         # cl\n- China                         # cn\n# - Christmas Island              # cx\n# - Cocos (Keeling) Islands       # cc\n# - Colombia                      # co\n# - Comoros                       # km\n# - Congo                         # cg\n# - Cook Islands                  # ck\n- Costa Rica                    # cr\n# - C\u00f4te d'Ivoire                 # ci\n- Croatia                       # hr\n# - Cuba                          # cu\n# - Cura\u00e7ao                       # cw\n# - Cyprus                        # cy\n- Czech Republic                # cz\n- Denmark                       # dk\n# - Djibouti                      # dj\n# - Dominica                      # dm\n- Dominican Republic            # do\n# - Ecuador                       # ec\n- Egypt                         # eg\n# - El Salvador                   # sv\n# - Equatorial Guinea             # gq\n# - Eritrea                       # er\n- Estonia                       # ee\n# - Eswatini                      # sz\n# - Ethiopia                      # et\n# - Falkland Islands              # fk\n# - Faroe Islands                 # fo\n# - Fiji                          # fj\n- Finland                       # fi\n- France                        # fr\n# - French Guiana                 # gf\n# - French Polynesia              # pf\n# - Gabon                         # ga\n# - Gambia                        # gm\n# - Georgia                       # ge\n- Germany                       # de\n# - Ghana                         # gh\n# - Gibraltar                     # gi\n- Greece                        # gr\n# - Greenland                     # gl\n# - Grenada                       # gd\n# - Guadeloupe                    # gp\n# - Guam                          # gu\n# - Guatemala                     # gt\n# - Guernsey                      # gg\n# - Guinea                        # gn\n# - Guinea-Bissau                 # gw\n# - Guyana                        # gy\n# - Haiti                         # ht\n# - Holy See                      # va\n# - Honduras                      # hn\n- Hong Kong                     # hk\n- Hungary                       # hu\n- Iceland                       # is\n- India                         # in\n- Indonesia                     # id\n- Iran                          # ir\n# - Iraq                          # iq\n- Ireland                       # ie\n# - Isle of Man                   # im\n- Israel                        # il\n- Italy                         # it\n# - Jamaica                       # jm\n- Japan                         # jp\n# - Jersey                        # je\n# - Jordan                        # jo\n# - Kazakhstan                    # kz\n# - Kenya                         # ke\n# - Kiribati                      # ki\n- Korea                         # kr\n# - Kuwait                        # kw\n# - Kyrgyzstan                    # kg\n# - Lao                           # la\n- Latvia                        # lv\n# - Lebanon                       # lb\n# - Lesotho                       # ls\n# - Liberia                       # lr\n# - Libya                         # ly\n# - Liechtenstein                 # li\n# - Lithuania                     # lt\n- Luxembourg                    # lu\n# - Macao                         # mo\n# - Madagascar                    # mg\n# - Malawi                        # mw\n- Malaysia                      # my\n# - Maldives                      # mv\n# - Mali                          # ml\n# - Malta                         # mt\n# - Marshall Islands              # mh\n# - Martinique                    # mq\n# - Mauritania                    # mr\n# - Mauritius                     # mu\n# - Mayotte                       # yt\n- Mexico                        # mx\n# - Micronesia                    # fm\n# - Moldova                       # md\n# - Monaco                        # mc\n# - Mongolia                      # mn\n# - Montenegro                    # me\n# - Montserrat                    # ms\n- Morocco                       # ma\n# - Mozambique                    # mz\n# - Myanmar                       # mm\n# - Namibia                       # na\n# - Nauru                         # nr\n# - Nepal                         # np\n- Netherlands                   # nl\n# - New Caledonia                 # nc\n- New Zealand                   # nz\n# - Nicaragua                     # ni\n# - Niger                         # ne\n# - Nigeria                       # ng\n# - Niue                          # nu\n# - Norfolk Island                # nf\n# - Macedonia                     # mk\n- Norway                        # no\n# - Oman                          # om\n- Pakistan                      # pk\n# - Palau                         # pw\n# - Palestine                     # ps\n- Panama                        # pa\n# - New Guinea                    # pg\n# - Paraguay                      # py\n- Peru                          # pe\n- Philippines                   # ph\n# - Pitcairn                      # pn\n- Poland                        # pl\n- Portugal                      # pt\n# - Puerto Rico                   # pr\n- Qatar                         # qa\n# - R\u00e9union                       # re\n- Romania                       # ro\n- Russia                        # ru\n# - Rwanda                        # rw\n# - Saint Barth\u00e9lemy              # bl\n# - Saint Lucia                   # lc\n# - Samoa                         # ws\n# - San Marino                    # sm\n# - Sao Tome and Principe         # st\n- Saudi Arabia                  # sa\n# - Senegal                       # sn\n- Serbia                        # rs\n# - Seychelles                    # sc\n# - Sierra Leone                  # sl\n- Singapore                     # sg\n# - Slovakia                      # sk\n# - Slovenia                      # si\n# - Solomon Islands               # sb\n# - Somalia                       # so\n- South Africa                  # za\n# - South Sudan                   # ss\n- Spain                         # es\n- Sri Lanka                     # lk\n# - Sudan                         # sd\n# - Suriname                      # sr\n- Sweden                        # se\n- Switzerland                   # ch\n# - Syria                         # sy\n# - Taiwan                        # tw\n# - Tajikistan                    # tj\n# - Tanzania                      # tz\n- Thailand                      # th\n# - Timor-Leste                   # tl\n# - Togo                          # tg\n# - Tokelau                       # tk\n# - Tonga                         # to\n# - Trinidad and Tobago           # tt\n# - Tunisia                       # tn\n- Turkey                        # tr\n# - Turkmenistan                  # tm\n# - Turks and Caicos              # tc\n# - Tuvalu                        # tv\n# - Uganda                        # ug\n- Ukraine                       # ua\n- United Arab Emirates          # ae\n- United Kingdom                # gb\n- United States of America      # us\n# - Uruguay                       # uy\n# - Uzbekistan                    # uz\n# - Vanuatu                       # vu\n# - Venezuela                     # ve\n- Vietnam                       # vn\n# - Yemen                         # ye\n# - Zambia                        # zm\n# - Zimbabwe                      # zw\n</code></pre>"},{"location":"defaults/movie/country/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\nKorea:\n- Republic of Korea\n- South Korea\n</code></pre>"},{"location":"defaults/movie/decade/","title":"Decade Collections","text":"<p>The <code>decade</code> Default Metadata File is used to dynamically create collections based on the decades available in your library, sorted by critic rating to create a \"best of \" <p>This file works has a Show Library Counterpart.</p> <p></p>"},{"location":"defaults/movie/decade/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/movie/decade/#collections-section-100","title":"Collections Section 100","text":"Collection Key Description <code>Decade Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>Best of &lt;&lt;Decade&gt;&gt;</code>Example: <code>Best of 2020s</code> <code>&lt;&lt;Year&gt;&gt;</code>Example: <code>2020</code> Collection of Movies released in this Decade."},{"location":"defaults/movie/decade/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: decade\n</code></pre>"},{"location":"defaults/movie/decade/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Default: <code>100</code>Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>critic_rating.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>exclude</code> Description: Exclude these Decades from creating a Dynamic Collection.Values: List of Decades found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Best of &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>Top &lt;&lt;limit&gt;&gt; &lt;&lt;library_translation&gt;&gt;s of the &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: decade\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: purple\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/movie/director/","title":"Director Collections","text":"<p>The <code>director</code> Default Metadata File is used to dynamically create collections based on the most popular directors in your library.</p>"},{"location":"defaults/movie/director/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/movie/director/#collections-section-150","title":"Collections Section 150","text":"Collection Key Description <code>Directors Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;director_name&gt;&gt;</code>Example: <code>Frank Welker</code> <code>&lt;&lt;director_name&gt;&gt;</code>Example: <code>Frank Welker</code> Collection of Movies by the Director."},{"location":"defaults/movie/director/#poster-styles","title":"Poster Styles","text":"<p>This Default can use the <code>style</code> template variable to easily change the posters styles.</p>"},{"location":"defaults/movie/director/#black-white-style-default","title":"Black &amp; White Style (Default)","text":""},{"location":"defaults/movie/director/#rainier-style","title":"Rainier Style","text":""},{"location":"defaults/movie/director/#signature-style","title":"Signature Style","text":""},{"location":"defaults/movie/director/#diiivoy-style","title":"Diiivoy Style","text":""},{"location":"defaults/movie/director/#diiivoy-color-style","title":"Diiivoy Color Style","text":""},{"location":"defaults/movie/director/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: director\n</code></pre>"},{"location":"defaults/movie/director/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>style</code> Description: Controls the visual theme of the collections created.Default: <code>bw</code>Values: <code>bw</code>, <code>rainier</code>, <code>signature</code>, <code>diiivoy</code>, or <code>diiivoycolor</code> <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>depth</code>Controls the depth within the casting credits to search for common actorsDefault: 5Values: Number greater than 0<code>limit</code>Controls the maximum number of collections to createDefault: 25Values: Number greater than 0 <code>include</code> Description: Force these Actors to be included to create a Dynamic Collection.Values: List of Actor Names <code>exclude</code> Description: Exclude these Directors from creating a Dynamic Collection.Values: List of Director Names <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; (Director)</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s directed by &lt;&lt;key_name&gt;&gt;.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>tmdb_birthday</code> Description: Controls if the Definition is run based on <code>tmdb_person</code>'s Birthday. Has 3 possible attributes <code>this_month</code>, <code>before</code> and <code>after</code>.Values:<code>this_month</code>Run's if Birthday is in current Month<code>true</code>/<code>false</code><code>before</code>Run if X Number of Days before the BirthdayNumber 0 or greater<code>after</code>Run if X Number of Days after the BirthdayNumber 0 or greater <code>tmdb_person_offset_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary tmdb_person_offset for the specific key.Default: <code>0</code>Values: Dictionary of Actor Name as the keys and the tmdb_person_offset as the value. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: director\ntemplate_variables:\nstyle: rainier\nuse_separator: false\nsep_style: purple\ndata:\ndepth: 10\nlimit: 20\nsort_by: title.asc\ntmdb_person_offset_Richard Brooks: 1\n</code></pre>"},{"location":"defaults/movie/franchise/","title":"Franchise Collections","text":"<p>The <code>franchise</code> Default Metadata File is used to create collections based on popular Movie franchises, and can be used as a replacement to the TMDb Collections that Plex creates out-of-the-box.</p> <p>Unlike most Default Metadata Files, Franchise works by placing collections inline with the main library items if your library allows it. For example, the \"Iron Man\" franchise collection will appear next to the \"Iron Man\" movies within your library.</p> <p>This file has a Show Library Counterpart.</p> <p></p>"},{"location":"defaults/movie/franchise/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/movie/franchise/#collections","title":"Collections","text":"Collection Key Description <code>&lt;&lt;Collection Name&gt;&gt;</code>Example: <code>Iron Man</code> <code>&lt;&lt;TMDb Collection ID&gt;&gt;</code>Example: <code>131292</code> Collection of Movies found in this Collection on TMDb."},{"location":"defaults/movie/franchise/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: franchise\n</code></pre>"},{"location":"defaults/movie/franchise/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Shared Collection Variables are NOT available to this default file.</p> Variable Description &amp; Values <code>summary_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary of the specified key's collection.Values: New Collection Summary <code>collection_section</code> Description: Adds a sort title with this collection sections.Values: Any number <code>order_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the sort order of the collections in their collection section.Values: Any number <code>collection_mode</code> Description: Controls the collection mode of all collections in this file.Values:<code>default</code>Library default<code>hide</code>Hide Collection<code>hide_items</code>Hide Items in this Collection<code>show_items</code>Show this Collection and its Items <code>minimum_items</code> Description: Controls the minimum items that the collection must have to be created.Default: <code>2</code>Values: Any number <code>movie_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the TMDb Movie IDs given to the specified key's collection. Overrides the default movie for that collection if used.Values: List of TMDb Movie IDs <code>name_mapping_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the name mapping value for using assets of the specified key's collection.Overrides the default name_mapping for that collection if used.Values: Any String <code>sort_title</code> Description: Sets the sort title for all collections. Use <code>&lt;&lt;collection_name&gt;&gt;</code> to use the collection name. Example: <code>\"!02_&lt;&lt;collection_name&gt;&gt;\"</code>Values: Any String with <code>&lt;&lt;collection_name&gt;&gt;</code> <code>sort_title_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the sort title of the specified key's collection.Default: <code>sort_title</code>Values: Any String <code>build_collection</code> Description: Controls if you want the collection to actually be built. i.e. you may just want these movies sent to Radarr.Values: <code>false</code> to not build the collection <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in this file.Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>title_override</code> Description: Overrides the default title_override dictionary.Values: Dictionary with <code>key: new_title</code> entries <code>exclude</code> Description: Exclude these TMDb Collections from creating a Dynamic Collection.Values: List of TMDb Collection IDs <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of TMDb Collection IDs <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of TMDb Collection IDs <code>radarr_add_missing</code> Description: Override Radarr <code>add_missing</code> attribute for all collections in a Defaults file.Values: <code>true</code> or <code>false</code> <code>radarr_add_missing_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>add_missing</code> attribute of the specified key's collection.Default: <code>radarr_add_missing</code>Values: <code>true</code> or <code>false</code> <code>radarr_folder</code> Description: Override Radarr <code>root_folder_path</code> attribute for all collections in a Defaults file.Values: Folder Path <code>radarr_folder_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>root_folder_path</code> attribute of the specified key's collection.Default: <code>radarr_folder</code>Values: Folder Path <code>radarr_tag</code> Description: Override Radarr <code>tag</code> attribute for all collections in a Defaults file.Values: List or comma-separated string of tags <code>radarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Override Radarr <code>tag</code> attribute of the specified key's collection.Default: <code>radarr_tag</code>Values: List or comma-separated string of tags <code>item_radarr_tag</code> Description: Used to append a tag in Radarr for every movie found by the builders that's in Radarr for all collections in a Defaults file.Values: List or comma-separated string of tags <code>item_radarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Used to append a tag in Radarr for every movie found by the builders that's in Radarr of the specified key's collection.Default: <code>item_radarr_tag</code>Values: List or comma-separated string of tags <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: franchise\ntemplate_variables:\ncollection_order: alpha\ncollection_section: \"02\"\nbuild_collection: false\nmovie_105995: 336560\nradarr_add_missing: true\n</code></pre>"},{"location":"defaults/movie/franchise/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/movie/franchise/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\n8091:       # Alien\n- 135416    # Prometheus\n2806:       # American Pie\n- 298820    # American Pie (Spin-off)\n87800:      # Appleseed\n- 371526    # Appleseed XIII\n477208:     # DC Super Hero Girls\n- 557495    # LEGO DC Super Hero Girls\n86066:      # Despicable Me\n- 544669    # Minions\n9485:       # The Fast and the Furious\n- 688042    # Hobbs &amp; Shaw\n86115:      # Garfield\n- 373918    # Garfield CGI\n91361:      # Halloween\n- 126209    # Halloween (Rob Zombie Series)\n9818:       # Mortal Kombat\n- 931431    # Mortal Kombat\n495:        # Shaft\n- 608103    # Shaft (Reboot)\n1582:       # Teenage Mutant Ninja Turtles\n- 401562    # Teenage Mutant Ninja Turtles (Remake)\n111751:     # Texas Chainsaw Massacre\n- 425175    # Texas Chainsaw (Reboot)\n2467:       # Tomb Raider\n- 621142    # Tomb Raider (Reboot)\n748:        # X-Men\n- 453993    # The Wolverine\n</code></pre>"},{"location":"defaults/movie/franchise/#default-title_override","title":"Default <code>title_override</code>","text":"<pre><code>title_override:\n10: \"Star Wars: Skywalker Saga\"\n535313: Godzilla (MonsterVerse)\n535790: Godzilla (Anime)\n</code></pre>"},{"location":"defaults/movie/franchise/#default-movie","title":"Default <code>movie</code>","text":"<pre><code>105995: 336560    # Anaconda: Lake Placid vs. Anaconda\n176097: 14177     # Barbershop: Beauty Shop\n448150: 567604    # Deadpool: Once Upon a Deadpool\n9735: 6466, 222724  # Friday the 13th: Freddy vs. Jason, Crystal Lake Memories: The Complete History of Friday the 13th\n386382: 326359, 460793  # Frozen: Frozen Fever, Olaf's Frozen Adventure\n2980: 43074 # Ghostbusters: Ghostbusters\n374509: 18983 # Godzilla (Showa): Godzilla, King of the Monsters!\n374511: 39256 # Godzilla (Heisei): Godzilla 1985\n535313: 293167  # Godzilla: Kong: Skull Island\n9743: 11454 # The Hannibal Lecter: Manhunter\n8354: 79218, 717095, 387893 # Ice Age: Ice Age: A Mammoth Christmas, Ice Age Continental Drift: Scrat Got Your Tongue, Ice Age: The Great Egg-Scapade\n70068: 658009, 643413, 450001, 751391, 44249, 182127, 44865 # Ip Man: Ip Man: Kung Fu Master, Ip Man and Four Kings, Master Z: Ip Man Legacy, Young Ip Man: Crisis Time, The Legend Is Born: Ip Man, Ip Man: The Final Fight, The Grandmaster\n328: 630322 # Jurassic Park: Battle at Big Rock\n8580: 38575 # The Karate Kid: The Karate Kid\n14740: 161143, 25472, 270946  # Madagascar: Madly Madagascar, Merry Madagascar, Penguins of Madagascar\n9818: 664767  # Mortal Kombat: Mortal Kombat Legends: Scorpion's Revenge\n171732: 39410 # Rebirth of Mothra: Mothra\n8581: 6466, 23437 # A Nightmare on Elm Street: Freddy vs. Jason, A Nightmare on Elm Street\n627517: 13155, 68728  # Oz: Return to Oz, Oz the Great and Powerful\n10789: 157433 # Pet Sematary: Pet Sematary\n708816: 305470, 306264  # Power Rangers: Power Rangers, Power Rangers Super Megaforce: The Legendary Battle\n190435: 687354, 11667 # Street Fighter (Animated): Street Fighter Assassin's Fist, Street Fighter\n1582: 1273  # Teenage Mutant Ninja Turtles: TMNT\n10194: 130925 # Toy Story: Partysaurus Rex\n63043: 73362  # TRON: TRON: The Next Day\n748: 567604 # X-Men: Once Upon a Deadpool\n</code></pre>"},{"location":"defaults/movie/franchise/#default-name_mapping","title":"Default <code>name_mapping</code>","text":"<pre><code>1565: 28 Days-Weeks Later\n508334: Angels in the\n115838: Escape From\n386534: Has Fallen\n87359: Mission Impossible\n133352: Resident Evil Biohazard\n115575: Star Trek Alternate Reality\n115570: Star Trek The Next Generation\n151: Star Trek The Original Series\n10: Star Wars Skywalker Saga\n</code></pre>"},{"location":"defaults/movie/producer/","title":"Producer Collections","text":"<p>The <code>producer</code> Default Metadata File is used to dynamically create collections based on the most popular producers in your library.</p>"},{"location":"defaults/movie/producer/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/movie/producer/#collections-section-160","title":"Collections Section 160","text":"Collection Key Description <code>Producer Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;producer_name&gt;&gt;</code>Example: <code>Frank Welker</code> <code>&lt;&lt;producer_name&gt;&gt;</code>Example: <code>Frank Welker</code> Collection of Movies by th Producer."},{"location":"defaults/movie/producer/#poster-styles","title":"Poster Styles","text":"<p>This Default can use the <code>style</code> template variable to easily change the posters styles.</p>"},{"location":"defaults/movie/producer/#black-white-style-default","title":"Black &amp; White Style (Default)","text":""},{"location":"defaults/movie/producer/#rainier-style","title":"Rainier Style","text":""},{"location":"defaults/movie/producer/#signature-style","title":"Signature Style","text":""},{"location":"defaults/movie/producer/#diiivoy-style","title":"Diiivoy Style","text":""},{"location":"defaults/movie/producer/#diiivoy-color-style","title":"Diiivoy Color Style","text":""},{"location":"defaults/movie/producer/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: producer\n</code></pre>"},{"location":"defaults/movie/producer/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>style</code> Description: Controls the visual theme of the collections created.Default: <code>bw</code>Values: <code>bw</code>, <code>rainier</code>, <code>signature</code>, <code>diiivoy</code>, or <code>diiivoycolor</code> <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>depth</code>Controls the depth within the casting credits to search for common actorsDefault: 5Values: Number greater than 0<code>limit</code>Controls the maximum number of collections to createDefault: 25Values: Number greater than 0 <code>include</code> Description: Force these Actors to be included to create a Dynamic Collection.Values: List of Actor Names <code>exclude</code> Description: Exclude these Producers from creating a Dynamic Collection.Values: List of Producer Names <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; (Producer)</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s produced by &lt;&lt;key_name&gt;&gt;.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>tmdb_birthday</code> Description: Controls if the Definition is run based on <code>tmdb_person</code>'s Birthday. Has 3 possible attributes <code>this_month</code>, <code>before</code> and <code>after</code>.Values:<code>this_month</code>Run's if Birthday is in current Month<code>true</code>/<code>false</code><code>before</code>Run if X Number of Days before the BirthdayNumber 0 or greater<code>after</code>Run if X Number of Days after the BirthdayNumber 0 or greater <code>tmdb_person_offset_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary tmdb_person_offset for the specific key.Default: <code>0</code>Values: Dictionary of Actor Name as the keys and the tmdb_person_offset as the value. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: producer\ntemplate_variables:\nstyle: diiivoycolor\nuse_separator: false\nsep_style: purple\ndata:\ndepth: 10\nlimit: 20\nsort_by: title.asc\ntmdb_person_offset_Richard Brooks: 1\n</code></pre>"},{"location":"defaults/movie/seasonal/","title":"Seasonal Collections","text":"<p>The <code>seasonal</code> Default Metadata File is used to dynamically create seasonal collections based on holidays .</p> <p></p>"},{"location":"defaults/movie/seasonal/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/movie/seasonal/#collections-section-000","title":"Collections Section 000","text":"Collection Key Description <code>Seasonal Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>\ud83c\udf8a New Year's Day Movies</code> <code>years</code> Collection of Movies related to New Year's Day. <code>\ud83d\udc98 Valentine's Day Movies</code> <code>valentine</code> Collection of Movies related to Valentine's Day. <code>\u2618 St. Patrick's Day Movies</code> <code>patrick</code> Collection of Movies related to St. Patrick's Day. <code>\ud83d\udc30 Easter Movies</code> <code>easter</code> Collection of Movies related to Easter. <code>\ud83e\udd31 Mother's Day Movies</code> <code>mother</code> Collection of Movies related to Mother's Day. <code>\ud83e\ude96 Memorial Day Movies</code> <code>memorial</code> Collection of Movies related to Memorial Day. <code>\ud83d\udc68 Father's Day Movies</code> <code>father</code> Collection of Movies related to Father's Day. <code>\ud83c\udf86 Independence Day Movies</code> <code>independence</code> Collection of Movies related to Independence Day. <code>\u2692 Labor Day Movies</code> <code>labor</code> Collection of Movies related to Labor Day. <code>\ud83c\udf83 Halloween Movies</code> <code>halloween</code> Collection of Movies related to Halloween. <code>\ud83e\udd83 Thanksgiving Movies</code> <code>thanksgiving</code> Collection of Movies related to Thanksgiving. <code>\ud83c\udf85 Christmas Movies</code> <code>christmas</code> Collection of Movies related to Christmas."},{"location":"defaults/movie/seasonal/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: seasonal\n</code></pre>"},{"location":"defaults/movie/seasonal/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>tmdb_collection_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the TMDb Collection IDs given to the specified key's collection. Overrides the default tmdb_collection for that collection if used.Values: List of TMDb Collection IDs <code>tmdb_movie_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the TMDb Movie IDs given to the specified key's collection. Overrides the default tmdb_movie for that collection if used.Values: List of TMDb Movie IDs <code>imdb_list_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the Movies in the IMDb List to the specified key's collection. Overrides the default imdb_list for that collection if used.Values: List of IMDb List URLs <code>trakt_list_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the Movies in the Trakt List to the specified key's collection.Values: List of Trakt List URLs <code>mdblist_list_&lt;&lt;key&gt;&gt;</code>1 Description: Adds the Movies in the MDb List to the specified key's collection.Values: List of MDbList URLs <code>emoji</code> Description: Controls the Emoji Prefix for all Collections. Set to <code>\"\"</code> to remove all emojis.Values: Any String <code>emoji_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the Emoji Prefix for the specified key's collection.Values: Any String <code>limit</code> Description: Changes the Builder Limit for all collections in this file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in this file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>schedule</code> Description: Changes the Schedule for all collections in this file. Use <code>daily</code> to have all collections show.Values: Any Schedule Option <code>schedule_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Schedule of the specified key's collection. Overrides the default schedule for that collection if used.Values: Any Schedule Option <code>data</code> Description: Overrides the default data dictionary. Defines the data that the custom dynamic collection processes.Values: Dictionary List of keys/names <code>append_data</code> Description: Appends to the default data dictionary.Values: Dictionary List of keys/names <code>exclude</code> Description: Exclude these Seasons from creating a Dynamic Collection.Values: List of Seasons Keys <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>A collection of &lt;&lt;key_name&gt;&gt; &lt;&lt;library_translation&gt;&gt;s that may relate to the season.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: seasonal\ntemplate_variables:\nuse_separator: true\nsep_style: stb\nuse_independence: false\nschedule_thanksgiving: range(10/01-10/30)\nsort_by: random\n# Add a custom holiday\nappend_data:\nveteran: Veteran's Day\nschedule_veteran: range(11/01-11/30)\nimdb_list_veteran: https://www.imdb.com/list/ls002014923/\nemoji_veteran: \"\ud83e\ude96 \"\n</code></pre>"},{"location":"defaults/movie/seasonal/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/movie/seasonal/#default-data","title":"Default <code>data</code>","text":"<pre><code>data:\nyears: New Year's Day\nvalentine: Valentine's Day\npatrick: St. Patrick's Day\neaster: Easter\nmother: Mother's Day\nmemorial: Memorial Day\nfather: Father's Day\nindependence: Independence Day\nlabor: Labor Day\nhalloween: Halloween\nthanksgiving: Thanksgiving\nchristmas: Christmas\n</code></pre>"},{"location":"defaults/movie/seasonal/#default-tmdb_collection","title":"Default <code>tmdb_collection</code>","text":"<pre><code>tmdb_collection:\nhalloween:\n- 185103    # Hotel Transylvania\n- 11716     # Addams Family\n- 750822    # Addams Family Animated\n- 313086    # Conjuring\n- 91361     # Halloween Collection\n- 8581      # A Nightmare on Elm Street Collection\n- 1733      # The Mummy Collection\n- 8091      # Alien Collection\n- 2980      # Ghostbusters\n- 751156    # Hocus Pocus\n</code></pre>"},{"location":"defaults/movie/seasonal/#default-tmdb_movie","title":"Default <code>tmdb_movie</code>","text":"<pre><code>tmdb_movie:\nhalloween:\n- 23437    # A Nightmare on Elm Street (2010)\n</code></pre>"},{"location":"defaults/movie/seasonal/#default-imdb_list","title":"Default <code>imdb_list</code>","text":"<pre><code>imdb_list:\nyears: https://www.imdb.com/list/ls066838460/\nvalentine:\n- https://www.imdb.com/list/ls000094398/\n- https://www.imdb.com/list/ls057783436/\n- https://www.imdb.com/list/ls064427905/\npatrick: https://www.imdb.com/list/ls063934595/\neaster:\n- https://www.imdb.com/list/ls062665509/\n- https://www.imdb.com/list/ls051733651/\nmother: https://www.imdb.com/list/ls072551197/\nmemorial: https://www.imdb.com/list/ls002014923/\nfather: https://www.imdb.com/list/ls020471057/\nindependence:\n- https://www.imdb.com/list/ls068664510/\n- https://www.imdb.com/list/ls080925875/\nlabor: https://www.imdb.com/list/ls002014923/\nhalloween:\n- https://www.imdb.com/list/ls023118929/\n- https://www.imdb.com/list/ls000099714/\nthanksgiving:\n- https://www.imdb.com/list/ls000835734/\n- https://www.imdb.com/list/ls091597850/\nchristmas: https://www.imdb.com/list/ls000096828/\n</code></pre>"},{"location":"defaults/movie/seasonal/#default-schedule","title":"Default <code>schedule</code>","text":"<pre><code>schedule:\nyears: range(12/26-01/04)\nvalentine: range(02/01-02/29)\npatrick: range(03/01-03/18)\neaster: range(03/20-04/30)\nmother: range(05/05-05/10)\nmemorial: range(5/18-6/7)\nfather: range(06/15-06/20)\nindependence: range(06/23-07/11)\nlabor: range(09/01-09/10)\nhalloween: range(10/01-10/31)\nthanksgiving: range(11/01-11/30)\nchristmas: range(12/01-12/31)\n</code></pre>"},{"location":"defaults/movie/writer/","title":"Writer Collections","text":"<p>The <code>writer</code> Default Metadata File is used to dynamically create collections based on the most popular writers in your library.</p>"},{"location":"defaults/movie/writer/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Movie</p>"},{"location":"defaults/movie/writer/#collections-section-170","title":"Collections Section 170","text":"Collection Key Description <code>Writers Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;writer_name&gt;&gt;</code>Example: <code>Frank Welker</code> <code>&lt;&lt;writer_name&gt;&gt;</code>Example: <code>Frank Welker</code> Collection of Movies by the Writer."},{"location":"defaults/movie/writer/#poster-styles","title":"Poster Styles","text":"<p>This Default can use the <code>style</code> template variable to easily change the posters styles.</p>"},{"location":"defaults/movie/writer/#black-white-style-default","title":"Black &amp; White Style (Default)","text":""},{"location":"defaults/movie/writer/#rainier-style","title":"Rainier Style","text":""},{"location":"defaults/movie/writer/#signature-style","title":"Signature Style","text":""},{"location":"defaults/movie/writer/#diiivoy-style","title":"Diiivoy Style","text":""},{"location":"defaults/movie/writer/#diiivoy-color-style","title":"Diiivoy Color Style","text":""},{"location":"defaults/movie/writer/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: writer\n</code></pre>"},{"location":"defaults/movie/writer/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>style</code> Description: Controls the visual theme of the collections created.Default: <code>bw</code>Values: <code>bw</code>, <code>rainier</code>, <code>signature</code>, <code>diiivoy</code>, or <code>diiivoycolor</code> <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>data</code> Description: Replaces the <code>data</code> dynamic collection value.AttributeDescription &amp; Values<code>depth</code>Controls the depth within the casting credits to search for common actorsDefault: 5Values: Number greater than 0<code>limit</code>Controls the maximum number of collections to createDefault: 25Values: Number greater than 0 <code>include</code> Description: Force these Actors to be included to create a Dynamic Collection.Values: List of Actor Names <code>exclude</code> Description: Exclude these Writers from creating a Dynamic Collection.Values: List of Writer Names <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; (Writer)</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s written by &lt;&lt;key_name&gt;&gt;.</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>tmdb_birthday</code> Description: Controls if the Definition is run based on <code>tmdb_person</code>'s Birthday. Has 3 possible attributes <code>this_month</code>, <code>before</code> and <code>after</code>.Values:<code>this_month</code>Run's if Birthday is in current Month<code>true</code>/<code>false</code><code>before</code>Run if X Number of Days before the BirthdayNumber 0 or greater<code>after</code>Run if X Number of Days after the BirthdayNumber 0 or greater <code>tmdb_person_offset_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary tmdb_person_offset for the specific key.Default: <code>0</code>Values: Dictionary of Actor Name as the keys and the tmdb_person_offset as the value. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: writer\ntemplate_variables:\nstyle: signature\nuse_separator: false\nsep_style: purple\ndata:\ndepth: 10\nlimit: 20\nsort_by: title.asc\ntmdb_person_offset_Charles Bennett: 1\n</code></pre>"},{"location":"defaults/overlays/audio_codec/","title":"Audio Codec Overlay","text":"<p>The <code>audio_codec</code> Default Overlay File is used to create an overlay based on the audio codec available on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/audio_codec/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show, Season, Episode</p> <p>Recommendations: Designed for TRaSH Guides filename naming scheme</p>"},{"location":"defaults/overlays/audio_codec/#supported-audio-codecs","title":"Supported Audio Codecs","text":"Audio Codec Key Weight Dolby TrueHD Atmos <code>truehd_atmos</code> <code>160</code> DTS-X <code>dtsx</code> <code>150</code> Dolby Digital+ / E-AC3 <code>plus_atmos</code> <code>140</code> Dolby Atmos <code>dolby_atmos</code> <code>130</code> Dolby TrueHD <code>truehd</code> <code>120</code> DTS-HD-MA <code>ma</code> <code>110</code> FLAC <code>flac</code> <code>100</code> PCM <code>pcm</code> <code>90</code> DTS-HD-HRA <code>hra</code> <code>80</code> Dolby Digital+ <code>plus</code> <code>70</code> DTS-ES <code>dtses</code> <code>60</code> DTS <code>dts</code> <code>50</code> Dolby Digital <code>digital</code> <code>40</code> AAC <code>aac</code> <code>30</code> MP3 <code>mp3</code> <code>20</code> Opus <code>opus</code> <code>10</code>"},{"location":"defaults/overlays/audio_codec/#standard-style","title":"Standard Style","text":"<p>Below is a screenshot of the alternative Standard (<code>standard</code>) style which can be set via the <code>style</code> template variable.</p> <p></p>"},{"location":"defaults/overlays/audio_codec/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: audio_codec\nTV Shows:\noverlay_path:\n- pmm: audio_codec\n- pmm: audio_codec\ntemplate_variables:\noverlay_level: season\n- pmm: audio_codec\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/audio_codec/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>0</code> <code>horizontal_align</code> <code>center</code> <code>vertical_offset</code> <code>15</code> <code>vertical_align</code> <code>top</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>105</code>/<code>189</code> Variable Description &amp; Values <code>style</code> Description: Choose the Overlay Style.Default: <code>compact</code>Values: <code>compact</code> or <code>standard</code> <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <code>regex_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the regex of the Overlay Search.Values: Any Proper Regex <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: audio_codec\ntemplate_variables:\nuse_opus: false\nuse_mp3: false\nstyle: standard\n</code></pre>"},{"location":"defaults/overlays/commonsense/","title":"CommonSense Age Rating Overlay","text":"<p>The <code>commonsense</code> Default Overlay File is used to create an overlay based on the CommonSense Age Rating on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/commonsense/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Movie &amp; Show</p> <p>Requirements: Use the Mass Content Rating Update Library Operation with either <code>mdb_commonsense</code> or <code>mdb_commonsense0</code> to update Plex to the Common Sense Rating.</p>"},{"location":"defaults/overlays/commonsense/#supported-commonsense-age-rating","title":"Supported CommonSense Age Rating","text":"Rating Key 1+ <code>1</code> 2+ <code>2</code> 3+ <code>3</code> 4+ <code>4</code> 5+ <code>5</code> 6+ <code>6</code> 7+ <code>7</code> 8+ <code>8</code> 9+ <code>9</code> 10+ <code>10</code> 11+ <code>11</code> 12+ <code>12</code> 13+ <code>13</code> 14+ <code>14</code> 15+ <code>15</code> 16+ <code>16</code> 17+ <code>17</code> 18+ <code>18</code> NR <code>nr</code>"},{"location":"defaults/overlays/commonsense/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: commonsense\nTV Shows:\noverlay_path:\n- pmm: commonsense\n- pmm: commonsense\ntemplate_variables:\noverlay_level: season\n- pmm: commonsense\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/commonsense/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>270</code> <code>vertical_align</code> <code>bottom</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>55</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>addon_offset</code> Description: Text Addon Image Offset from the text.Default: <code>15</code>Values: Any Number greater then 0 <code>addon_position</code> Description: Text Addon Image Alignment in relation to the text.Default: <code>left</code>Values: <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code> <code>pre_text</code> Description: Choose the text before the key for the Overlay.Values: Any String <code>post_text</code> Description: Choose the text after the key for the Overlay.Default: <code>+</code>Values: Any String <code>pre_nr_text</code> Description: Choose the text before the <code>nr</code> key for the Overlay.Values: Any String <code>post_nr_text</code> Description: Choose the text after the <code>nr</code> key for the Overlay.Values: Any String <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: commonsense\ntemplate_variables:\npre_text: \"CS\"\n</code></pre>"},{"location":"defaults/overlays/content_rating_uk/","title":"Content Rating UK Overlay","text":"<p>The <code>content_rating_uk</code> Default Overlay File is used to create an overlay based on the BBFC Age Rating on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/content_rating_uk/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Movie &amp; Show</p> <p>Requirements: Use the Mass Content Rating Update Library Operation with either <code>mdb</code> or <code>omdb</code> to update Plex to the BBFC Rating.</p>"},{"location":"defaults/overlays/content_rating_uk/#supported-content-rating-uk","title":"Supported Content Rating UK","text":"Rating Key U <code>u</code> PG <code>pg</code> 12 <code>12</code> 12a <code>12a</code> 15 <code>15</code> 18 <code>18</code> R18 <code>r18</code> NR <code>nr</code>"},{"location":"defaults/overlays/content_rating_uk/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: content_rating_uk\nTV Shows:\noverlay_path:\n- pmm: content_rating_uk\n- pmm: content_rating_uk\ntemplate_variables:\noverlay_level: season\n- pmm: content_rating_uk\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/content_rating_uk/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>color</code> `` <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>270</code> <code>vertical_align</code> <code>bottom</code> Variable Description &amp; Values <code>color</code> Description: Color version of the content rating imagesDefault:<code>` Set to</code>false` if you want b&amp;w version. <code>back_color</code> Description: Choose the back color in RGBA for the overlay lozenge.Default:<code>#00000099</code> <code>back_radius</code> Description: Choose the back radius for the overlay lozenge.Default:<code>30</code> <code>back_width</code> Description: Choose the back width for the overlay lozenge.Default:<code>305</code> <code>back_height</code> Description: Choose the back height for the overlay lozenge.Default:<code>105</code> <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>55</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>addon_offset</code> Description: Text Addon Image Offset from the text.Default: <code>15</code>Values: Any Number greater then 0 <code>addon_position</code> Description: Text Addon Image Alignment in relation to the text.Default: <code>left</code>Values: <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code> <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: content_rating_uk\ntemplate_variables:\ncolor: false\n</code></pre>"},{"location":"defaults/overlays/content_rating_us_movie/","title":"Content Rating US Movie Overlay","text":"<p>The <code>content_rating_us_movie</code> Default Overlay File is used to create an overlay based on the MPAA Age Rating on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/content_rating_us_movie/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Movie</p> <p>Requirements: Use the Mass Content Rating Update Library Operation with either <code>mdb</code> or <code>omdb</code> to update Plex to the MPAA Rating.</p>"},{"location":"defaults/overlays/content_rating_us_movie/#supported-content-rating-us","title":"Supported Content Rating US","text":"Rating Key G <code>g</code> PG <code>pg</code> PG-13 <code>pg-13</code> R <code>r</code> NC-17 <code>nc-17</code> NR <code>nr</code>"},{"location":"defaults/overlays/content_rating_us_movie/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: content_rating_us_movie\n</code></pre>"},{"location":"defaults/overlays/content_rating_us_movie/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>color</code> `` <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>270</code> <code>vertical_align</code> <code>bottom</code> Variable Description &amp; Values <code>color</code> Description: Color version of the content rating imagesDefault:<code>` Set to</code>false` if you want b&amp;w version. <code>back_color</code> Description: Choose the back color in RGBA for the overlay lozenge.Default:<code>#00000099</code> <code>back_radius</code> Description: Choose the back radius for the overlay lozenge.Default:<code>30</code> <code>back_width</code> Description: Choose the back width for the overlay lozenge.Default:<code>305</code> <code>back_height</code> Description: Choose the back height for the overlay lozenge.Default:<code>105</code> <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>55</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>addon_offset</code> Description: Text Addon Image Offset from the text.Default: <code>15</code>Values: Any Number greater then 0 <code>addon_position</code> Description: Text Addon Image Alignment in relation to the text.Default: <code>left</code>Values: <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: content_rating_us_movie\ntemplate_variables:\ncolor: false\n</code></pre>"},{"location":"defaults/overlays/content_rating_us_show/","title":"Content Rating US Show Overlay","text":"<p>The <code>content_rating_us_show</code> Default Overlay File is used to create an overlay based on the MPAA Age Rating on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/content_rating_us_show/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Show</p> <p>Requirements: Use the Mass Content Rating Update Library Operation with either <code>mdb</code> or <code>omdb</code> to update Plex to the MPAA Rating.</p>"},{"location":"defaults/overlays/content_rating_us_show/#supported-content-rating-us","title":"Supported Content Rating US","text":"Rating Key TV-G <code>tv-g</code> TV-Y <code>tv-y</code> TV-PG <code>tv-pg</code> TV-14 <code>tv-14</code> TV-MA <code>tv-ma</code> NR <code>nr</code>"},{"location":"defaults/overlays/content_rating_us_show/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: content_rating_us_show\n- pmm: content_rating_us_show\ntemplate_variables:\noverlay_level: season\n- pmm: content_rating_us_show\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/content_rating_us_show/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>color</code> `` <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>270</code> <code>vertical_align</code> <code>bottom</code> Variable Description &amp; Values <code>color</code> Description: Color version of the content rating imagesDefault:<code>` Set to</code>false` if you want b&amp;w version. <code>back_color</code> Description: Choose the back color in RGBA for the overlay lozenge.Default:<code>#00000099</code> <code>back_radius</code> Description: Choose the back radius for the overlay lozenge.Default:<code>30</code> <code>back_width</code> Description: Choose the back width for the overlay lozenge.Default:<code>305</code> <code>back_height</code> Description: Choose the back height for the overlay lozenge.Default:<code>105</code> <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>55</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>addon_offset</code> Description: Text Addon Image Offset from the text.Default: <code>15</code>Values: Any Number greater then 0 <code>addon_position</code> Description: Text Addon Image Alignment in relation to the text.Default: <code>left</code>Values: <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: content_rating_us_show\ntemplate_variables:\ncolor: false\n- pmm: content_rating_us_show\ntemplate_variables:\ncolor: false\noverlay_level: season\n- pmm: content_rating_us_show\ntemplate_variables:\ncolor: false\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/direct_play/","title":"Direct Play Overlay","text":"<p>The <code>direct_play</code> Default Overlay File is used to create an overlay to indicate items that cannot be transcoded and instead only support Direct Play (i.e. if you use Tautulli to kill 4K transcoding)</p> <p></p>"},{"location":"defaults/overlays/direct_play/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Movie &amp; Show</p>"},{"location":"defaults/overlays/direct_play/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: direct_play\nTV Shows:\noverlay_path:\n- pmm: direct_play\n</code></pre>"},{"location":"defaults/overlays/direct_play/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>0</code> <code>horizontal_align</code> <code>center</code> <code>vertical_offset</code> <code>150</code> <code>vertical_align</code> <code>bottom</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>170</code> Variable Description &amp; Values <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: direct_play\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/episode_info/","title":"Episode Info Overlay","text":"<p>The <code>episode_info</code> Default Overlay File is used to create an overlay on the episode title card on the episode numbering within a given series in your library.</p> <p></p>"},{"location":"defaults/overlays/episode_info/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Show</p>"},{"location":"defaults/overlays/episode_info/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: episode_info\n</code></pre>"},{"location":"defaults/overlays/episode_info/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>270</code> <code>vertical_align</code> <code>bottom</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>55</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: episode_info\ntemplate_variables:\nfont_color: \"#FFFFFF99\"\n</code></pre>"},{"location":"defaults/overlays/flixpatrol/","title":"FlixPatrol Top Overlays","text":"<p>The <code>flixpatrol</code> Default Overlay File is used to create an overlay based on the Top Lists from FlixPatrol on items within your library.</p> <p></p>"},{"location":"defaults/overlays/flixpatrol/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show</p>"},{"location":"defaults/overlays/flixpatrol/#supported-services","title":"Supported Services","text":"Service Key Weight Netflix <code>netflix</code> <code>60</code> Disney+ <code>disney</code> <code>50</code> MAX <code>max</code> <code>40</code> Hulu <code>hulu</code> <code>30</code> Paramount+ <code>paramount</code> <code>20</code> Prime Video <code>prime</code> <code>10</code> Apple+ <code>apple</code> <code>9</code>"},{"location":"defaults/overlays/flixpatrol/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: flixpatrol\nTV Shows:\noverlay_path:\n- pmm: flixpatrol\n</code></pre>"},{"location":"defaults/overlays/flixpatrol/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables except <code>horizontal_offset</code>, <code>horizontal_align</code>, <code>vertical_offset</code>, and <code>vertical_align</code> are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>30</code> <code>horizontal_align</code> <code>left</code>/<code>right</code> <code>vertical_offset</code> <code>465</code>/<code>670</code>/<code>875</code> <code>vertical_align</code> <code>top</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>160</code> <code>back_height</code> <code>160</code> <code>back_padding</code> <code>15</code> Variable Description &amp; Values <code>position</code> Description: Changes the position of the Overlays.Default: <code>right</code>Values: <code>right</code>, <code>left</code>, or List of Coordinates <code>style</code> Description: Changes the style of the Logo Image.Default: <code>round</code>Values: <code>round</code> or <code>square</code> <code>pre_text</code> Description: Changes the text before the number.Default: <code>TOP</code>Values: Any String <code>limit</code> Description: Changes the Builder Limit for all overlays in a Defaults file.Default: <code>10</code>Values: Any Number greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's overlay.Default: <code>limit</code>Values: Any Number greater then 0 <code>location</code> Description: Changes the Builder Location for all overlays in a Defaults file.Default: <code>world</code>Values: <code>location</code> Attribute Options <code>location_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Location of the specified key's overlay.Default: <code>location</code>Values: <code>location</code> Attribute Options <code>time_window</code> Description: Changes the Builder Time Window for all overlays in a Defaults file.Default: <code>last_week</code>Values: <code>time_window</code> Attribute Options <code>time_window_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Time Window of the specified key's overlay.Default: <code>time_window</code>Values: <code>time_window</code> Attribute Options <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>50</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>addon_offset</code> Description: Text Addon Image Offset from the text.Default: <code>30</code>Values: Any Number greater then 0 <code>addon_position</code> Description: Text Addon Image Alignment in relation to the text.Default: <code>top</code>Values: <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code> <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: flixpatrol\ntemplate_variables:\nlocation: united_states\n</code></pre>"},{"location":"defaults/overlays/language_count/","title":"Audio/Subtitle Language Count Overlay","text":"<p>The <code>language_count</code> Default Overlay File is used to create an overlay based on the number of audio/subtitle languages available on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/language_count/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show, Season, Episode</p>"},{"location":"defaults/overlays/language_count/#supported-audiosubtitle-languages","title":"Supported Audio/Subtitle Languages","text":"Audio/Subtitle Languages Key Weight Dual <code>dual</code> <code>20</code> Multi <code>multi</code> <code>10</code>"},{"location":"defaults/overlays/language_count/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: language_count\nTV Shows:\noverlay_path:\n- pmm: language_count\n- pmm: language_count\ntemplate_variables:\noverlay_level: season\n- pmm: language_count\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/language_count/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>0</code> <code>horizontal_align</code> <code>center</code> <code>vertical_offset</code> <code>30</code> <code>vertical_align</code> <code>bottom</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>188</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>use_subtitles</code> Description: Controls if the overlay is based on subtitle language instead of audio language.Values: <code>true</code> to look at subtitle language instead of audio language <code>minimum</code> Description: Choose the minimum for the <code>multi</code> Overlay.Default: <code>2</code> Values: Any Number <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: language_count\ntemplate_variables:\nuse_subtitles: true\n</code></pre>"},{"location":"defaults/overlays/languages/","title":"Audio/Subtitle Language Flags Overlay","text":"<p>The <code>languages</code> Default Overlay File is used to create an overlay of a flag and ISO 639-1 Code based on the audio/subtitle languages available on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/languages/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Movie &amp; Show</p>"},{"location":"defaults/overlays/languages/#supported-audiosubtitle-language-flags","title":"Supported Audio/Subtitle Language Flags","text":"Audio/Subtitle Languages Key Weight Default Flag Default Use English <code>en</code> <code>610</code> <code>us</code> \u2705 German <code>de</code> <code>600</code> <code>de</code> \u2705 French <code>fr</code> <code>590</code> <code>fr</code> \u2705 Spanish <code>es</code> <code>580</code> <code>es</code> \u2705 Portuguese <code>pt</code> <code>570</code> <code>pt</code> \u2705 Japanese <code>ja</code> <code>560</code> <code>jp</code> \u2705 Korean <code>ko</code> <code>550</code> <code>kr</code> \u274c Chinese <code>zh</code> <code>540</code> <code>cn</code> \u274c Danish <code>da</code> <code>530</code> <code>dk</code> \u274c Russian <code>ru</code> <code>520</code> <code>ru</code> \u274c Italian <code>it</code> <code>510</code> <code>it</code> \u274c Hindi <code>hi</code> <code>500</code> <code>in</code> \u274c Telugu <code>te</code> <code>490</code> <code>in</code> \u274c Farsi <code>fa</code> <code>480</code> <code>ir</code> \u274c Thai <code>th</code> <code>470</code> <code>th</code> \u274c Dutch <code>nl</code> <code>460</code> <code>nl</code> \u274c Norwegian <code>no</code> <code>450</code> <code>no</code> \u274c Icelandic <code>is</code> <code>440</code> <code>is</code> \u274c Swedish <code>sv</code> <code>430</code> <code>se</code> \u274c Turkish <code>tr</code> <code>420</code> <code>tr</code> \u274c Polish <code>pl</code> <code>410</code> <code>pl</code> \u274c Czech <code>cs</code> <code>400</code> <code>cz</code> \u274c Ukrainian <code>uk</code> <code>390</code> <code>ua</code> \u274c Hungarian <code>hu</code> <code>380</code> <code>hu</code> \u274c Arabic <code>ar</code> <code>370</code> <code>eg</code> \u274c Bulgarian <code>bg</code> <code>360</code> <code>bg</code> \u274c Bengali <code>bn</code> <code>350</code> <code>bd</code> \u274c Bosnian <code>bs</code> <code>340</code> <code>ba</code> \u274c Catalan <code>ca</code> <code>330</code> <code>es</code> \u274c Welsh <code>cy</code> <code>320</code> <code>uk</code> \u274c Greek <code>el</code> <code>310</code> <code>gr</code> \u274c Estonian <code>et</code> <code>300</code> <code>ee</code> \u274c Basque <code>eu</code> <code>290</code> <code>es</code> \u274c Finnish <code>fi</code> <code>280</code> <code>fi</code> \u274c Filipino <code>fl</code> <code>270</code> <code>ph</code> \u274c Galician <code>gl</code> <code>260</code> <code>es</code> \u274c Hebrew <code>he</code> <code>250</code> <code>il</code> \u274c Croatian <code>hr</code> <code>240</code> <code>hr</code> \u274c Indonesian <code>id</code> <code>230</code> <code>id</code> \u274c Georgian <code>ka</code> <code>220</code> <code>ge</code> \u274c Kazakh <code>kk</code> <code>210</code> <code>kz</code> \u274c Kannada <code>kn</code> <code>200</code> <code>in</code> \u274c Latin <code>la</code> <code>190</code> <code>it</code> \u274c Lithuanian <code>lt</code> <code>180</code> <code>lt</code> \u274c Latvian <code>lv</code> <code>170</code> <code>lv</code> \u274c Macedonian <code>mk</code> <code>160</code> <code>mk</code> \u274c Malayalam <code>ml</code> <code>150</code> <code>in</code> \u274c Marathi <code>mr</code> <code>140</code> <code>in</code> \u274c Malay <code>ms</code> <code>130</code> <code>my</code> \u274c Norwegian Nokm\u00e5l <code>nb</code> <code>120</code> <code>no</code> \u274c Norwegian Nynorsk <code>nn</code> <code>110</code> <code>no</code> \u274c Punjabi <code>pa</code> <code>100</code> <code>in</code> \u274c Romanian <code>ro</code> <code>90</code> <code>ro</code> \u274c Slovak <code>sk</code> <code>80</code> <code>sk</code> \u274c Slovenian <code>sl</code> <code>70</code> <code>si</code> \u274c Albanian <code>sq</code> <code>60</code> <code>al</code> \u274c Serbian <code>sr</code> <code>50</code> <code>rs</code> \u274c Swahili <code>sw</code> <code>40</code> <code>tz</code> \u274c Tamil <code>ta</code> <code>30</code> <code>in</code> \u274c Urdu <code>ur</code> <code>20</code> <code>pk</code> \u274c Vietnamese <code>vi</code> <code>10</code> <code>vn</code> \u274c"},{"location":"defaults/overlays/languages/#square-style","title":"Square Style","text":"<p>Below is a screenshot of the alternative Square (<code>square</code>) style which can be set via the <code>style</code> template variable.</p> <p></p>"},{"location":"defaults/overlays/languages/#half-style","title":"Half Style","text":"<p>Below is a screenshot of the alternative Half (<code>half</code>) style which can be set via the <code>style</code> template variable.</p> <p></p>"},{"location":"defaults/overlays/languages/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: languages\nTV Shows:\noverlay_path:\n- pmm: languages\n- pmm: languages\ntemplate_variables:\noverlay_level: season\n- pmm: languages\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/languages/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code>/<code>206</code>/<code>397</code>/<code>588</code>/<code>779</code> <code>horizontal_align</code> <code>left</code>/<code>right</code>/<code>center</code> <code>vertical_offset</code> <code>15</code>/<code>76</code>/<code>137</code>/<code>198</code>/<code>259</code> <code>vertical_align</code> <code>top</code>/<code>bottom</code>/<code>center</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>26</code>/<code></code> <code>back_width</code> <code>190</code> <code>back_height</code> <code>105</code> <code>back_align</code> <code>left</code>/<code>right</code> <code>font</code> <code>fonts/Inter-Bold.ttf</code> <code>font_size</code> <code>50</code> Variable Description &amp; Values <code>languages</code> Description: Controls which Languages will be active.Default: <code>[\"en\", \"de\", \"fr\", \"es\", \"pt\", \"ja\"]</code> Values: List of ISO 639-1 Codes for the Languages desired <code>use_subtitles</code> Description: Controls if the overlay is based on subtitle language instead of audio language.Values: <code>true</code> to look at subtitle language instead of audio language <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <code>horizontal_position</code> Description: Choose the horizontal position for the flag group.Default: <code>left</code>Values: <code>left</code>, <code>left2</code>, <code>center</code>, <code>center_left</code>, <code>center_right</code>, <code>right</code> or <code>right2</code> <code>vertical_position</code> Description: Choose the vertical position for the flag group.Default: <code>top</code>Values: <code>top</code>, <code>top2</code>, <code>top3</code>, <code>center</code>, <code>center_top</code>, <code>center_bottom</code>, <code>bottom</code>, <code>bottom2</code> or <code>bottom3</code> <code>overlay_limit</code> Description: Choose the number of overlay this queue displays.Default: <code>3</code>Values: <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, or <code>5</code> <code>group_alignment</code> Description: Choose the display alignment for the flag group.Default: <code>vertical</code>Values: <code>horizontal</code>, or <code>vertical</code> <code>style</code> Description: Controls the visual theme of the overlays created.Values:<code>round</code>Round Theme<code>square</code>Square Theme<code>half</code>Square Flag with Round Background <code>flag_alignment</code> Description: Controls the flag alignment in the backdrop.Default: <code>left</code>Values: <code>left</code> or <code>right</code> <code>offset</code> Description: Controls the offset between the flag and the text.Default: <code>10</code>Values: Any Integer 0 or greater <code>use_lowercase</code> Description: Controls if the overlay display is in lowercase.Values: <code>true</code> to use lowercase text <code>position</code> Description: Use the Custom Given Queue instead of the the provided Queues.Values: List of Coordinates <code>country_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the country image for the Overlay.Default: Listed in the Table aboveValues: ISO 3166-1 Country Code for the flag desired <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: languages\ntemplate_variables:\nlanguages:\n- en\n- ja\nuse_subtitles: true\nstyle: square\n</code></pre>"},{"location":"defaults/overlays/mediastinger/","title":"MediaStinger Overlay","text":"<p>The <code>mediastinger</code> Default Overlay File is used to create an overlay based on if there's an after/during credit scene on each movie within your library.</p> <p></p>"},{"location":"defaults/overlays/mediastinger/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie</p>"},{"location":"defaults/overlays/mediastinger/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: mediastinger\n</code></pre>"},{"location":"defaults/overlays/mediastinger/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>200</code> <code>horizontal_align</code> <code>right</code> <code>vertical_offset</code> <code>15</code> <code>vertical_align</code> <code>top</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>105</code> <code>back_height</code> <code>105</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: mediastinger\ntemplate_variables:\nfont_color: \"#FFFFFF99\"\n</code></pre>"},{"location":"defaults/overlays/network/","title":"Network Overlay","text":"<p>The <code>network</code> Default Overlay File is used to create an overlay based on the show network on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/network/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported library types: Show</p>"},{"location":"defaults/overlays/network/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: network\n- pmm: network\ntemplate_variables:\noverlay_level: season\n- pmm: network\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/network/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>370</code> <code>vertical_align</code> <code>bottom</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>105</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: network\ntemplate_variables:\nvertical_offset: 390\n- pmm: network\ntemplate_variables:\nvertical_offset: 390\noverlay_level: season\n- pmm: network\ntemplate_variables:\nvertical_offset: 390\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/ratings/","title":"Ratings Overlays","text":"<p>The <code>ratings</code> Default Overlay File is used to create an overlay based on the Critic Rating, Audience Rating, and User Rating in Plex for each item within your library.</p> <p>This file only updates the overlays based on the data in Plex, it will not pull the ratings directly from any third-party website, see recommendations below for more info.</p> <p>Please read PMM Ratings Explained for more understanding on how PMM interacts with ratings.</p> <p></p>"},{"location":"defaults/overlays/ratings/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show, Episode</p> <p>Requirements: Template Variables must be configured, otherwise this file will not apply any overlays.</p> <p>Recommendations: Use the Mass * Rating Update Library Operation and the Mass Episode * Rating Update Library Operation to update Plex to the Ratings you want on the Overlay.</p>"},{"location":"defaults/overlays/ratings/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>  Movies:\noverlay_path:\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating2: audience\nrating3: user\nrating1_image: imdb\nrating2_image: rt_popcorn\nrating3_image: tmdb\noperations:\nmass_critic_rating_update: imdb\nmass_audience_rating_update: mdb_tomatoesaudience\nmass_user_rating_update: tmdb\nTV Shows:\noverlay_path:\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating2: audience\nrating3: user\nrating1_image: imdb\nrating2_image: rt_popcorn\nrating3_image: tmdb\n- pmm: ratings\ntemplate_variables:\noverlay_level: episode\nrating1: critic\nrating2: audience\nrating1_image: imdb\nrating2_image: tmdb\noperations:\nmass_critic_rating_update: imdb\nmass_audience_rating_update: mdb_tomatoesaudience\nmass_user_rating_update: tmdb\nmass_episode_critic_rating_update: imdb\nmass_episode_audience_rating_update: tmdb\n</code></pre>"},{"location":"defaults/overlays/ratings/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> <p>All Shared Overlay Variables can be appended by <code>rating1_</code>, <code>rating2_</code>, or <code>rating3_</code> to change that attribute on each rating individually.</p> Variable Default <code>horizontal_offset</code> <code>200</code> <code>horizontal_align</code> <code>right</code> <code>vertical_offset</code> <code>15</code> <code>vertical_align</code> <code>top</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>105</code> <code>back_height</code> <code>105</code> <code>back_padding</code> <code>15</code> <code>back_radius</code> <code>30</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>rating1</code> Description: Choose the rating to display in rating1.Values: <code>critic</code>, <code>audience</code>, or <code>user</code> <code>rating1_image</code> Description: Choose the rating image to display in rating1.Values: <code>anidb</code>, <code>imdb</code>, <code>letterboxd</code>, <code>tmdb</code>, <code>metacritic</code>, <code>rt_popcorn</code>, <code>rt_tomato</code>, <code>trakt</code>, <code>mal</code>, <code>mdb</code>, or <code>star</code> <code>rating2</code> Description: Choose the rating to display in rating2.Values: <code>critic</code>, <code>audience</code>, or <code>user</code> <code>rating2_image</code> Description: Choose the rating image to display in rating2.Values: <code>anidb</code>, <code>imdb</code>, <code>letterboxd</code>, <code>tmdb</code>, <code>metacritic</code>, <code>rt_popcorn</code>, <code>rt_tomato</code>, <code>trakt</code>, <code>mal</code>, <code>mdb</code>, or <code>star</code> <code>rating3</code> Description: Choose the rating to display in rating3.Values: <code>critic</code>, <code>audience</code>, or <code>user</code> <code>rating3_image</code> Description: Choose the rating image to display in rating3.Values: <code>anidb</code>, <code>imdb</code>, <code>letterboxd</code>, <code>tmdb</code>, <code>metacritic</code>, <code>rt_popcorn</code>, <code>rt_tomato</code>, <code>trakt</code>, <code>mal</code>, <code>mdb</code>, or <code>star</code> <code>horizontal_position</code> Description: Choose the horizontal position for the rating group.Default: <code>left</code>Values: <code>left</code>, <code>right</code>, or <code>center</code> <code>vertical_position</code> Description: Choose the vertical position for the rating group.Default: <code>center</code>Values: <code>top</code>, <code>bottom</code>, or <code>center</code> <code>rating_alignment</code> Description: Choose the display alignment for the rating group.Default: <code>vertical</code>Values: <code>horizontal</code>, or <code>vertical</code> <code>minimum_rating</code> Description: Minimum Rating to displayDefault: 0.0Values: Any Number <code>fresh_rating</code> Description: Determines when ratings are considered FreshDefault: 6.0Values: Any Number <code>maximum_rating</code> Description: Maximum Rating to displayDefault: 10.0Values: Any Number <code>font</code>1 Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Bold.ttf</code>Values: Path to font file <code>font_style</code>1 Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code>1 Description: Choose the font size for the Overlay.Default: <code>63</code>Values: Any Number greater then 0 <code>font_color</code>1 Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code>1 Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code>1 Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>addon_offset</code>1 Description: Text Addon Image Offset from the text.Default: <code>15</code>Values: Any Number greater then 0 <code>addon_position</code>1 Description: Text Addon Image Alignment in relation to the text.Default: <code>left</code>Values: <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code> <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>episode</code> <ol> <li>These Variables can be appended by <code>rating1_</code>, <code>rating2_</code>, or <code>rating3_</code> to change that attribute on each rating individually.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <p>Note: This example uses fonts not packaged with PMM. See bullmoose20's Configs</p> <pre><code>  Movies:\noverlay_path:\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: imdb\nrating1_font: config/metadata/fonts/Impact.ttf\nrating1_font_size: 70\n\nrating2: audience\nrating2_image: rt_popcorn\nrating2_font: config/metadata/fonts/Adlib.ttf\nrating2_font_size: 63\n\nrating3: user\nrating3_image: tmdb\nrating3_font: config/metadata/fonts/Avenir_95_Black.ttf\nrating3_font_size: 70\n\nhorizontal_position: right\noperations:\nmass_critic_rating_update: imdb\nmass_audience_rating_update: mdb_tomatoesaudience\nmass_user_rating_update: tmdb\nTV Shows:\noverlay_path:\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: imdb\nrating1_font: config/metadata/fonts/Impact.ttf\nrating1_font_size: 70\n\nrating2: audience\nrating2_image: rt_popcorn\nrating2_font: config/metadata/fonts/Adlib.ttf\nrating2_font_size: 63\n\nrating3: user\nrating3_image: tmdb\nrating3_font: config/metadata/fonts/Avenir_95_Black.ttf\nrating3_font_size: 70\n\nhorizontal_position: right\n- pmm: ratings\ntemplate_variables:\noverlay_level: episode\n\nrating1: critic\nrating1_image: imdb\nrating1_font: config/metadata/fonts/Impact.ttf\nrating1_font_size: 70\n\nrating2: audience\nrating2_image: tmdb\nrating2_font: config/metadata/fonts/Avenir_95_Black.ttf\nrating2_font_size: 70\n\nhorizontal_position: right\noperations:\nmass_critic_rating_update: imdb\nmass_audience_rating_update: mdb_tomatoesaudience\nmass_user_rating_update: tmdb\nmass_episode_critic_rating_update: imdb\nmass_episode_audience_rating_update: tmdb\n</code></pre>"},{"location":"defaults/overlays/resolution/","title":"Resolution/Edition Overlay","text":"<p>The <code>resolution</code> Default Overlay File is used to create an overlay based on the resolutions and editions available on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/resolution/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show, Episode</p> <p>Recommendations: Editions overlay is designed to use the Editions field within Plex [which requires Plex Pass to use] or the TRaSH Guides filename naming scheme</p>"},{"location":"defaults/overlays/resolution/#supported-resolutions","title":"Supported Resolutions","text":"Resolution Key Weight 4K HDR10+ <code>4k_plus</code> <code>160</code> 4K DV <code>4k_dv</code> <code>150</code> 4K HDR <code>4k_hdr</code> <code>140</code> 4K <code>4k</code> <code>130</code> 1080P HDR10+ <code>1080p_plus</code> <code>125</code> 1080P DV <code>1080p_dv</code> <code>120</code> 1080P HDR <code>1080p_hdr</code> <code>110</code> 1080P <code>1080p</code> <code>100</code> 720P HDR10+ <code>720p_plus</code> <code>95</code> 720P DV <code>720p_dv</code> <code>90</code> 720P HDR <code>720p_hdr</code> <code>80</code> 720P <code>720p</code> <code>70</code> 576P HDR10+ <code>576p_plus</code> <code>65</code> 576P DV <code>576p_dv</code> <code>60</code> 576P HDR <code>576p_hdr</code> <code>50</code> 576P <code>576p</code> <code>40</code> 480P HDR10+ <code>480p_plus</code> <code>35</code> 480P DV <code>480p_dv</code> <code>30</code> 480P HDR <code>480p_hdr</code> <code>20</code> 480P <code>480p</code> <code>10</code> HDR10+ <code>plus</code> <code>7</code> DV <code>dv</code> <code>5</code> HDR <code>hdr</code> <code>1</code>"},{"location":"defaults/overlays/resolution/#supported-editions","title":"Supported Editions","text":"Edition Key Weight Extended Edition <code>extended</code> <code>190</code> Uncut Edition <code>uncut</code> <code>180</code> Unrated Edition <code>unrated</code> <code>170</code> Special Edition <code>special</code> <code>160</code> Anniversary Edition <code>anniversary</code> <code>150</code> Collector's Edition <code>collector</code> <code>140</code> Diamond Edition <code>diamond</code> <code>130</code> Platinum Edition <code>platinum</code> <code>120</code> Director's Cut <code>directors</code> <code>110</code> Final Cut <code>final</code> <code>100</code> International Cut <code>international</code> <code>90</code> Theatrical Cut <code>theatrical</code> <code>80</code> Ultimate Cut <code>ultimate</code> <code>70</code> Alternate Cut <code>alternate</code> <code>60</code> Coda Cut <code>coda</code> <code>50</code> IMAX Enhanced <code>enhanced</code> <code>40</code> IMAX <code>imax</code> <code>30</code> Remastered <code>remastered</code> <code>20</code> Criterion <code>criterion</code> <code>10</code> Richard Donner <code>richarddonner</code> <code>9</code> Black and Chrome <code>blackchrome</code> <code>8</code> Definitive <code>definitive</code> <code>7</code> Ulysses <code>ulysses</code> <code>6</code>"},{"location":"defaults/overlays/resolution/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: resolution\nTV Shows:\noverlay_path:\n- pmm: resolution\n- pmm: resolution\ntemplate_variables:\noverlay_level: season\n- pmm: resolution\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/resolution/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>15</code> <code>vertical_align</code> <code>top</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>105</code>/<code>189</code> Variable Description &amp; Values <code>use_resolution</code> Description: Turns off all Resolution Overlays in the Defaults file.Values: <code>false</code> to turn off the overlays <code>use_edition</code> Description: Turns off all Edition Overlays in the Defaults file.Values: <code>false</code> to turn off the overlays <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority. Only works with Edition keys.Values: Any Number <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: resolution\ntemplate_variables:\nuse_dv: false\nuse_hdr: false\nuse_1080p: false\nuse_720p: false\nuse_576p: false\nuse_480p: false\nuse_1080p_hdr: false\nuse_1080p_dv: false\n</code></pre>"},{"location":"defaults/overlays/ribbon/","title":"Ribbon Overlays","text":"<p>The <code>ribbon</code> Default Overlay File is used to create a ribbon overlay based on the Top Lists of various sites on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/ribbon/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show</p>"},{"location":"defaults/overlays/ribbon/#supported-ribbon","title":"Supported Ribbon","text":"Ribbon Key Weight Oscars Best Picture <code>oscars</code> <code>50</code> IMDb Top 250 <code>imdb</code> <code>40</code> Rotten Tomatoes Certified Fresh <code>rotten</code> <code>30</code> Metacritic Must See <code>metacritic</code> <code>20</code> Commonsense Selection <code>common</code> <code>10</code>"},{"location":"defaults/overlays/ribbon/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: ribbon\nTV Shows:\noverlay_path:\n- pmm: ribbon\n</code></pre>"},{"location":"defaults/overlays/ribbon/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>0</code> <code>horizontal_align</code> <code>right</code> <code>vertical_offset</code> <code>0</code> <code>vertical_align</code> <code>bottom</code> Variable Description &amp; Values <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: ribbon\ntemplate_variables:\nweight_metacritic: 35\nuse_common: false\n</code></pre>"},{"location":"defaults/overlays/runtimes/","title":"Runtimes Overlay","text":"<p>The <code>runtimes</code> Default Overlay File is used to create an overlay on of the movie or episodes runtime for all items in your library.</p> <p></p>"},{"location":"defaults/overlays/runtimes/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show, Episode</p>"},{"location":"defaults/overlays/runtimes/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: runtimes\nTV Shows:\noverlay_path:\n- pmm: runtimes\n- pmm: runtimes\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/runtimes/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>right</code> <code>vertical_offset</code> <code>30</code> <code>vertical_align</code> <code>bottom</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>600</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>text</code> Description: Choose the text for the Overlay.Default: <code>Runtime:</code>Values: Any String <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>55</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: runtimes\ntemplate_variables:\noverlay_level: episode\nfont: fonts/Inter-Bold.ttf\n</code></pre>"},{"location":"defaults/overlays/status/","title":"Status Overlay","text":"<p>The <code>status</code> Default Overlay File is used to create an overlay on a show detailing its Current Airing Status for all shows in your library.</p> <p></p>"},{"location":"defaults/overlays/status/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Show</p>"},{"location":"defaults/overlays/status/#supported-status","title":"Supported Status","text":"Status Key Weight AIRING <code>airing</code> <code>40</code> RETURNING <code>returning</code> <code>30</code> CANCELED <code>canceled</code> <code>20</code> ENDED <code>ended</code> <code>10</code>"},{"location":"defaults/overlays/status/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: status\n</code></pre>"},{"location":"defaults/overlays/status/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>330</code> <code>vertical_align</code> <code>top</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>last</code> Description: Episode Air Date in the last number of days for the AIRING Overlay.Default: <code>14</code>Values: Any Number greater then 0 <code>text_&lt;&lt;key&gt;&gt;</code>1 Description: Choose the text for the Overlay.Default: KeyDefault<code>airing</code><code>AIRING</code><code>returning</code><code>RETURNING</code><code>canceled</code><code>CANCELED</code><code>ended</code><code>ENDED</code>Values: Any String <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>50</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\noverlay_path:\n- pmm: status\ntemplate_variables:\ntext_canceled: \"C A N C E L L E D\"\n</code></pre>"},{"location":"defaults/overlays/streaming/","title":"Streaming Services Overlay","text":"<p>The <code>streaming</code> Default Overlay File is used to create an overlay based on the streaming service the file is found on for each item within your library.</p> <p></p>"},{"location":"defaults/overlays/streaming/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show</p>"},{"location":"defaults/overlays/streaming/#supported-streaming-services","title":"Supported Streaming Services","text":"Streaming Service Key Weight Netflix <code>netflix</code> <code>160</code> Prime Video <code>amazon</code> <code>150</code> Disney+ <code>disney</code> <code>140</code> Max <code>max</code> <code>130</code> Crunchyroll <code>Crunchyroll</code> <code>120</code> YouTube <code>youtube</code> <code>110</code> Hulu <code>hulu</code> <code>100</code> Paramount+ <code>paramount</code> <code>90</code> AppleTV <code>appletv</code> <code>80</code> Peacock <code>peacock</code> <code>70</code> Showtime <code>showtime</code> <code>60</code> discovery+ <code>discovery</code> <code>58</code> Crave <code>crave</code> <code>55</code> NOW <code>now</code> <code>50</code> All 4 <code>all4</code> <code>40</code> britbox <code>britbox</code> <code>30</code> BET+ <code>bet</code> <code>20</code> hayu <code>hayu</code> <code>10</code>"},{"location":"defaults/overlays/streaming/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: streaming\nTV Shows:\noverlay_path:\n- pmm: streaming\n</code></pre>"},{"location":"defaults/overlays/streaming/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Description &amp; Values <code>horizontal_offset</code> Description: Change the horizontal offset.Default Value: <code>15</code> <code>horizontal_align</code> Description: Change the horizontal alignment.Default Value: <code>left</code> <code>vertical_offset</code> Description: Change the vertical offset.Default Value: <code>150</code> <code>vertical_align</code> Description: Change the vertical alignment.Default Value: <code>bottom</code> <code>back_color</code> Description: Change the back color.Default Value: <code>#00000099</code> <code>back_radius</code> Description: Change the back (lozenge) radius .Default Value: <code>30</code> <code>back_width</code> Description: Change the back (lozenge) width.Default Value: <code>305</code> <code>back_height</code> Description: Change the back (lozenge) height.Default Value: <code>105</code> <code>region</code> Description: Changes some Streaming Service lists to regional variants (see below table for more information.Default: <code>us</code>Values: <code>us</code>,<code>uk</code>,<code>ca</code>, <code>da</code>, <code>de</code>, <code>es</code>, <code>fr</code>, <code>it</code>, <code>pt-br</code> <code>originals_only</code> Description: Changes Streaming Service overlays to only apply to original content produced by the service.Note: Cannot be used with <code>region</code>, and only produces overlays for <code>amazon</code>, <code>appletv</code>, <code>disney</code>, <code>max</code>, <code>hulu</code>, <code>netflix</code>, <code>paramount</code>, <code>peacock</code>Default: <code>false</code>Values: <code>true</code>, <code>false</code> <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol>"},{"location":"defaults/overlays/streaming/#regional-variants","title":"Regional Variants","text":"<p>Some logic is applied to allow for regional streaming service lists to be available to users depending on where they are, as detailed below:</p> Region Key Description any besides <code>us</code> <code>amazon</code>, <code>disney</code>, <code>netflix</code> These overlays will use regional variant lists to ensure the overlays are applied to what is available in the region specified any besides <code>uk</code> <code>all4</code>, <code>britbox</code>, <code>hayu</code>, <code>now</code> These overlays will not be used if the region is not <code>uk</code> as these streaming services are UK-focused any besides <code>ca</code> <code>crave</code> These overlays will not be used if the region is not <code>ca</code> as these streaming services are Canada-focused <code>ca</code> <code>max</code>, <code>showtime</code> These overlays will not be used if the region is <code>ca</code> as these streaming services are part of the Crave streaming service in Canada <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: streaming\ntemplate_variables:\noriginals_only: true\nuse_peacock: false\nweight_netflix: 100\n</code></pre>"},{"location":"defaults/overlays/versions/","title":"Versions Overlay","text":"<p>The <code>versions</code> Default Overlay File is used to create an overlay based on if there's multiple versions on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/versions/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show, Season, Episode</p>"},{"location":"defaults/overlays/versions/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: versions\nTV Shows:\noverlay_path:\n- pmm: versions\n- pmm: versions\ntemplate_variables:\noverlay_level: season\n- pmm: versions\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/versions/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code>/<code>235</code> <code>horizontal_align</code> <code>right</code>/<code>center</code> <code>vertical_offset</code> <code>1050</code>/<code>15</code> <code>vertical_align</code> <code>top</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>105</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: versions\ntemplate_variables:\nfont_color: \"#FFFFFF99\"\n</code></pre>"},{"location":"defaults/overlays/video_format/","title":"Video Format Overlay","text":"<p>The <code>video_format</code> Default Overlay File is used to create an overlay based on the video format available on each item within your library.</p> <p></p>"},{"location":"defaults/overlays/video_format/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Overlay Level: Movie, Show, Season, Episode</p> <p>Recommendations: Designed for TRaSH Guides filename naming scheme</p>"},{"location":"defaults/overlays/video_format/#supported-video-formats","title":"Supported Video Formats","text":"Video Format Key Weight REMUX <code>remux</code> <code>60</code> BLU-RAY <code>bluray</code> <code>50</code> WEB <code>web</code> <code>40</code> HDTV <code>hdtv</code> <code>30</code> DVD <code>dvd</code> <code>20</code> SDTV <code>sdtv</code> <code>10</code>"},{"location":"defaults/overlays/video_format/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the overlays:</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: video_format\nTV Shows:\noverlay_path:\n- pmm: video_format\n- pmm: video_format\ntemplate_variables:\noverlay_level: season\n- pmm: video_format\ntemplate_variables:\noverlay_level: episode\n</code></pre>"},{"location":"defaults/overlays/video_format/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Overlay Variables are available with the default values below as well as the additional Variables below which can be used to customize the file.</p> Variable Default <code>horizontal_offset</code> <code>15</code> <code>horizontal_align</code> <code>left</code> <code>vertical_offset</code> <code>30</code> <code>vertical_align</code> <code>bottom</code> <code>back_color</code> <code>#00000099</code> <code>back_radius</code> <code>30</code> <code>back_width</code> <code>305</code> <code>back_height</code> <code>105</code> Variable Description &amp; Values <code>overlay_level</code> Description: Choose the Overlay Level.Values: <code>season</code> or <code>episode</code> <code>font</code> Description: Choose the font for the Overlay.Default: <code>fonts/Inter-Medium.ttf</code>Values: Path to font file <code>font_style</code> Description: Font style for Variable Fonts.Values: Variable Font Style <code>font_size</code> Description: Choose the font size for the Overlay.Default: <code>55</code>Values: Any Number greater then 0 <code>font_color</code> Description: Choose the font color for the Overlay.Default: <code>#FFFFFF</code>Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>stroke_width</code> Description: Font Stroke Width for the Text Overlay.Values: Any Number greater then 0 <code>stroke_color</code> Description: Font Stroke Color for the Text Overlay.Values: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code> <code>text_&lt;&lt;key&gt;&gt;</code>1 Description: Choose the text for the Overlay.Default: KeyDefault<code>remux</code><code>REMUX</code><code>bluray</code><code>BLU-RAY</code><code>web</code><code>WEB</code><code>hdtv</code><code>HDTV</code><code>dvd</code><code>DVD</code><code>sdtv</code><code>SDTV</code>Values: Any String <code>weight_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the weight of the Overlay. Higher numbers have priority.Values: Any Number <code>regex_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the regex of the Overlay Search.Values: Any Proper Regex <ol> <li>Each default overlay has a <code>key</code> that when calling to effect a specific overlay you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nMovies:\noverlay_path:\n- pmm: video_format\ntemplate_variables:\ntext_bluray: BLURAY\nuse_sdtv: false\nuse_dvd: false\n</code></pre>"},{"location":"defaults/show/content_rating_us/","title":"US Content Rating Collections","text":"<p>The <code>content_rating_us</code> Default Metadata File is used to dynamically create collections based on the content ratings available in your library.</p> <p>If you do not use the US-based rating system within Plex, this file will attempt to match the ratings in your library to the respective rating system.</p> <p>This file has a Movie Library Counterpart.</p> <p></p>"},{"location":"defaults/show/content_rating_us/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Show</p>"},{"location":"defaults/show/content_rating_us/#collections-section-110","title":"Collections Section 110","text":"Collection Key Description <code>Ratings Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Content Rating&gt;&gt; Shows</code>Example: <code>TV-14 Shows</code> <code>&lt;&lt;Content Rating&gt;&gt;</code>Example: <code>TV-14</code> Collection of Shows that have this Content Rating. <code>Not Rated Shows</code> <code>other</code> Collection of Shows that are Unrated, Not Rated or any other uncommon Ratings."},{"location":"defaults/show/content_rating_us/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: content_rating_us\n</code></pre>"},{"location":"defaults/show/content_rating_us/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Content Ratings found in your library <code>exclude</code> Description: Exclude these Content Ratings from creating a Dynamic Collection.Values: List of Content Ratings found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Content Ratings found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Content Ratings found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Content Ratings found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_translationU&gt;&gt;s</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s that are rated &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: content_rating_us\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: blue\nappend_addons:\nR:\n- \"de/18\"\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/show/content_rating_us/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/show/content_rating_us/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n- TV-G\n- TV-Y\n- TV-PG\n- TV-14\n- TV-MA\n</code></pre>"},{"location":"defaults/show/content_rating_us/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\nTV-G:\n- gb/U\n- gb/0+\n- U\n- G\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- \"01\"\n- \"02\"\n- \"03\"\n- \"04\"\n- \"05\"\n- \"06\"\n- G - All Ages\nTV-Y:\n- TV-Y7\n- TV-Y7-FV\n- 7\n- 8\n- 9\n- \"07\"\n- \"08\"\n- \"09\"\nTV-PG:\n- gb/PG\n- gb/9+\n- 10\n- 11\n- 12\n- 13\n- PG - Children\nTV-14:\n- gb/12A\n- 12+\n- PG-13\n- TV-13\n- gb/14+\n- gb/15\n- 14\n- 15\n- 16\n- 17\n- PG-13 - Teens 13 or older\nTV-MA:\n- 18\n- gb/18\n- MA-17\n- NC-17\n- R\n- TVMA\n- R - 17+ (violence &amp; profanity)\n- R+ - Mild Nudity\n- Rx - Hentai\n</code></pre>"},{"location":"defaults/show/country/","title":"Country Collections","text":"<p>The <code>country</code> Default Metadata File is used to dynamically create collections based on the countries available in your library.</p> <p>This file has a Movie Library Counterpart.</p> <p></p>"},{"location":"defaults/show/country/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Show</p>"},{"location":"defaults/show/country/#collections-section-080","title":"Collections Section 080","text":"Collection Key Description <code>Country Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;Country&gt;&gt;</code>Example: <code>Germany</code> <code>&lt;&lt;2 digit ISO 3166-1 code&gt;&gt;</code>Example: <code>de</code> Collection of TV Shows that have this Country. <code>Other Countries</code> <code>other</code> Collection of TV Shows that are in other uncommon Countries."},{"location":"defaults/show/country/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: country\n</code></pre>"},{"location":"defaults/show/country/#color-style","title":"Color Style","text":"<p>Below is a screenshot of the alternative Color (<code>color</code>) style which can be set via the <code>style</code> template variable.</p> <p></p>"},{"location":"defaults/show/country/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>style</code> Description: Controls the visual theme of the collections createdValues:<code>white</code>White Theme<code>color</code>Color Theme <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of 2 digit ISO 3166-1 codes <code>exclude</code> Description: Exclude these Countries from creating a Dynamic Collection.Values: List of 2 digit ISO 3166-1 codes <code>addons</code> Description: Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of 2 digit ISO 3166-1 codes <code>append_include</code> Description: Appends to the default include list.Values: List of 2 digit ISO 3166-1 codes <code>key_name_override</code> Description: Overrides the default key_name_override dictionary.Values: Dictionary with <code>key: new_key_name</code> entries <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s filmed in &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: country\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: purple\nexclude:\n- fr\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/show/country/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/show/country/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n# - af     # Afghanistan\n# - ax     # \u00c5land Islands\n# - al     # Albania\n# - dz     # Algeria\n# - ad     # Andorra\n# - ao     # Angola\n# - ai     # Anguilla\n# - aq     # Antarctica\n# - ag     # Antigua\n- ar     # Argentina\n# - am     # Armenia\n# - aw     # Aruba\n- au     # Australia\n- at     # Austria\n# - az     # Azerbaijan\n- bs     # Bahamas\n# - bh     # Bahrain\n# - bd     # Bangladesh\n# - bb     # Barbados\n# - by     # Belarus\n- be     # Belgium\n# - bz     # Belize\n# - bj     # Benin\n# - bm     # Bermuda\n# - bt     # Bhutan\n# - bo     # Bolivia\n# - bq     # Bonaire\n# - ba     # Bosnia and Herzegovina\n# - bw     # Botswana\n# - bv     # Bouvet Island\n- br     # Brazil\n# - bn     # Brunei\n- bg     # Bulgaria\n# - bf     # Burkina Faso\n# - bi     # Burundi\n# - cv     # Cabo Verde\n# - kh     # Cambodia\n# - cm     # Cameroon\n- ca     # Canada\n# - ky     # Cayman Islands\n# - cf     # Central African Republic\n# - td     # Chad\n- cl     # Chile\n- cn     # China\n# - cx     # Christmas Island\n# - cc     # Cocos (Keeling) Islands\n# - co     # Colombia\n# - km     # Comoros\n# - cg     # Congo\n# - ck     # Cook Islands\n- cr     # Costa Rica\n# - ci     # C\u00f4te d'Ivoire\n- hr     # Croatia\n# - cu     # Cuba\n# - cw     # Cura\u00e7ao\n# - cy     # Cyprus\n- cz     # Czech Republic\n- dk     # Denmark\n# - dj     # Djibouti\n# - dm     # Dominica\n- do     # Dominican Republic\n# - ec     # Ecuador\n- eg     # Egypt\n# - sv     # El Salvador\n# - gq     # Equatorial Guinea\n# - er     # Eritrea\n- ee     # Estonia\n# - sz     # Eswatini\n# - et     # Ethiopia\n# - fk     # Falkland Islands\n# - fo     # Faroe Islands\n# - fj     # Fiji\n- fi     # Finland\n- fr     # France\n# - gf     # French Guiana\n# - pf     # French Polynesia\n# - ga     # Gabon\n# - gm     # Gambia\n# - ge     # Georgia\n- de     # Germany\n# - gh     # Ghana\n# - gi     # Gibraltar\n- gr     # Greece\n# - gl     # Greenland\n# - gd     # Grenada\n# - gp     # Guadeloupe\n# - gu     # Guam\n# - gt     # Guatemala\n# - gg     # Guernsey\n# - gn     # Guinea\n# - gw     # Guinea-Bissau\n# - gy     # Guyana\n# - ht     # Haiti\n# - va     # Holy See\n# - hn     # Honduras\n- hk     # Hong Kong\n- hu     # Hungary\n- is     # Iceland\n- in     # India\n- id     # Indonesia\n- ir     # Iran\n# - iq     # Iraq\n- ie     # Ireland\n# - im     # Isle of Man\n- il     # Israel\n- it     # Italy\n# - jm     # Jamaica\n- jp     # Japan\n# - je     # Jersey\n# - jo     # Jordan\n# - kz     # Kazakhstan\n# - ke     # Kenya\n# - ki     # Kiribati\n- kr     # Korea\n# - kw     # Kuwait\n# - kg     # Kyrgyzstan\n# - la     # Lao\n- lv     # Latvia\n# - lb     # Lebanon\n# - ls     # Lesotho\n# - lr     # Liberia\n# - ly     # Libya\n# - li     # Liechtenstein\n# - lt     # Lithuania\n- lu     # Luxembourg\n# - mo     # Macao\n# - mg     # Madagascar\n# - mw     # Malawi\n- my     # Malaysia\n# - mv     # Maldives\n# - ml     # Mali\n# - mt     # Malta\n# - mh     # Marshall Islands\n# - mq     # Martinique\n# - mr     # Mauritania\n# - mu     # Mauritius\n# - yt     # Mayotte\n- mx     # Mexico\n# - fm     # Micronesia\n# - md     # Moldova\n# - mc     # Monaco\n# - mn     # Mongolia\n# - me     # Montenegro\n# - ms     # Montserrat\n- ma     # Morocco\n# - mz     # Mozambique\n# - mm     # Myanmar\n# - na     # Namibia\n# - nr     # Nauru\n# - np     # Nepal\n- nl     # Netherlands\n# - nc     # New Caledonia\n- nz     # New Zealand\n# - ni     # Nicaragua\n# - ne     # Niger\n# - ng     # Nigeria\n# - nu     # Niue\n# - nf     # Norfolk Island\n# - mk     # Macedonia\n- no     # Norway\n# - om     # Oman\n- pk     # Pakistan\n# - pw     # Palau\n# - ps     # Palestine\n- pa     # Panama\n# - pg     # New Guinea\n# - py     # Paraguay\n- pe     # Peru\n- ph     # Philippines\n# - pn     # Pitcairn\n- pl     # Poland\n- pt     # Portugal\n# - pr     # Puerto Rico\n- qa     # Qatar\n# - re     # R\u00e9union\n- ro     # Romania\n- ru     # Russia\n# - rw     # Rwanda\n# - bl     # Saint Barth\u00e9lemy\n# - lc     # Saint Lucia\n# - ws     # Samoa\n# - sm     # San Marino\n# - st     # Sao Tome and Principe\n- sa     # Saudi Arabia\n# - sn     # Senegal\n- rs     # Serbia\n# - sc     # Seychelles\n# - sl     # Sierra Leone\n- sg     # Singapore\n# - sk     # Slovakia\n# - si     # Slovenia\n# - sb     # Solomon Islands\n# - so     # Somalia\n- za     # South Africa\n# - ss     # South Sudan\n- es     # Spain\n- lk     # Sri Lanka\n# - sd     # Sudan\n# - sr     # Suriname\n- se     # Sweden\n- ch     # Switzerland\n# - sy     # Syria\n# - tw     # Taiwan\n# - tj     # Tajikistan\n# - tz     # Tanzania\n- th     # Thailand\n# - tl     # Timor-Leste\n# - tg     # Togo\n# - tk     # Tokelau\n# - to     # Tonga\n# - tt     # Trinidad and Tobago\n# - tn     # Tunisia\n- tr     # Turkey\n# - tm     # Turkmenistan\n# - tc     # Turks and Caicos\n# - tv     # Tuvalu\n# - ug     # Uganda\n- ua     # Ukraine\n- ae     # United Arab Emirates\n- gb     # United Kingdom\n- us     # United States of America\n# - uy     # Uruguay\n# - uz     # Uzbekistan\n# - vu     # Vanuatu\n# - ve     # Venezuela\n- vn     # Vietnam\n# - ye     # Yemen\n# - zm     # Zambia\n# - zw     # Zimbabwe\n</code></pre>"},{"location":"defaults/show/country/#default-key_name_override","title":"Default <code>key_name_override</code>","text":"<pre><code>key_name_override:\nkr: Korea\n</code></pre>"},{"location":"defaults/show/decade/","title":"Decade Collections","text":"<p>The <code>decade</code> Metadata File is used to dynamically create collections based on the decades available in your library, sorted by critic rating to create a \"best of \" <p>This file has a Movie Library Counterpart.</p> <p></p>"},{"location":"defaults/show/decade/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Show</p>"},{"location":"defaults/show/decade/#collections-section-100","title":"Collections Section 100","text":"Collection Key Description <code>Decade Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>Best of &lt;&lt;Decade&gt;&gt;</code>Example: <code>Best of 2020s</code> <code>&lt;&lt;Year&gt;&gt;</code>Example: <code>2020</code> Collection of Shows released in this Decade."},{"location":"defaults/show/decade/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: decade\n</code></pre>"},{"location":"defaults/show/decade/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Default: <code>100</code>Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>critic_rating.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>exclude</code> Description: Exclude these Decades from creating a Dynamic Collection.Values: List of Decades found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>Best of &lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>Top &lt;&lt;limit&gt;&gt; &lt;&lt;library_translation&gt;&gt;s of the &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: decade\ntemplate_variables:\nuse_other: false\nuse_separator: false\nsep_style: purple\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/show/franchise/","title":"Franchise Collections","text":"<p>The <code>franchise</code> Default Metadata File is used to create collections based on popular TV Show franchises, and can be used as a replacement to the TMDb Collections that Plex creates out-of-the-box.</p> <p>Unlike most Default Metadata Files, Franchise works by placing collections inline with the main library items if your library allows it. For example, the \"Pretty Little Liars\" franchise collection will appear next to the \"Pretty Little Liars\" show in your library so that you have easy access to the other shows in the franchise.</p> <p>This file has a Movie Library Counterpart.</p> <p></p>"},{"location":"defaults/show/franchise/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Show</p>"},{"location":"defaults/show/franchise/#collections","title":"Collections","text":"Collection Key Description <code>&lt;&lt;Collection Name&gt;&gt;</code>Example: <code>Pretty Little Liars</code> <code>&lt;&lt;Starting TMDb Show ID&gt;&gt;</code>Example: <code>31917</code> Collection of Shows specified for this Collection."},{"location":"defaults/show/franchise/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: franchise\n</code></pre>"},{"location":"defaults/show/franchise/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>Shared Collection Variables are NOT available to this default file.</p> Variable Description &amp; Values <code>summary_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the summary of the specified key's collection.Values: New Collection Summary <code>collection_section</code> Description: Adds a sort title with this collection sections.Values: Any number <code>order_&lt;&lt;key&gt;&gt;</code>1 Description: Controls the sort order of the collections in their collection section.Values: Any number <code>collection_mode</code> Description: Controls the collection mode of all collections in this file.Values:<code>default</code>Library default<code>hide</code>Hide Collection<code>hide_items</code>Hide Items in this Collection<code>show_items</code>Show this Collection and its Items <code>minimum_items</code> Description: Controls the minimum items that the collection must have to be created.Default: <code>2</code>Values: Any number <code>name_mapping_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the name mapping value for using assets of the specified key's collection.Values: Any String <code>sort_title</code> Description: Sets the sort title for all collections. Use <code>&lt;&lt;collection_name&gt;&gt;</code> to use the collection name. Example: <code>\"!02_&lt;&lt;collection_name&gt;&gt;\"</code>Values: Any String with <code>&lt;&lt;collection_name&gt;&gt;</code> <code>sort_title_&lt;&lt;key&gt;&gt;</code>1 Description: Sets the sort title of the specified key's collection.Default: <code>sort_title</code>Values: Any String <code>build_collection</code> Description: Controls if you want the collection to actually be built. i.e. you may just want these shows sent to Sonarr.Values: <code>false</code> to not build the collection <code>sync_mode</code> Description: Changes the Sync Mode for all collections in a Defaults file.Default: <code>sync</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>sync_mode_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Sync Mode of the specified key's collection.Default: <code>sync_mode</code>Values:<code>sync</code>Add and Remove Items based on Builders<code>append</code>Only Add Items based on Builders <code>collection_order</code> Description: Changes the Collection Order for all collections in this file.Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>collection_order_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Collection Order of the specified key's collection.Default: <code>collection_order</code>Values:<code>release</code>Order Collection by Release Dates<code>alpha</code>Order Collection Alphabetically<code>custom</code>Order Collection Via the Builder OrderAny <code>plex_search</code> Sort OptionOrder Collection by any <code>plex_search</code> Sort Option <code>exclude</code> Description: Exclude these Collections from creating a Dynamic Collection.Values: List of Collection IDs <code>data</code> Description: Overrides the default data dictionary. Defines the data that the custom dynamic collection processes.Values: Dictionary List of TMDb Main Show ID <code>append_data</code> Description: Appends to the default data dictionary.Values: Dictionary List of TMDb Main Show ID <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of TMDb Show IDs <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of TMDb Show IDs <code>sonarr_add_missing</code> Description: Override Sonarr <code>add_missing</code> attribute for all collections in a Defaults file.Values: <code>true</code> or <code>false</code> <code>sonarr_add_missing_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>add_missing</code> attribute of the specified key's collection.Default: <code>sonarr_add_missing</code>Values: <code>true</code> or <code>false</code> <code>sonarr_folder</code> Description: Override Sonarr <code>root_folder_path</code> attribute for all collections in a Defaults file.Values: Folder Path <code>sonarr_folder_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>root_folder_path</code> attribute of the specified key's collection.Default: <code>sonarr_folder</code>Values: Folder Path <code>sonarr_tag</code> Description: Override Sonarr <code>tag</code> attribute for all collections in a Defaults file.Values: List or comma-separated string of tags <code>sonarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Override Sonarr <code>tag</code> attribute of the specified key's collection.Default: <code>sonarr_tag</code>Values: List or comma-separated string of tags <code>item_sonarr_tag</code> Description: Used to append a tag in Sonarr for every show found by the builders that's in Sonarr for all collections in a Defaults file.Values: List or comma-separated string of tags <code>item_sonarr_tag_&lt;&lt;key&gt;&gt;</code>1 Description: Used to append a tag in Sonarr for every show found by the builders that's in Sonarr of the specified key's collection.Default: <code>item_sonarr_tag</code>Values: List or comma-separated string of tags <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: franchise\ntemplate_variables:\nappend_data:\n\"31917\": Pretty Little Liars\nappend_addons:\n31917: [46958, 79863, 110531] # Pretty Little Liars: Ravenswood, The Perfectionists, Original Sin\nsonarr_add_missing: true\n</code></pre>"},{"location":"defaults/show/franchise/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/show/franchise/#default-data","title":"Default <code>data</code>","text":"<pre><code>data:\n\"121\": Doctor Who\n\"253\": Star Trek\n\"549\": Law &amp; Order\n\"951\": Archie Comics\n\"1402\": The Walking Dead\n\"1412\": Arrowverse\n\"1431\": CSI\n\"4614\": NCIS\n\"4629\": Stargate\n\"8514\": \"RuPaul's Drag Race\"\n\"6357\": The Twilight Zone\n\"10222\": The Real Housewives\n\"31917\": Pretty Little Liars\n\"44006\": One Chicago\n\"73586\": Yellowstone\n\"75219\": 9-1-1\n\"79744\": The Rookie\n\"80748\": FBI\n\"85536\": Star Wars\n</code></pre>"},{"location":"defaults/show/franchise/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\n121: [57243, 1057, 424, 203, 64073]  # Doctor Who: K-9 &amp; Company, Torchwood, The Sarah Jane Adventures, Class\n253: [655, 1855, 314, 67198, 85949, 85948] # Star Trek, The Next Generation, Voyager, Enterprise, Discovery, Picard, Lower Decks\n549: [2734, 4601, 3357, 32632, 72496, 157088, 106158]  # Law &amp; Order: Special Victims Unit, Criminal Intent, Trial by Jury, LA, True Crime, Organized Crime\n951: [25641, 4489, 24211, 9829, 605, 69050, 79242, 87539] # The Archie Show, Sabrina, The Teenage Witch, Josie and the Pussycats, Josie and the Pussycats in Outer Space, The New Archies, Riverdale, Chilling Adventures of Sabrina, Katy Keene\n1402: [62286, 94305] # The Walking Dead: Fear the Walking Dead, World Beyond\n1412: [60735, 62688, 62643, 71663, 89247]  # Arrow: The Flash, Supergirl, Legends of Tomorrow, Black Lightning, Batwoman\n1431: [1620, 2458, 122194, 61811] # CSI: Miami, NY, Vegas, Cyber\n4614: [17610, 124271, 61387, 4376]  # NCIS: Los Angeles, Hawaii, New Orleans, JAG\n4629: [2290, 5148, 72925] # Stargate SG-1: Atlantis, Universe, Origins\n8514: [200870, 212798, 38409, 200865, 67482, 124045, 216276, 77233, 92611, 98888, 94038, 127841, 67564, 122692, 139203, 203734, 108934, 204701, 210689, 155431, 106475, 152261, 66769] #Drag Race: Sweden, Sweden Untucked, Untucked, Belgium, All-Stars, Spain, Brazil, Thailand, UK, Secret Celebrity, Canada, Italy, All Stars Untucked, Australia, Philippines, Canada VS the World, Holland, Philippines Untucked, Spain Untucked, UK VS the World, Vegas Revue, France, Ruvealed\n6357: [1918, 83135, 16399]  # The Twilight Zone (multiple)\n10222: [34268, 32390, 17380, 18204, 65300, 10222, 31493, 217065, 14808, 136105, 61868, 39283, 62087, 76474, 70612, 110381, 70463, 67480, 196592, 139703, 126149, 59556, 113333, 214463, 131449, 216849] # Real Housewives of Orange County: Miami, BH, ATL, NJ, Potomac, DC, Capetown, NYC, Ult. Girls Trip, Cheshire, Dallas, Melbourne, Hungary, Toronto, SLC, Sydney, Auckland, Dubai, ATL Porsha\u2019s Family Matters, Johannesburg, Vancouver, Jersey, Amsterdam, Durban, Cheshire Christmas Cruising\n31917: [46958, 79863, 110531] # Pretty Little Liars: Ravenswood, The Perfectionists, Original Sin\n44006: [58841, 62650, 67993] # Chicago Fire: Med, PD, Justice\n73586: [157744, 118357, 157732] #Yellowstone: 1883, 1923, 1883: The Bass Reeves Story\n75219: 89393 # 9-1-1: 9-1-1 Lone Star\n79744: 201992 # The Rookie: Feds\n80748: [94372, 121658] # FBI: Most Wanted, International\n85536: [71412, 3478, 105971, 92830, 83867, 60554, 82856, 115036, 114461, 202879, 114462, 114476, 114478, 79093] # Star Wars Galaxy of Adventures: Forces of Destiny, The Clone Wars, The Bad Batch, Obi-Wan Kenobi, Andor, Rebels, The Mandalorian, The Book of Boba Fett, Ahsoka, Skeleton Crew, Rangers of the New Republic, Lando, Visions, Resistance\n</code></pre>"},{"location":"defaults/show/network/","title":"Network Collections","text":"<p>The <code>network</code> Default Metadata File is used to dynamically create collections based on the networks available in your library.</p> <p></p>"},{"location":"defaults/show/network/#requirements-recommendations","title":"Requirements &amp; Recommendations","text":"<p>Supported Library Types: Show</p>"},{"location":"defaults/show/network/#collections-section-050","title":"Collections Section 050","text":"Collection Key Description <code>Network Collections</code> <code>separator</code> Separator Collection to denote the Section of Collections. <code>&lt;&lt;network&gt;&gt;</code>Example: <code>NBC</code> <code>&lt;&lt;network&gt;&gt;</code>Example: <code>NBC</code> Collection of Shows the aired on the network."},{"location":"defaults/show/network/#config","title":"Config","text":"<p>The below YAML in your config.yml will create the collections:</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: network\n</code></pre>"},{"location":"defaults/show/network/#template-variables","title":"Template Variables","text":"<p>Template Variables can be used to manipulate the file in various ways to slightly change how it works without having to make your own local copy.</p> <p>Note that the <code>template_variables:</code> section only needs to be used if you do want to actually change how the defaults work. Any value not specified is its default value if it has one if not it's just ignored.</p> <p>All Shared Collection Variables are available as well as the additional Variables below which can be used to customize the file.</p> <p>This file contains a Separator so all Shared Separator Variables are available as well.</p> Variable Description &amp; Values <code>limit</code> Description: Changes the Builder Limit for all collections in a Defaults file.Values: Number Greater then 0 <code>limit_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Builder Limit of the specified key's collection.Default: <code>limit</code>Values: Number Greater then 0 <code>sort_by</code> Description: Changes the Smart Filter Sort for all collections in a Defaults file.Default: <code>release.desc</code>Values: Any <code>smart_filter</code> Sort Option <code>sort_by_&lt;&lt;key&gt;&gt;</code>1 Description: Changes the Smart Filter Sort of the specified key's collection.Default: <code>sort_by</code>Values: Any <code>smart_filter</code> Sort Option <code>include</code> Description: Overrides the default include list.Values: List of Networks found in your library <code>exclude</code> Description: Exclude these Networks from creating a Dynamic Collection.Values: List of Networks found in your library <code>addons</code> Description: Overrides the default addons dictionary. Defines how multiple keys can be combined under a parent key. The parent key doesn't have to already exist in PlexValues: Dictionary List of Networks found in your library <code>append_include</code> Description: Appends to the default include list.Values: List of Networks found in your library <code>append_addons</code> Description: Appends to the default addons dictionary.Values: Dictionary List of Networks found in your library <code>name_format</code> Description: Changes the title format of the Dynamic Collections.Default: <code>&lt;&lt;key_name&gt;&gt;</code>Values: Any string with <code>&lt;&lt;key_name&gt;&gt;</code> in it. <code>summary_format</code> Description: Changes the summary format of the Dynamic Collections.Default: <code>&lt;&lt;library_translationU&gt;&gt;s broadcast on &lt;&lt;key_name&gt;&gt;.</code>Values: Any string. <ol> <li>Each default collection has a <code>key</code> that when calling to effect a specific collection you must replace <code>&lt;&lt;key&gt;&gt;</code> with when calling.</li> </ol> <p>The below is an example config.yml extract with some Template Variables added in to change how the file works.</p> <pre><code>libraries:\nTV Shows:\nmetadata_path:\n- pmm: network\ntemplate_variables:\nuse_separator: false\nsep_style: stb\nappend_exclude:\n- BBC\nsort_by: title.asc\n</code></pre>"},{"location":"defaults/show/network/#default-values","title":"Default values","text":"<p>These are lists provided for reference to show what values will be in use if you do no customization.  If you want to customize these values, use the methods described above.  These do not show how to change a name or a list.</p>"},{"location":"defaults/show/network/#default-include","title":"Default <code>include</code>","text":"<pre><code>include:\n# TMDb Most Common &amp; Most Watched Network Rankings\n- ABC # American Broadcasting Company\n- CBS\n- Discovery\n- FOX\n- History\n- MTV\n- National Geographic\n- NBC\n- TBS\n\n## TMDb Most Common &amp; Top Streaming Service\n- Amazon\n- discovery+\n- iQiyi\n- Netflix\n- Tencent Video\n\n## Most Watched Network &amp; Top Streaming Service\n- AMC # 78 shows across networks\n\n## TMDb Most Common ##\n- ABC TV # Australian Broadcasting Corporation\n- ABS-CBN # ABS-CBN Corporation\n- AT-X # Japanese anime television network\n- ARD # Joint organisation of Germany's regional public-service broadcasters\n- Arte # European public service channel dedicated to culture\n- BBC One # British free-to-air public broadcast television channel\n- BBC Two # British free-to-air public broadcast television channel\n- BBC Four # British free-to-air public broadcast television channel\n- bilibili # B Site, a video sharing website based in Shanghai\n- CBC Television # Canadian English-language broadcast television network\n- Channel 3 # Thai free-to-air television network\n- Channel 4 # British free-to-air public broadcast television channel\n- Channel 5 # British free-to-air public broadcast television channel\n- Fuji TV # Japanese television station based\n- GMA Network # Philippine free-to-air television\n- ITV # British free-to-air public broadcast television network\n- KBS2 # Korean Broadcasting System, an entertainment oriented network\n- Las Estrellas # A TelevisaUnivision network\n- MBC # Munhwa Broadcasting Corporation - South Korea Channel 11\n- Nippon TV # JOAX-DTV, the flagship station of the Nippon News Network and the Nippon Television Network System\n- PBS # Public Broadcasting Service is an American public broadcaster and non-commercial, free-to-air television network\n- SVT1 # Swedish public service broadcaster Sveriges Television\n- TF1 # French commercial television network owned by TF1 Group\n- Tokyo MX # JOMX-DTV, an independent television station in Tokyo, Japan, owned by the Tokyo Metropolitan Television Broadcasting Corporation\n- tv asahi # JOEX-DTV, a television station owned and operated by the TV Asahi Corporation\n- TV Globo # Brazilian free-to-air television network\n- TV Tokyo # JOTX-DTV, a television station headquartered in the Sumitomo Fudosan Roppongi Grand Tower in Roppongi, Minato, Tokyo, Japan\n- TVB Jade # Hong Kong Cantonese-language free-to-air television channel\n- tvN # South Korean nationwide pay television network owned by CJ E&amp;M\n- RTL # Luxembourg-based international media conglomerate\n- Youku # A video hosting service based in Beijing, China\n- YouTube # online video sharing and social media platform headquartered in San Bruno, California\n- ZDF # German public-service television broadcaster based in Mainz, Rhineland-Palatinate\n\n## Identical Network Names in TMDb (but different id's)\n- SBS # Special Broadcasting Service &amp; Seoul Broadcasting System appears to be identical in TMDb\n- TV 2 # Norwegian terrestrial television channel &amp; Danish government-owned broadcast and subscription television station\n- TV3 # Catalan public broadcaster Televisi\u00f3 de Catalunya &amp; Malaysian free-to-air television channel\n\n## Most Watched Network Rankings ##\n- A&amp;E\n- Animal Planet\n- BET\n- Bravo\n- CNN\n- Comedy Central\n- ESPN\n- Food Network\n- Freeform\n- FX\n- Game Show Network\n- Hallmark\n- HGTV\n- Investigation Discovery\n- ION Television\n- Lifetime\n- Nickelodeon\n- Oxygen\n- Paramount Network # 24 shows, probably gets rolled into Paramount+ or vice versa\n- Syfy\n- Telemundo\n- The CW\n- TLC\n- TNT\n- Travel Channel\n- TV Land\n- UniM\u00e1s # TelevisaUnivision channel\n- Univision # Now TelevisaUnivision\n- USA Network\n- WE tv\n\n## Most Subscribed Streaming Service w/ min 50 shows\n- ALTBalaji # 61 shows\n- Apple TV+ # 153 shows\n- BluTV # 58 shows\n- Canal+ # 296 shows across networks\n- Disney+ # 285 shows\n- Globoplay # 118 shows\n- Max # 206 shows\n- Hulu # 258 shows\n- Paramount+ # 125 shows\n- Peacock # 124 shows\n- Shahid # 193 shows\n- Starz # 65 shows across networks\n- tving # 82 shows\n- Viaplay # 168 shows\n- ViuTV # 59 shows\n- ZEE5 # 184 shows\n\n## Addtional Thoughts\n- ABC Family # 92 shows - addon to ABC or Freeform depending on user pref\n- BET+ # 19 shows\n\n## Networks with posters already made\n- ABC Kids # Should be ABC TV addon\n- Acorn TV # 17 shows\n- Adult Swim # 126 shows\n- Amazon Kids+ # 5 shows\n- Antena 3 # 179 shows\n- BBC America # 37 shows\n- Boomerang # 20 shows\n- BritBox # 17 shows\n- Cartoon Network # 236 shows across networks\n- Cartoonito # 5 shows\n- CBC # 93 shows across networks - Different than CBC Television\n- Cbeebies # 121 shows\n- Cinemax # 36 shows across networks\n- Citytv # 38 shows\n- Cooking Channel # 48 shows\n- Crunchyroll # 14 shows\n- CTV # 233 shows across networks\n- Curiosity Stream # 54 shows\n- Dave # 55 shows\n- Discovery Kids # 38 shows across network\n- Disney Channel # 532 shows across networks\n- Disney Junior # 89 shows across networks\n- Disney XD # 82 shows - could get rolled to Disney+ or Disney Channel depending on user pref\n- E! # 149 shows\n- Epix # 30 shows\n- FXX # 16 shows - mostly all also part of FX\n- Family Channel # 40 shows\n- Fox Kids # 29 shows across networks\n- Freevee # 15 shows\n- Global TV # 86 shows\n- HBO # 462 shows across networks\n- IFC # 50 shows across networks\n- IMDb TV # 11 shows\n- Nick Jr # 35 shows\n- Nicktoons # 27 shows\n- PBS Kids # 45 shows\n- Showcase # 35 shows\n- Showtime # 212 shows\n- Shudder # 18 shows\n- Sky # a lot\n- Smithsonian # 125 shows across networks\n- Spike # 139 shows\n- Stan # 24 shows\n- Sundance TV # 33 shows\n- Turner Classic Movies # 5 shows\n- truTV # 99 shows\n- UPN # 108 shows\n- USA Network #155 shows\n- Universal Kids # 23 shows\n- VH1 # 225 shows\n- Vice\n</code></pre>"},{"location":"defaults/show/network/#default-addons","title":"Default <code>addons</code>","text":"<pre><code>addons:\nABC:\n- ABC.com\nABC TV:\n- ABC Comedy\n- ABC Me\n- ABC News\n- ABC iview\nAMC:\n- AMC.com\nAnimal Planet:\n- Animal Planet Brasil\n- Animal Planet Deutschland\nBET:\n- BET Her\nCanal+:\n- Canal+ Poland\n- Canal+ Family\n- Canal+ Discovery\n- Canal+ Afrique\nCartoon Network:\n- Cartoon Network Latin America\n- Cartoon Network Anything\nCBC:\n- CBCDrama\nCBC Television:\n- CBC Gem\n- CBC News Network\n- CBC Comedy\nCBS:\n- CBS.com\nCTV:\n- CTV Two\n- CTV News Channel\n- CTV Sci-Fi Channel\n- CTV Comedy Channel\n- CTV Life Channel\n- ctv.ca\nThe CW:\n- CW seed\nDiscovery:\n- Discovery Health Channel\n- Discovery Channel\n- Discovery Home &amp; Health Brasil\n- Discovery Family\n- Discovery Real Time\n- Discovery Asia\n- Discovery Home &amp; Health\n- Discovery Life\n- Discovery World\n- Discovery Science\nDisney Channel:\n- Toon Disney\n- Playhouse Disney\n- Disney Channel Asia\n- disney.com\n- Disney Channel Middle East\nDisney Junior:\n- Disney Junior Latin America\n- Disney Junior Brasil\nDisney+:\n- Disney+ Hotstar\nESPN:\n- ESPN2\n- ESPN+\n- ESPN Classic\n- ESPNU\n- ESPNews\n- ESPN Australia\n- Sony ESPN\n- ESPN.com\n- ESPN Deportes\nFOX:\n- Fox News Channel\n- Fox Sports\n- Fox Reality Channel\n- Fox Sports Networks\n- Fox Latin America\n- Fox Brasil\n- Fox Soccer\n- Fox Sports 2\n- Fox Nation\n- Fox Sports 1\n- fox.com\n- Fox Sports Detroit\nHallmark:\n- Hallmark Channel\n- Hallmark Drama\n- Hallmark Movie &amp; Mysteries\n- Hallmark Movies Now\nHBO:\n- HBO Brasil\n- HBO Europe\n- HBO Asia\n- HBO Latin America\n- HBO Espa\u00f1a\n- HBO Nordic\n- HBO Canada\n- HBO Family\n- HBO Mundi\nMax:\n- HBO Go\nHGTV:\n- HGTV Canada\nHistory:\n- History Channel Italia\nLifetime:\n- Lifetime Movies\nMTV:\n- MTV2\n- MTV3\n- MTV Lebanon\n- MTV Latin America\n- MTV Italia\n- MTV Australia\n- MTV Canada\n- MTV Global\n- MTV Nederland\nNational Geographic:\n- National Geographic Channel\n- National Geographic Brasil\n- National Geographic Latinoamerica\n- National Geographic India\nNBC:\n- CNBC\n- MSNBC\n- NBCSN\n- CNBC Europe\n- CNBC Asia\n- WNBC\n- Nikkei CNBC\n- KNBC\n- CNBC World\n- CNBC TV18\n- NBC Weather Plus\n- NBC Radio Network\nNickelodeon:\n- Nick at Nite\nParamount+:\n- CBS All Access # Rebranded on Mar 4, 2021\nSky:\n- Sky One\n- Sky Atlantic\n- Sky Arts\n- Sky History\n- Sky Living\n- Sky Crime\n- Sky Uno\n- Sky Max\n- Sky Sports\n- Sky Documentaries\n- Sky Nature\n- Sky News\n- Sky Cinema\n- Sky News Australia\n- Sky Italia\n- Sky Comedy\n- Sky Sports F1\n- Sky Two\n- Sky Witness\n- sky Travel\n- Sky Vision\n- Sky News Weather Channel\nSmithsonian:\n- Smithsonian Channel\n- Smithsonian Earth\nStarz:\n- Starz Encore\nTBS:\n- TBS.com\n- TBS Brasil\nTNT:\n- TNT Comedy\n- TNT Latin America\n- TNT Espa\u00f1a\n- TNT Serie\n- TNT Glitz\nTravel Channel:\n- Travel Channel United Kingdom\nVH1:\n- VH1 Classic\nVice:\n- Viceland\n- Vice TV\n- Vice.com\n</code></pre>"},{"location":"metadata/builders/","title":"Builders","text":"<p>Builders use third-party services to source items to be added to the collection. Multiple builders can be used in the same collection from a variety of sources listed below.</p> Name Description Requires Config Plex Grabs items based on the metadata inside your Plex Server. \u2705 Smart Creates Smart Collections based on the metadata inside your Plex Server. (Collections Only) \u2705 TMDb Grabs items based on metadata and lists on TheMovieDb.org. \u2705 TVDb Grabs items based on metadata and lists on TheTVDb.com. \u274c IMDb Grabs items based on metadata and lists on IMDb.com. \u274c Trakt Grabs items based on metadata and lists on Trakt.tv. \u2705 Tautulli Grabs items based on metadata and lists in your Tautulli. \u2705 Radarr Grabs items based on metadata and lists in your Radarr . \u2705 Sonarr Grabs items based on metadata and lists in your Sonarr. \u2705 MdbList Grabs items based on metadata and lists on MdbList.com. \u274c Letterboxd Grabs items based on metadata and lists on Letterboxd.com. \u274c ICheckMovies Grabs items based on metadata and lists on ICheckMovies.com. \u274c FlixPatrol Grabs items based on metadata and lists on FlixPatrol.com. \u274c Reciperr Grabs items based on metadata and lists on reciperr.com. \u274c StevenLu Grabs items based on metadata and lists on StevenLu.com. \u274c AniDB Grabs items based on metadata and lists on AniDB.net. \u274c AniList Grabs items based on metadata and lists on AniList.co. \u274c MyAnimeList Grabs items based on metadata and lists on MyAnimeList.net. \u2705"},{"location":"metadata/dynamic/","title":"Dynamic Collections","text":"<p>Plex Meta Manager can dynamically create collections based on different criteria, such as * Collections based on the Collections from TMDb for every item in the library. (Star Wars, Harry Potter, etc...) * Collections based on each of a Users Trakt Lists * Collections for the top <code>X</code> popular people on TMDb (Bruce Willis, Tom Hanks, etc...) * Collections for each decade represented in the library (Best of 1990s, Best of 2000s, etc...) * Collections for each of the moods/styles within a Music library (A Cappella, Pop Rock, etc...)</p> <p>The main purpose of dynamic collections is to automate the creation of collections which would otherwise require considerable user input and repetition (such as creating a collection for every genre).</p> <p>Each dynamic collection must have a mapping name (just like standard collections), which is also attached to the collection as a label to mark it as having been created by this dynamic collection.</p> <p>This example will create a collection for every TMDb Collection associated with items in the library.</p> <pre><code>dynamic_collections:\nTMDb Collections:          # This name is the mapping name\ntype: tmdb_collection\nremove_suffix: \"Collection\"\n</code></pre>"},{"location":"metadata/dynamic/#collection-naming","title":"Collection Naming","text":"<p>By default, the collections generated will be named for the thing being used to create them; things like genres, countries, actors or even Trakt List Names.</p> <p>There are many attributes that can change the titles, including <code>title_format</code>, <code>remove_suffix</code>, <code>remove_prefix</code>, <code>key_name_override</code>, and <code>title_override</code> all detailed below.</p>"},{"location":"metadata/dynamic/#dynamic-keys-key-names","title":"Dynamic Keys &amp; Key Names","text":"<p>A <code>dynamic key</code> or <code>key</code> for short is used to refer to a specific value/result from the dynamic collection criteria that will be used to create the collection.</p> <p>A <code>key_name</code> is the name that replaces <code>&lt;&lt;key_name&gt;&gt;</code> in <code>title_format</code> to create the collection titles for each key.</p> <p>An example of some keys and their names that would be generated from a <code>tmdb_collection</code> dynamic collection are * <code>key</code>: \"10\"   * <code>key_name</code>: Star Wars Collection * <code>key</code>: \"1241\"   * <code>key_name</code>: Harry Potter Collection</p>"},{"location":"metadata/dynamic/#example-key-usage","title":"Example Key Usage","text":"<p>Keys can be used for a number of purposes, examples can be found throughout this page. A few examples are shown below:</p> <ul> <li>Excluding the \"Horror\" key from the <code>Genre</code> dynamic collection definition</li> </ul> <pre><code>dynamic_collections:\nGenres:         # mapping name does not matter, just needs to be unique\ntype: genre\nexclude:\n- Horror\n</code></pre> <ul> <li>Using the <code>key_name_override</code> attribute to change the formatting of \"France\" to \"French\" so that a collection can be named \"French Cinema\" instead of simply \"France\"</li> <li>This particular example also uses the <code>title_format</code> attribute to manipulate the naming convention of the collections.</li> </ul> <pre><code>dynamic_collections:\nCountries:         # mapping name does not matter, just needs to be unique\ntype: country\ntitle_format: &lt;&lt;key_name&gt;&gt; Cinema\nkey_name_override:\nFrance: French\n</code></pre> <ul> <li>Using the <code>addons</code> attribute to combine multiple <code>keys</code>, i.e. merging \"MTV2\", \"MTV3\" and \"MTV (UK)\" into one \"MTV\" collection.</li> <li>When doing this, individual collections will not be created for the individual MTV collections, instead they will be merged within the \"MTV\" collection.</li> </ul> <pre><code>dynamic_collections:\nnetworks:\ntype: network\naddons:\nMTV:\n- MTV2\n- MTV3\n- MTV (UK)\n</code></pre>"},{"location":"metadata/dynamic/#attributes","title":"Attributes","text":"Attribute Description Required <code>type</code> Type of Dynamic Collection to be created. \u2705 <code>data</code> Data to determine how dynamic collections with a certain <code>type</code> are created. Depends on <code>type</code> <code>exclude</code> Exclude this list of keys from being created into collections. \u274c <code>addons</code> Defines how multiple keys can be combined under a parent key. \u274c <code>template</code> Name of the template to use for these dynamic collections. \u274c <code>template_variables</code> Defines how template variables can be defined by key. \u274c <code>other_template</code> Name of the template to use for the other collection. \u274c <code>remove_suffix</code> Removes the defined suffixes from the key before it's used in the collection title. \u274c <code>remove_prefix</code> Removes the defined prefixes from the key before it's used in the collection title. \u274c <code>title_format</code> This is the format for the collection titles. \u274c <code>key_name_override</code> Defines how key names can be overridden before they are formatted into collection titles. \u274c <code>title_override</code> Defines how collection titles can be overridden ignoring title formatting. \u274c <code>custom_keys</code> Defines if custom keys are allowed. \u274c <code>test</code> Will add <code>test: true</code> to all collections for test runs. \u274c <code>sync</code> Will remove dynamic collections that are no longer in the creation list. \u274c <code>include</code> Define a list of keys to be made into collections. \u274c <code>other_name</code> Used in combination with <code>include</code>. When defined, all keys not in <code>include</code> or <code>addons</code> will be combined into this collection. \u274c"},{"location":"metadata/dynamic/#type-data","title":"Type &amp; Data","text":"<p>Specifies the type of dynamic collection to be created.</p> <p>Depending on the <code>type</code> of dynamic collection, <code>data</code> is used to specify the options that are required to fulfill the requirements of creating the collection.</p> Type Option Description Uses<code>data</code> Movies Shows Music Video <code>tmdb_collection</code> Create a collection for each TMDb Collection associated with an item in the library \u274c \u2705 \u274c \u274c \u274c <code>tmdb_popular_people</code> Create a collection for each actor found on TMDb's Popular People List \u2705 \u2705 \u2705 \u274c \u274c <code>original_language</code> Create a collection for each TMDb original language associated with an item in the library \u274c \u2705 \u2705 \u274c \u274c <code>origin_country</code> Create a collection for each TMDb origin country associated with an item in the library \u274c \u274c \u2705 \u274c \u274c <code>trakt_user_lists</code> Create a collection for each list from specific trakt users \u2705 \u2705 \u2705 \u274c \u274c <code>trakt_liked_lists</code> Create a collection for each list the authenticated trakt user likes \u274c \u2705 \u2705 \u274c \u274c <code>trakt_people_list</code> Create a collection for each actor found in the trakt list \u2705 \u2705 \u2705 \u274c \u274c <code>actor</code> Create a collection for each actor found in the library \u2705 \u2705 \u2705 \u274c \u274c <code>director</code> Create a collection for each director found in the library \u2705 \u2705 \u274c \u274c \u274c <code>writer</code> Create a collection for each writer found in the library \u2705 \u2705 \u274c \u274c \u274c <code>producer</code> Create a collection for each producer found in the library \u2705 \u2705 \u274c \u274c \u274c <code>genre</code> Create a collection for each genre found in the library \u274c \u2705 \u2705 \u2705 \u2705 <code>album_genre</code> Create a collection for each album genre found in the library \u274c \u274c \u274c \u2705 \u274c <code>content_rating</code> Create a collection for each content rating found in the library \u274c \u2705 \u2705 \u274c \u2705 <code>year</code> Create a collection for each year found in the library \u274c \u2705 \u2705 \u274c \u274c <code>episode_year</code> Create a collection for each episode year found in the library \u274c \u2705 \u2705 \u274c \u274c <code>decade</code> Create a collection for each decade found in the library \u274c \u2705 \u2705 \u274c \u274c <code>country</code> Create a collection for each country found in the library \u274c \u2705 \u274c \u2705 \u2705 <code>resolution</code> Create a collection for each resolution found in the library \u274c \u2705 \u2705 \u274c \u274c <code>subtitle_language</code> Create a collection for each subtitle language found in the library \u274c \u2705 \u2705 \u274c \u274c <code>audio_language</code> Create a collection for each audio language found in the library \u274c \u2705 \u2705 \u274c \u274c <code>studio</code> Create a collection for each studio found in the library \u274c \u2705 \u2705 \u274c \u274c <code>edition</code> Create a collection for each edition found in the library \u274c \u2705 \u274c \u274c \u274c <code>network</code> Create a collection for each network found in the library \u274c \u274c \u2705 \u274c \u274c <code>mood</code> Create a collection for each artist mood found in the library \u274c \u274c \u274c \u2705 \u274c <code>album_mood</code> Create a collection for each album mood found in the library \u274c \u274c \u274c \u2705 \u274c <code>track_mood</code> Create a collection for each track mood found in the library \u274c \u274c \u274c \u2705 \u274c <code>style</code> Create a collection for each artist style found in the library \u274c \u274c \u274c \u2705 \u274c <code>album_style</code> Create a collection for each album style found in the library \u274c \u274c \u274c \u2705 \u274c <code>number</code> Creates a collection for each number defined \u2705 \u2705 \u2705 \u2705 \u2705 <code>custom</code> Creates a collection for each custom <code>key: key_name</code> pair defined. \u2705 \u2705 \u2705 \u2705 \u2705"},{"location":"metadata/dynamic/#tmdb-collection","title":"TMDb Collection","text":"<p>Create collections based on the TMDb Collections associated with items in the library.</p> <code>type</code> Option <code>tmdb_collection</code> <code>data</code> Value Not Used Keys TMDb Collection ID Key Names TMDb Collection Title Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\ntmdb_collection_details: &lt;&lt;value&gt;&gt;\nminimum_items: 2\n</code></pre>"},{"location":"metadata/dynamic/#example-create-collection-for-every-tmdb-collection-found-in-the-library","title":"Example: Create collection for every TMDb Collection found in the library.","text":"<pre><code>dynamic_collections:\nTMDb Collections:          # This name is the mapping name\ntype: tmdb_collection\nremove_suffix: Collection\nremove_prefix: The\n</code></pre>"},{"location":"metadata/dynamic/#tmdb-popular-people","title":"TMDb Popular People","text":"<p>Create collections based on each actor found on TMDb's Popular People List.</p> <code>type</code> Option <code>tmdb_popular_people</code> <code>data</code> Value Number greater than 0 Keys TMDb Person ID Key Names TMDb Person Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\ntmdb_person: &lt;&lt;value&gt;&gt;\nplex_search:\nall:\nactor: tmdb\n</code></pre>"},{"location":"metadata/dynamic/#example-create-collection-for-the-top-10-popular-people","title":"Example: Create collection for the top 10 popular people","text":"<pre><code>dynamic_collections:\nTMDb Popular People:          # This name is the mapping name\ntype: tmdb_popular_people\ndata: 10\n</code></pre>"},{"location":"metadata/dynamic/#original-language","title":"Original Language","text":"<p>Create collections based on the TMDb original language associated with items in the library.</p> <code>type</code> Option <code>original_language</code> <code>data</code> Value Not Used Keys ISO 639-1 Code Key Names ISO Language Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nplex_all: true\nfilters:\noriginal_language: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example-create-collection-for-every-tmdb-original-language-found-in-the-library","title":"Example: Create collection for every TMDb Original Language found in the library.","text":"<pre><code>dynamic_collections:\nTMDb Languages:          # This name is the mapping name\ntype: original_language\n</code></pre>"},{"location":"metadata/dynamic/#origin-country","title":"Origin Country","text":"<p>Create collections based on the TMDb origin country associated with items in the library.</p> <code>type</code> Option <code>origin_country</code> <code>data</code> Value Not Used Keys ISO 3166-1 alpha-2 country code Key Names ISO Country Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nplex_all: true\nfilters:\norigin_country: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example-create-collection-for-every-tmdb-origin-country-found-in-the-library","title":"Example: Create collection for every TMDb Origin Country found in the library.","text":"<pre><code>dynamic_collections:\nTMDb Countries:          # This name is the mapping name\ntype: origin_country\n</code></pre>"},{"location":"metadata/dynamic/#trakt-user-lists","title":"Trakt User Lists","text":"<p>Create collections for each of the Trakt lists for the specified users. Use <code>me</code> to reference the authenticated user.</p> <ul> <li>Requires Trakt Authentication to be configured within the Configuration File</li> </ul> <code>type</code> Option <code>trakt_user_lists</code> <code>data</code> Value List of Trakt Users Keys Trakt List URL Key Names Trakt List Title Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\ntrakt_list_details: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example-create-collections-for-each-of-the-lists-that-the-users-have-created","title":"Example: Create collections for each of the lists that the users have created","text":"<pre><code>dynamic_collections:\nTrakt User Lists:          # This name is the mapping name\ntype: trakt_user_lists\ndata:\n- me\n- yozoraxcii\n</code></pre>"},{"location":"metadata/dynamic/#trakt-liked-lists","title":"Trakt Liked Lists","text":"<p>Create collections for each of the Trakt lists that the authenticated user has liked.</p> <ul> <li>Requires Trakt Authentication to be configured within the Configuration File</li> </ul> <code>type</code> Option <code>trakt_liked_lists</code> <code>data</code> Value Not Used Keys Trakt List URL Key Names Trakt List Title Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\ntrakt_list_details: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example-create-collections-for-each-of-the-lists-that-the-user-has-liked-within-trakt","title":"Example: Create collections for each of the lists that the user has liked within Trakt","text":"<pre><code>dynamic_collections:\nTrakt Liked Lists:          # This name is the mapping name\ntype: trakt_liked_lists\n</code></pre>"},{"location":"metadata/dynamic/#trakt-people-lists","title":"Trakt People Lists","text":"<p>Create collections for each of the people found within Trakt lists that the user specifies.</p> <ul> <li>Requires Trakt Authentication to be configured within the Configuration File</li> </ul> <code>type</code> Option <code>trakt_user_lists</code> <code>data</code> Value List of Trakt URLs Keys TMDb Person ID Key Names TMDb Person Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\ntmdb_person: &lt;&lt;value&gt;&gt;\nplex_search:\nall:\nactor: tmdb\n</code></pre>"},{"location":"metadata/dynamic/#example-create-a-collection-for-each-of-the-people-on-the-trakt-list","title":"Example: Create a collection for each of the people on the trakt list","text":"<pre><code>dynamic_collections:\nTrakt User Lists:\ntype: trakt_people_lists\ndata:\n- https://trakt.tv/users/ash9001/lists/all-time-top-actors\n</code></pre>"},{"location":"metadata/dynamic/#actor","title":"Actor","text":"<p>Create a collection for each actor found in the library.</p> <code>type</code> Option <code>actor</code> <code>data</code> Values Attribute Description &amp; Values <code>depth</code> Values: Number greater than 0 Default: 3 <code>minimum</code> Values: Number greater than 0 Default: 3 <code>limit</code> Values: Number greater than 0 Default: None Keys Person Name Key Names Person Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\nplex_search:\nany:\nactor: &lt;&lt;value&gt;&gt;\n</code></pre> <ul> <li><code>depth</code> determines how many top billed actor per item they are in. (i.e. if they play a cameo role, this is unlikely to be counted)</li> <li><code>minimum</code> determines the minimum number of times the actor must appear within <code>depth</code> for the collection to be created.</li> <li><code>limit</code> determines the number of actor collection to max out at. (i.e. if to make collections for the top 25 actors)</li> </ul>"},{"location":"metadata/dynamic/#example","title":"Example:","text":"<ul> <li>Create a collection for the top 25 actors who appear in the top 5 billing credits of movies</li> </ul> <pre><code>dynamic_collections:\nTop Actors:         # mapping name does not matter just needs to be unique\ntype: actor\ndata:\ndepth: 5\nlimit: 25\n</code></pre>"},{"location":"metadata/dynamic/#example_1","title":"Example:","text":"<ul> <li>Create a collection for actors who appear in the top 5 billing credits of movies</li> <li>Only create the collection if they are in the top 5 billing credits of at least 20 movies</li> </ul> <pre><code>dynamic_collections:\nActors:         # mapping name does not matter just needs to be unique\ntype: actor\ndata:\ndepth: 5\nminimum: 20\n</code></pre>"},{"location":"metadata/dynamic/#director","title":"Director","text":"<p>Create a collection for each director found in the library.</p> <code>type</code> Option <code>director</code> <code>data</code> Values Attribute Description &amp; Values <code>depth</code> Values: Number greater than 0 Default: 3 <code>minimum</code> Values: Number greater than 0 Default: 3 <code>limit</code> Values: Number greater than 0 Default: None Keys Person Name Key Names Person Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\nplex_search:\nany:\ndirector: &lt;&lt;value&gt;&gt;\n</code></pre> <ul> <li><code>depth</code> determines how many directors are looked at per item.</li> <li><code>minimum</code> determines the minimum number of times the director must appear within <code>depth</code> for the collection to be created.</li> <li><code>limit</code> determines the number of director collection to max out at. (i.e. if to make collections for the top 25 directors)</li> </ul>"},{"location":"metadata/dynamic/#example_2","title":"Example:","text":"<ul> <li>Create a collection for the top 5 directors who appear in the top director credit of movies</li> </ul> <pre><code>dynamic_collections:\nTop Directors:         # mapping name does not matter just needs to be unique\ntype: director\ndata:\ndepth: 1\nlimit: 5\n</code></pre>"},{"location":"metadata/dynamic/#example_3","title":"Example:","text":"<ul> <li>Create a collection for directors who appear in the top director credits of movies</li> <li>Only create the collection if they are in the top director credits of at least 10 movies</li> </ul> <pre><code>dynamic_collections:\nDirectors:         # mapping name does not matter just needs to be unique\ntype: director\ndata:\ndepth: 1\nminimum: 10\n</code></pre>"},{"location":"metadata/dynamic/#writer","title":"Writer","text":"<p>Create a collection for each writer found in the library.</p> <code>type</code> Option <code>writer</code> <code>data</code> Values Attribute Description &amp; Values <code>depth</code> Values: Number greater than 0 Default: 3 <code>minimum</code> Values: Number greater than 0 Default: 3 <code>limit</code> Values: Number greater than 0 Default: None Keys Person Name Key Names Person Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\nplex_search:\nany:\nwriter: &lt;&lt;value&gt;&gt;\n</code></pre> <ul> <li><code>depth</code> determines how many writers are looked at per item.</li> <li><code>minimum</code> determines the minimum number of times the writer must appear within <code>depth</code> for the collection to be created.</li> <li><code>limit</code> determines the number of writer collection to max out at. (i.e. if to make collections for the top 25 writers)</li> </ul>"},{"location":"metadata/dynamic/#example_4","title":"Example:","text":"<ul> <li>Create a collection for the top 5 writers who appear in the top writer credit of movies</li> </ul> <pre><code>dynamic_collections:\nTop Writers:         # mapping name does not matter just needs to be unique\ntype: writer\ndata:\ndepth: 1\nlimit: 5\n</code></pre>"},{"location":"metadata/dynamic/#example_5","title":"Example:","text":"<ul> <li>Create a collection for writers who appear in the top writer credits of movies</li> <li>Only create the collection if they are in the top writer credits of at least 10 movies</li> </ul> <pre><code>dynamic_collections:\nWriters:         # mapping name does not matter just needs to be unique\ntype: writer\ndata:\ndepth: 1\nminimum: 10\n</code></pre>"},{"location":"metadata/dynamic/#producer","title":"Producer","text":"<p>Create a collection for each producer found in the library.</p> <code>type</code> Option <code>producer</code> <code>data</code> Values Attribute Description &amp; Values <code>depth</code> Values: Number greater than 0 Default: 3 <code>minimum</code> Values: Number greater than 0 Default: 3 <code>limit</code> Values: Number greater than 0 Default: None Keys Person Name Key Names Person Name Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\nplex_search:\nall:\nproducer: &lt;&lt;value&gt;&gt;\n</code></pre> <ul> <li><code>depth</code> determines how many producers are looked at per item.</li> <li><code>minimum</code> determines the minimum number of times the producer must appear within <code>depth</code> for the collection to be created.</li> <li><code>limit</code> determines the number of producer collection to max out at. (i.e. if to make collections for the top 25 producers)</li> </ul>"},{"location":"metadata/dynamic/#example_6","title":"Example:","text":"<ul> <li>Create a collection for the top 5 producers who appear in the top producer credit of movies</li> </ul> <pre><code>dynamic_collections:\nTop Producers:         # mapping name does not matter just needs to be unique\ntype: producer\ndata:\ndepth: 1\nlimit: 5\n</code></pre>"},{"location":"metadata/dynamic/#example_7","title":"Example:","text":"<ul> <li>Create a collection for producers who appear in the top producer credits of movies</li> <li>Only create the collection if they are in the top producer credits of at least 10 movies</li> </ul> <pre><code>dynamic_collections:\nProducers:         # mapping name does not matter just needs to be unique\ntype: producers\ndata:\ndepth: 1\nminimum: 10\n</code></pre>"},{"location":"metadata/dynamic/#genre","title":"Genre","text":"<p>Create a collection for each genre found in the library.</p> <code>type</code> Option <code>genre</code> <code>data</code> Value Not Used Keys Genre Key Names Genre Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\ngenre: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_8","title":"Example:","text":"<ul> <li>Create dynamic collections based on each genre found in the library (TV and Movies)</li> <li>Amend the template to increase the limit from 50 to 100</li> <li>Exclude the \"Talk Show\" genre</li> <li>Name the collection \"Top [Genre] Movies\" or \"Top [Genre] Shows\"</li> </ul> <pre><code>templates:\ngenre collection:\nsmart_filter:\nlimit: 100\nsort_by: critic_rating.desc\nall:\ngenre: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nGenres:         # mapping name does not matter just needs to be unique\ntype: genre\nexclude:\n- Talk Show\ntitle_format: Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s\ntemplate: genre collection\n</code></pre>"},{"location":"metadata/dynamic/#album-genre","title":"Album Genre","text":"<p>Create a collection for each album genre found in the library.</p> <code>type</code> Option <code>album_genre</code> <code>data</code> Value Not Used Keys Genre Key Names Genre Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; Albums</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: plays.desc\nany:\nalbum_genre: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_9","title":"Example:","text":"<ul> <li>Create dynamic collections based on each Album genre found in the library</li> <li>Amend the template to increase the limit from 10 to 20 </li> <li>Exclude the \"Pop\" genre</li> <li>Name the collection \"Top 20 [Genre] Albums\"</li> </ul> <pre><code>templates:\ngenre collection:\nsmart_filter:\nlimit: 100\nsort_by: plays.desc\nall:\nalbum_genre: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nGenres:         # mapping name does not matter just needs to be unique\ntype: album_genre\nexclude:\n- Pop\ntitle_format: Top 20 &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s\ntemplate: genre collection\n</code></pre>"},{"location":"metadata/dynamic/#content-rating","title":"Content Rating","text":"<p>Create a collection for each content rating found in the library.</p> <code>type</code> Option <code>content_rating</code> <code>data</code> Value Not Used Keys Content Rating Key Names Content Rating Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\ncontent_rating: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_10","title":"Example:","text":"<ul> <li>Create dynamic collections based on each content rating found in the library (TV and Movies)</li> <li>Amend the template to increase the limit from 50 to 100</li> </ul> <pre><code>templates:\ncontent rating collection:\nsmart_filter:\nlimit: 100\nsort_by: critic_rating.desc\nall:\ncontent_rating: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nContent Ratings:         # mapping name does not matter just needs to be unique\ntype: content_rating\ntemplate: content rating collection\n</code></pre>"},{"location":"metadata/dynamic/#year","title":"Year","text":"<p>Create a collection for each year found in the library.</p> <code>type</code> Option <code>year</code> <code>data</code> Value Not Used Keys Year Key Names Year Default <code>title_format</code> <code>Best &lt;&lt;library_type&gt;&gt;s of &lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\nyear: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_11","title":"Example","text":"<ul> <li>Create dynamic collections based on each year found in the library (TV and Movies)</li> <li>Use the <code>include</code> attribute to only show collections for years \"2020\", \"2021\" and \"2022\"</li> <li>Name the collection \"Best of [Year]\"</li> </ul> <pre><code>dynamic_collections:\nYears:         # mapping name does not matter just needs to be unique\ntype: year\ninclude:\n- 2020\n- 2021\n- 2022\ntitle_format: Best of &lt;&lt;key_name&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#episode-year","title":"Episode Year","text":"<p>Create a collection for each episode year found in the library.</p> <code>type</code> Option <code>episode_year</code> <code>data</code> Value Not Used Keys Episode Year Key Names Year Default <code>title_format</code> <code>Best &lt;&lt;library_type&gt;&gt;s of &lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\nepisode_year: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_12","title":"Example","text":"<ul> <li>Create dynamic collections based on each year found in the library (TV and Movies)</li> <li>Use the <code>include</code> attribute to only show collections for years \"2020\", \"2021\" and \"2022\"</li> <li>Name the collection \"Best of [Year]\"</li> </ul> <pre><code>dynamic_collections:\nYears:         # mapping name does not matter just needs to be unique\ntype: episode_year\ninclude:\n- 2020\n- 2021\n- 2022\ntitle_format: Best of &lt;&lt;key_name&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#decade","title":"Decade","text":"<p>Create a collection for each decade found in the library</p> <code>type</code> Option <code>decade</code> <code>data</code> Value Not Used Keys Decade Key Names Decade Default <code>title_format</code> <code>Best &lt;&lt;library_type&gt;&gt;s of &lt;&lt;key_name&gt;&gt;</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\ndecade: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_13","title":"Example:","text":"<ul> <li>Create a collection for each decade found in the library (TV and Movies)</li> <li>Name the collection \"Top [Decade] Movies\"</li> <li>Rename the <code>2020</code> collection name to \"Top 2020 Movies (so far)\"</li> </ul> <pre><code>dynamic_collections:\nDecades:         # mapping name does not matter just needs to be unique\ntype: decade\ntitle_format: Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s\ntitle_override:\n2020: Top 2020 Movies (so far)\n</code></pre>"},{"location":"metadata/dynamic/#country","title":"Country","text":"<p>Create a collection for each country found in the library</p> <code>type</code> Option <code>country</code> <code>data</code> Value Not Used Keys Country Key Names Country Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\ncountry: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_14","title":"Example:","text":"<ul> <li>Create a collection for the top movies from each country found in the library</li> <li>Name the collection \"Top [Country] Cinema\"</li> <li>The <code>key_name_override</code> attribute is used here in combination with the <code>title_format</code> to change the collection name from \"France\" which would be the default title, to \"Top French Cinema\"</li> </ul> <pre><code>dynamic_collections:\nCountries:         # mapping name does not matter just needs to be unique\ntype: country\ntitle_format: Top &lt;&lt;key_name&gt;&gt; Cinema\nkey_name_override:\nFrance: French\nGermany: German\nIndia: Indian\n</code></pre>"},{"location":"metadata/dynamic/#resolution","title":"Resolution","text":"<p>Create a collection for each resolution found in the library</p> <code>type</code> Option <code>resolution</code> <code>data</code> Value Not Used Keys Resolution Key Names Resolution Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: title.asc\nany:\nresolution: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_15","title":"Example:","text":"<ul> <li>Create a collection for each resolution found in the library</li> <li>Name the collection \"[Resolution] Movies\"</li> <li>Combine 480p, 576p and SD into a collection called \"SD Movies\" <pre><code>dynamic_collections:\nResolutions:         # mapping name does not matter just needs to be unique\ntype: resolution\naddons:\n480p:\n- 576p\n- SD\ntitle_override:\n480p: SD Movies\n</code></pre></li> </ul>"},{"location":"metadata/dynamic/#subtitle-language","title":"Subtitle Language","text":"<p>Create a collection for each subtitle language found in the library</p> <code>type</code> Option <code>subtitle_language</code> <code>data</code> Value Not Used Keys ISO 639-1 Code Key Names Subtitle Language Name Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.asc\nany:\nsubtitle_language: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_16","title":"Example:","text":"<ul> <li>Create a collection for each subtitle language found in the library</li> </ul> <pre><code>dynamic_collections:\nSubtitle Languages:         # mapping name does not matter just needs to be unique\ntype: subtitle_language\n</code></pre>"},{"location":"metadata/dynamic/#audio-language","title":"Audio Language","text":"<p>Create a collection for each audio language found in the library</p> <code>type</code> Option <code>audio_language</code> <code>data</code> Value Not Used Keys ISO 639-1 Code Key Names Audio Language Name Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.asc\nany:\naudio_language: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_17","title":"Example:","text":"<ul> <li>Create a collection for each audio language found in the library</li> </ul> <pre><code>dynamic_collections:\nAudio Languages:         # mapping name does not matter just needs to be unique\ntype: audio_language\n</code></pre>"},{"location":"metadata/dynamic/#studio","title":"Studio","text":"<p>Create a collection for each studio found in the library.</p> <code>type</code> Option <code>studio</code> <code>data</code> Value Not Used Keys Studio Key Names Studio Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\nstudio: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_18","title":"Example:","text":"<ul> <li>Create a collection for each studio found in a Movies library</li> </ul> <pre><code>templates:\nstudio collection:\nsmart_filter:\nsort_by: critic_rating.desc\nall:\nstudio: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nStudios:         # mapping name does not matter just needs to be unique\ntype: studio\ntitle_format: &lt;&lt;key_name&gt;&gt;\ntemplate: studio collection\n</code></pre>"},{"location":"metadata/dynamic/#edition","title":"Edition","text":"<p>Create a collection for each edition found in the library.</p> <code>type</code> Option <code>edition</code> <code>data</code> Value Not Used Keys Editions Key Names Edition Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\nedition: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_19","title":"Example:","text":"<ul> <li>Create a collection for each edition found in a Movies library</li> </ul> <pre><code>templates:\nedition collection:\nsmart_filter:\nsort_by: critic_rating.desc\nall:\nedition: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nSditions:         # mapping name does not matter just needs to be unique\ntype: edition\ntitle_format: &lt;&lt;key_name&gt;&gt;\ntemplate: edition collection\n</code></pre>"},{"location":"metadata/dynamic/#network","title":"Network","text":"<p>Create a collection for each network found in the library.</p> <code>type</code> Option <code>network</code> <code>data</code> Value Not Used Keys Network Key Names Network Default <code>title_format</code> <code>Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: critic_rating.desc\nany:\nnetwork: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_20","title":"Example:","text":"<ul> <li>Create a collection for each network found in a TV Shows library</li> </ul> <pre><code>templates:\nnetwork collection:\nsmart_filter:\nsort_by: critic_rating.desc\nall:\nnetwork: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nNetworks:         # mapping name does not matter just needs to be unique\ntype: network\ntitle_format: &lt;&lt;key_name&gt;&gt;\ntemplate: network collection\n</code></pre>"},{"location":"metadata/dynamic/#mood","title":"Mood","text":"<p>Create a collection for each artist mood found in the library.</p> <code>type</code> Option <code>mood</code> <code>data</code> Value Not Used Keys Mood Key Names Mood Default <code>title_format</code> <code>Most Played &lt;&lt;value&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 10\nsort_by: plays.desc\nany:\nartist_mood: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_21","title":"Example:","text":"<ul> <li>Create a collection for the top 20 artists for each mood found in the Music library</li> <li>Amend the template to increase the limit from 10 to 20 </li> <li>Name the collection \"Top 20 [Mood] Artists\"</li> </ul> <pre><code>templates:\nmood collection:\nsmart_filter:\nlimit: 20\nsort_by: plays.desc\nall:\nartist_mood: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nMoods:         # mapping name does not matter just needs to be unique\ntype: mood\ntitle_format: Top 20 &lt;&lt;key_name&gt;&gt; Artists\ntemplate: mood collection\n</code></pre>"},{"location":"metadata/dynamic/#album-mood","title":"Album Mood","text":"<p>Create a collection for each album mood found in the library.</p> <code>type</code> Option <code>album_mood</code> <code>data</code> Value Not Used Keys Mood Key Names Mood Default <code>title_format</code> <code>Most Played &lt;&lt;value&gt;&gt; Albums</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 10\nsort_by: plays.desc\nany:\nalbum_mood: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_22","title":"Example:","text":"<ul> <li>Create a collection for the top 20 albums for each mood found in the Music library</li> <li>Amend the template to increase the limit from 10 to 20 </li> <li>Name the collection \"Top 20 [Mood] Albums\"</li> </ul> <pre><code>templates:\nmood collection:\nsmart_filter:\nlimit: 20\nsort_by: plays.desc\nall:\nalbum_mood: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nMoods:         # mapping name does not matter just needs to be unique\ntype: album_mood\ntitle_format: Top 20 &lt;&lt;key_name&gt;&gt; Albums\ntemplate: mood collection\n</code></pre>"},{"location":"metadata/dynamic/#track-mood","title":"Track Mood","text":"<p>Create a collection for each track mood found in the library.</p> <code>type</code> Option <code>track_mood</code> <code>data</code> Value Not Used Keys Mood Key Names Mood Default <code>title_format</code> <code>Most Played &lt;&lt;value&gt;&gt; Tracks</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 50\nsort_by: plays.desc\nany:\ntrack_mood: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_23","title":"Example:","text":"<ul> <li>Create a collection for the top 100 tracks for each mood found in the Music library</li> <li>Amend the template to increase the limit from 50 to 100 </li> <li>Name the collection \"Top 100 [Mood] Tracks\"</li> </ul> <pre><code>templates:\nmood collection:\nsmart_filter:\nlimit: 100\nsort_by: plays.desc\nall:\ntrack_mood: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nMoods:         # mapping name does not matter just needs to be unique\ntype: track_mood\ntitle_format: Top 100 &lt;&lt;key_name&gt;&gt; Tracks\ntemplate: mood collection\n</code></pre>"},{"location":"metadata/dynamic/#style","title":"Style","text":"<p>Create a collection for each artist style found in the library.</p> <code>type</code> Option <code>style</code> <code>data</code> Value Not Used Keys Style Key Names Style Default <code>title_format</code> <code>Most Played &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 10\nsort_by: plays.desc\nany:\nartist_style: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_24","title":"Example:","text":"<ul> <li>Create a collection for the top 10 artists for each style found in the Music library</li> <li>Name the collection \"Top [Style] Artists\"</li> </ul> <pre><code>templates:\nstyle collection:\nsmart_filter:\nlimit: 10\nsort_by: plays.desc\nall:\nartist_style: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nStyles:         # mapping name does not matter just needs to be unique\ntype: style\ntitle_format: Top &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;\ntemplate: style collection\n</code></pre>"},{"location":"metadata/dynamic/#album-style","title":"Album Style","text":"<p>Create a collection for each album style found in the library.</p> <code>type</code> Option <code>album_style</code> <code>data</code> Value Not Used Keys Style Key Names Style Default <code>title_format</code> <code>Most Played &lt;&lt;key_name&gt;&gt; Albums</code> Default Template <pre><code>default_template:\nsmart_filter:\nlimit: 10\nsort_by: plays.desc\nany:\nalbum_style: &lt;&lt;value&gt;&gt;\n</code></pre>"},{"location":"metadata/dynamic/#example_25","title":"Example:","text":"<ul> <li>Create a collection for the top 10 albums for each style found in the Music library</li> <li>Name the collection \"Top [Style] Albums\"</li> </ul> <pre><code>templates:\nstyle collection:\nbuilder_level: album\nsmart_filter:\nlimit: 10\nsort_by: plays.desc\nall:\nalbum_style: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nStyles:         # mapping name does not matter just needs to be unique\ntype: album_style\ntitle_format: Top &lt;&lt;key_name&gt;&gt; Albums\ntemplate: style collection\n</code></pre>"},{"location":"metadata/dynamic/#number","title":"Number","text":"<p>Creates a collection for each number defined.</p> <code>type</code> Option <code>number</code> <code>data</code> Values Attribute Description &amp; Values <code>starting</code> Values: Number greater than 0 Default: 0 <code>ending</code> Values: Number greater than 1 Default: 1 <code>increment</code> Values: Number greater than 0 Default: 1 <ul> <li><code>starting</code> and <code>ending</code> can also have the value <code>current_year</code></li> <li>You can also use a value relative to the <code>current_year</code> by doing <code>current_year-5</code></li> </ul> Keys Number Key Names Number Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template **None**"},{"location":"metadata/dynamic/#example_26","title":"Example:","text":"<ul> <li>Create a collection for the Oscar Winner by Year for the last 5 years</li> <li>Name the collection \"Oscars Winners [Number]\"</li> </ul> <pre><code>templates:\nOscars:\nsummary: Academy Awards (Oscars) Winners for &lt;&lt;key&gt;&gt;\nimdb_list: https://www.imdb.com/search/title/?release_date=&lt;&lt;key&gt;&gt;-01-01,&lt;&lt;key&gt;&gt;-12-31&amp;groups=oscar_winner&amp;sort=moviemeter,asc\nsync_mode: sync\ncollection_order: custom\ndynamic_collections:\nOscars Winners Awards:\ntype: number\nsync: true\ndata:\nstarting: current_year-5\nending: current_year\ntitle_format: Oscars Winners &lt;&lt;key_name&gt;&gt;\ntemplate:\n- Oscars\n</code></pre>"},{"location":"metadata/dynamic/#custom","title":"Custom","text":"<p>Creates a collection for each custom <code>key: key_name</code> pair defined.</p> <code>type</code> Option <code>custom</code> <code>data</code> Values Strings to iterate Keys <code>key</code> Key Names <code>key_name</code> Default <code>title_format</code> <code>&lt;&lt;key_name&gt;&gt;</code> Default Template None"},{"location":"metadata/dynamic/#example_27","title":"Example:","text":"<ul> <li>Create a collection for the various Streaming Services</li> <li>Name the collection \"[Key Name] Movies\"</li> </ul> <pre><code>templates:\nstreaming:\ncache_builders: 1\nsmart_label: release.desc\nsync_mode: sync\nmdblist_list: https://mdblist.com/lists/plexmetamanager/&lt;&lt;key&gt;&gt;-movies\nurl_poster: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager-Images/master/streaming/&lt;&lt;key_name_encoded&gt;&gt;.jpg\n\ndynamic_collections:\nStreaming:\ntype: custom\ndata:\nall-4: All 4\nappletv: Apple TV+\nbet: BET+\nbritbox: BritBox\ndisney: Disney+\nmax: Max\nhulu: Hulu\nnetflix: Netflix\nnow: NOW\nparamount: Paramount+\npeacock: Peacock\namazon-prime-video: Prime Video\ntitle_format: &lt;&lt;key_name&gt;&gt; Movies\ntemplate:\n- streaming\n- shared\n</code></pre>"},{"location":"metadata/dynamic/#exclude","title":"Exclude","text":"<p>Exclude this list of <code>keys</code> from being created into collections.</p> <p>For example when making a <code>genre</code> dynamic collection definition you can exclude \"Horror\" from having a collection created from the key.</p> <pre><code>dynamic_collections:\nGenres:         # mapping name does not matter, just needs to be unique\ntype: genre\nexclude:\n- Horror\n</code></pre>"},{"location":"metadata/dynamic/#addons","title":"Addons","text":"<p>Defines how multiple <code>keys</code> can be combined under a parent key.</p> <p>For example, the <code>addons</code> attribute can be used to combine multiple <code>keys</code>, i.e. merging \"MTV2\", \"MTV3\" and \"MTV (UK)\" into the  \"MTV\" collection.</p> <pre><code>dynamic_collections:\nnetworks:\ntype: network\naddons:\nMTV:\n- MTV2\n- MTV3\n- MTV (UK)\n</code></pre> <p>You can also define custom keys under addons if the main key doesn't exist as a key it will be considered a custom key combining all keys into one key.</p>"},{"location":"metadata/dynamic/#template","title":"Template","text":"<p>Name of the template to use for these dynamic collections. Each <code>type</code> has its own default template, but if you want to define and use your own template you can.</p> <p>Each template is passed a few template variables you can use. * <code>value</code>: The list of keys and addons * <code>key</code>: The dynamic key * <code>key_name</code>: The key after <code>key_name_override</code>, <code>remove_prefix</code>, or <code>remove_suffix</code> are run on it.</p> <p>For example, the template below removes the limit on the <code>smart_filter</code> so it shows all items in each network</p> <pre><code>templates:\nnetwork collection:\nsmart_filter:\nsort_by: critic_rating.desc\nall:\nnetwork: &lt;&lt;value&gt;&gt;\ndynamic_collections:\nNetworks:         # mapping name does not matter just needs to be unique\ntype: network\ntitle_format: &lt;&lt;key_name&gt;&gt;\ntemplate: network collection\n</code></pre>"},{"location":"metadata/dynamic/#template-variables","title":"Template Variables","text":"<p>Defines how template variables can be defined by key.</p> <p>For example, when using <code>type: tmdb_collection</code> and you want to define a poster url for some collections</p> <pre><code>templates:\nmy_template:\noptional:\n- my_collection_poster\ntmdb_collection_details: &lt;&lt;value&gt;&gt;\ncollection_order: release\nurl_poster: &lt;&lt;my_collection_poster&gt;&gt;\ndynamic_collections:\nTMDb Collections:          # This name is the mapping name\ntype: tmdb_collection\nremove_suffix: \"Collection\"\ntemplate: my_template\ntemplate_variables:\nmy_collection_poster:\n119: https://www.themoviedb.org/t/p/original/oENY593nKRVL2PnxXsMtlh8izb4.jpg\n531241: https://www.themoviedb.org/t/p/original/nogV4th2P5QWYvQIMiWHj4CFLU9.jpg\n</code></pre>"},{"location":"metadata/dynamic/#other-template","title":"Other Template","text":"<p>Name of the template to use for the other collection. Will use the same template as the rest of the dynamic collections unless specified.</p> <p>Each template is passed a few template variables you can use. * <code>value</code>: The list of keys and addons * <code>key</code>: The dynamic key * <code>key_name</code>: The key after <code>key_name_override</code>, <code>remove_prefix</code>, or <code>remove_suffix</code> are run on it. * <code>included_keys</code>: The list of included keys * <code>used_keys</code>: The list of all keys used (included_keys and their addon keys)</p>"},{"location":"metadata/dynamic/#remove-prefixsuffix","title":"Remove Prefix/Suffix","text":"<p>Removes the defined prefixes/suffixes from the key before it\u2019s used in the collection title.</p> <p>For example, when using <code>type: tmdb_collection</code> you may not want every collection title to end with <code>Collection</code></p> <pre><code>dynamic_collections:\nTMDb Collections:          # This name is the mapping name\ntype: tmdb_collection\nremove_suffix: \"Collection\"\n</code></pre>"},{"location":"metadata/dynamic/#title-format","title":"Title Format","text":"<p>This is the format for the collection titles.</p> <p>there are two special tags you can include in the <code>title_format</code> * <code>&lt;&lt;key_name&gt;&gt;</code> is required and is what will be replaced by the dynamic key name. * <code>&lt;&lt;library_type&gt;&gt;</code> will be replaced with either Movie, Show, or Artist depending on your library type.</p> <p>Here's an example using <code>title_format</code>.</p> <pre><code>dynamic_collections:\nGenres:         # mapping name does not matter just needs to be unique\ntype: genre\ntitle_format: Top 50 &lt;&lt;key_name&gt;&gt; &lt;&lt;library_type&gt;&gt;s\n</code></pre>"},{"location":"metadata/dynamic/#key-name-override","title":"Key Name Override","text":"<p>Defines how key names can be overridden before they are formatted into collection titles.</p> <p>This example uses the <code>key_name_override</code> attribute to change the formatting of \"France\" to \"French\" so that a collection can be named \"French Cinema\" instead of simply \"France\"   * This particular example also uses the <code>title_format</code> attribute to manipulate the naming convention of the collections.</p> <pre><code>dynamic_collections:\nCountries:         # mapping name does not matter, just needs to be unique\ntype: country\ntitle_format: &lt;&lt;key_name&gt;&gt; Cinema\nkey_name_override:\nFrance: French\n</code></pre>"},{"location":"metadata/dynamic/#title-override","title":"Title Override","text":"<p>Defines how collection titles can be overridden ignoring title formatting.</p> <p>Here's an example using <code>title_override</code> that will override the TMDb Star Wars collection which has an TMDb ID of <code>10</code> with `Star Wars Universe.</p> <pre><code>dynamic_collections:\nTMDb Collections:          # mapping name does not matter, just needs to be unique\ntype: tmdb_collection\nremove_suffix: \"Collection\"\ntitle_override:\n10: Star Wars Universe\n</code></pre>"},{"location":"metadata/dynamic/#custom-keys","title":"Custom Keys","text":"<p>Defines if custom keys are allowed. Can be <code>true</code> or <code>false</code>. Defaults to <code>true</code>.</p> <p>Here's an example using <code>custom_keys</code>.</p> <pre><code>dynamic_collections:\nTMDb Collections:          # mapping name does not matter, just needs to be unique\ntype: tmdb_collection\nremove_suffix: \"Collection\"\ncustom_keys: false\n</code></pre>"},{"location":"metadata/dynamic/#test","title":"Test","text":"<p>Will add <code>test: true</code> to all collections for test runs.</p> <p>Here's an example using <code>test</code>.</p> <pre><code>dynamic_collections:\nGenres:         # mapping name does not matter just needs to be unique\ntype: genre\ntest: true\n</code></pre>"},{"location":"metadata/dynamic/#sync","title":"Sync","text":"<p>Will remove dynamic collections that are no longer in the creation list.</p> <p>The mapping name is added as a label to any collection created using dynamic and because of this when <code>sync</code> is true all collections with that label not found in this run will be deleted.</p> <p>Here's an example using <code>sync</code>.</p> <pre><code>dynamic_collections:\nTrakt Liked Lists:          # mapping name does not matter just needs to be unique\ntype: trakt_liked_lists\nsync: true\n</code></pre>"},{"location":"metadata/dynamic/#include","title":"Include","text":"<p>Define a list of keys to be made into collections.</p> <p>This cannot be used with <code>exclude</code>.</p> <p>Here's an example using <code>include</code>.</p> <pre><code>dynamic_collections:\nGenres:         # mapping name does not matter just needs to be unique\ntype: genre\ninclude:\n- Action\n- Adventure\n- Animation\n- Comedy\n- Family\n- Fantasy\n- Horror\n- Romance\n- Science Fiction\n- War\n</code></pre>"},{"location":"metadata/dynamic/#other-name","title":"Other Name","text":"<p>Used in combination with <code>include</code>. When defined, all keys not in <code>include</code> or <code>addons</code> will be combined into this collection.</p> <p>This is the main reason to use <code>include</code>. It allows a catch all collection for everything not defined in the config file.</p> <p>Here's an example using <code>other_name</code>.</p> <pre><code>dynamic_collections:\nGenres:         # mapping name does not matter just needs to be unique\ntype: genre\nother_name: Top Other Movies\ninclude:\n- Action\n- Adventure\n- Animation\n- Comedy\n- Family\n- Fantasy\n- Horror\n- Romance\n- Science Fiction\n- War\n</code></pre>"},{"location":"metadata/metadata/","title":"Metadata Files","text":"<p>Metadata files are used to create and maintain collections and metadata within the Plex libraries on the server.</p> <p>If utilized to their fullest, these files can be used to maintain the entire server's collections and metadata, and can be used as a backup for these in the event of a restore requirement.</p> <p>Collections, templates, metadata, and dynamic collections are defined within one or more Metadata files, which are linked to libraries in the Libraries Attribute within the Configuration File.</p> <p>These are the attributes which can be used within the Metadata File:</p> Attribute Description <code>templates</code> contains definitions of templates that can be leveraged by multiple collections <code>external_templates</code> contains path types that point to external templates that can be leveraged by multiple collections <code>collections</code> contains definitions of collections you wish to add to one or more libraries <code>dynamic_collections</code> contains definitions of dynamic collections you wish to create <code>metadata</code> contains definitions of metadata changes to movie, show, or music library's items [movie titles, episode descriptions, etc.] <ul> <li>One of <code>metadata</code>, <code>collections</code> or <code>dynamic_collections</code> must be present for the Metadata File to execute.</li> <li>Example Metadata Files can be found in the Plex Meta Manager Configs Repository</li> </ul>"},{"location":"metadata/metadata/#collection-attributes","title":"Collection Attributes","text":"<p>Plex Meta Manager can run a number of different operations within <code>collections</code> and such as:</p> <ul> <li>Automatically build and update collections and playlists</li> <li>Sync the collection with the source list if one is used</li> <li>Send missing media to Sonarr/Radarr (Lidarr not supported at this time)</li> <li>Show and Hide collections at set intervals (i.e. show Christmas collections in December only)</li> </ul> <p>Each collection requires its own section within the <code>collections</code> attribute and unlike playlists, collections can be built using as many Builders as needed.</p> <pre><code>collections:\nTrending Movies:\n# ... builders, details, and filters for this collection\nPopular Movies:\n# ... builders, details, and filters for this collection\netc:\n# ... builders, details, and filters for this collection\n</code></pre> <p>There are multiple types of attributes that can be utilized within a collection:</p> <ul> <li>Builders</li> <li>Settings/Updates</li> <li>Filters</li> </ul>"},{"location":"metadata/metadata/#example","title":"Example","text":"<pre><code>collections:\nTrending:\ntrakt_trending: 10\ntmdb_trending_daily: 10\ntmdb_trending_weekly: 10\nsort_title: +1_Trending\nsync_mode: sync\nsmart_label: random\nsummary: Movies Trending across the internet\nPopular:\ntmdb_popular: 40\nimdb_list:\nurl: https://www.imdb.com/search/title/?title_type=feature,tv_movie,documentary,short\nlimit: 40\nsort_title: +2_Popular\nsync_mode: sync\nsmart_label: random\nsummary: Popular Movies across the internet\n</code></pre>"},{"location":"metadata/metadata/#dynamic-collection-attributes","title":"Dynamic Collection Attributes","text":"<p>Plex Meta Manager can dynamically create collections based on a verity of different criteria, such as</p> <ul> <li>Collections for the top <code>X</code> popular people on TMDb (Bruce Willis, Tom Hanks etc.)</li> <li>Collections for each decade represented in the library (Best of 1990s, Best of 2000s etc.)</li> <li>Collections for each of the moods/styles within a Music library (A Cappella, Pop Rock etc.)</li> <li>Collections for each of a Trakt Users Lists.</li> </ul> <p>Below is an example dynamic collection which will create a collection for each of the decades represented within the library:</p> <pre><code>dynamic_collections:\nDecades:\ntype: decade\n</code></pre>"},{"location":"metadata/metadata/#metadata-attributes","title":"Metadata Attributes","text":"<p>Plex Meta Manager can automatically update items in Plex Movie, Show, and Music Libraries based on what's defined within the <code>metadata</code> attribute.</p> <p>Each metadata requires its own section within the <code>metadata</code> attribute. </p> <p>Each item is defined by the mapping name. Rules for how to match are on the Respective Library Metadata Pages.</p>"},{"location":"metadata/overlay/","title":"Overlay Files","text":"<p>Overlay files are used to create and maintain overlays within the Plex libraries on the server.</p> <p>Overlays and templates are defined within one or more Overlay files, which are linked to libraries in the Libraries Attribute within the Configuration File.</p> <p>All overlay coordinates assume 1000 x 1500 for Posters and 1920 x 1080 for Backgrounds and Title Cards.</p> <p>To remove all overlays add <code>remove_overlays: true</code> to the <code>overlay_path</code> Libraries Attribute.</p> <p>IMPORTANT NOTE ON OVERLAYS: Once you have applied overlays to your posters in PLex, it is highly recommennded that you never change artwork on a thing directly in Plex again.  PMM uses labels on the items in Plex to decide if an overlays has been applied, so if you change artwork behind PMM's back things can become confused and items can end up with double-overlaid posters.  It's recommended to set new artwork using the asset directory, which will ensure that this doesn't happen. </p> <p>To change a single overlay original image either remove the <code>Overlay</code> shared label and update the Image in Plex or replace the image in the assets folder and then PMM will overlay the new image</p> <p>These are the attributes which can be used within the Overlay File:</p> Attribute Description <code>templates</code> contains definitions of templates that can be leveraged by multiple overlays <code>external_templates</code> contains path types that point to external templates that can be leveraged by multiple overlays <code>queues</code> contains the positional attributes of queues <code>overlays</code> contains definitions of overlays you wish to add <ul> <li><code>overlays</code> is required in order to run the Overlay File.</li> <li>Example Overlay Files can be found in the Plex Meta Manager Configs Repository</li> </ul>"},{"location":"metadata/overlay/#overlays-attributes","title":"Overlays Attributes","text":"<p>Each overlay definition requires its own section within the <code>overlays</code> attribute.</p> <pre><code>overlays:\nIMDb Top 250:\n# ... builders, details, and filters for this overlay\n4K:\n# ... builders, details, and filters for this overlay\netc:\n# ... builders, details, and filters for this overlay\n</code></pre> <p>There are multiple types of attributes that can be utilized within an overlay:</p> <ul> <li>Builders</li> <li>Settings/Updates</li> <li>Filters</li> </ul>"},{"location":"metadata/overlay/#overlay","title":"Overlay","text":"<p>Each overlay definition needs to specify what overlay to use. This can happen in 3 ways.</p> <ol> <li> <p>If there is no <code>overlay</code> attribute PMM will look in your <code>config/overlays</code> folder for a <code>.png</code> file named the same as the mapping name of the overlay definition. This example below would look for <code>IMDb Top 250.png</code>.     <pre><code>overlays:\nIMDb Top 250:\nimdb_chart: top_movies\n</code></pre></p> </li> <li> <p>If the <code>overlay</code> attribute is given a string PMM will look in your <code>config/overlays</code> folder for a <code>.png</code> file named the same as the string given. This example below would look for <code>IMDbTop.png</code>.     <pre><code>overlays:\noverlay: IMDbTop\nIMDb Top 250:\nimdb_chart: top_movies\n</code></pre></p> </li> <li> <p>Using a dictionary for more overlay location options.</p> </li> </ol> <pre><code>overlays:\nIMDb Top 250:\noverlay:\nname: IMDb Top 250\nimdb_chart: top_movies\n</code></pre> <p>There are many attributes available when using overlays to edit how they work.</p> Attribute Description Required <code>name</code> Name of the overlay. \u2705 <code>file</code> Local location of the Overlay Image. \u274c <code>url</code> URL of Overlay Image Online. \u274c <code>git</code> Location in the Configs Repo of the Overlay Image. \u274c <code>repo</code> Location in the Custom Repo of the Overlay Image. \u274c <code>group</code> Name of the Grouping for this overlay. Only one overlay with the highest weight per group will be applied.<code>weight</code> is required when using <code>group</code>Values: group name \u274c <code>queue</code> Name of the Queue for this overlay. Define <code>queue</code> positions using the <code>queues</code> attribute at the top level of an Overlay File. Overlay with the highest weight is applied to the first position and so on.<code>weight</code> is required when using <code>queue</code>Values: queue name \u274c <code>weight</code> Weight of this overlay in its group or queue.<code>group</code> or <code>queue</code> is required when using <code>weight</code>Values: Integer 0 or greater \u274c <code>horizontal_offset</code> Horizontal Offset of this overlay. Can be a %.<code>vertical_offset</code> is required when using <code>horizontal_offset</code>Value: Integer 0 or greater or 0%-100% \u274c <code>horizontal_align</code> Horizontal Alignment of the overlay.Values: <code>left</code>, <code>center</code>, <code>right</code> \u274c <code>vertical_offset</code> Vertical Offset of this overlay. Can be a %.<code>horizontal_offset</code> is required when using <code>vertical_offset</code>Value: Integer 0 or greater or 0%-100% \u274c <code>vertical_align</code> Vertical Alignment of the overlay.Values: <code>top</code>, <code>center</code>, <code>bottom</code> \u274c <code>font</code> System Font Filename or path to font file for the Text Overlay.Value: System Font Filename or path to font file \u274c <code>font_style</code> Font style for Variable Fonts. Only needed when using a Variable Font.Value: Variable Font Style \u274c <code>font_size</code> Font Size for the Text Overlay.Value: Integer greater than 0 \u274c <code>font_color</code> Font Color for the Text Overlay.Value: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code>. \u274c <code>stroke_width</code> Font Stroke Width for the Text Overlay.Value: Integer greater than 0 \u274c <code>stroke_color</code> Font Stroke Color for the Text Overlay.Value: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code>. \u274c <code>back_color</code> Backdrop Color for the Text Overlay.Value: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code>. \u274c <code>back_width</code> Backdrop Width for the Text Overlay. If <code>back_width</code> is not specified the Backdrop Sizes to the text<code>back_height</code> is required when using <code>back_width</code>Value: Integer greater than 0 \u274c <code>back_height</code> Backdrop Height for the Text Overlay. If <code>back_height</code> is not specified the Backdrop Sizes to the text<code>back_width</code> is required when using <code>back_height</code>Value: Integer greater than 0 \u274c <code>back_align</code> Alignment for the Text Overlay inside the backdrop. If <code>back_align</code> is not specified the Backdrop Centers the text<code>back_width</code> and <code>back_height</code> are required when using <code>back_align</code>Values: <code>left</code>, <code>right</code>, <code>center</code>, <code>top</code>, <code>bottom</code> \u274c <code>back_padding</code> Backdrop Padding for the Text Overlay.Value: Integer greater than 0 \u274c <code>back_radius</code> Backdrop Radius for the Text Overlay.Value: Integer greater than 0 \u274c <code>back_line_color</code> Backdrop Line Color for the Text Overlay.Value: Color Hex Code in format <code>#RGB</code>, <code>#RGBA</code>, <code>#RRGGBB</code> or <code>#RRGGBBAA</code>. \u274c <code>back_line_width</code> Backdrop Line Width for the Text Overlay.Value: Integer greater than 0 \u274c <code>addon_offset</code> Text Addon Image Offset from the text.<code>addon_offset</code> Only works with text overlaysValue: Integer 0 or greater \u274c <code>addon_position</code> Text Addon Image Alignment in relation to the text.<code>addon_position</code> Only works with text overlaysValues: <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code> \u274c <ul> <li>If <code>url</code>, <code>git</code>, and <code>repo</code> are all not defined then PMM will look in your <code>config/overlays</code> folder for a <code>.png</code> file named the same as the <code>name</code> attribute.</li> </ul>"},{"location":"metadata/overlay/#non-positional-image-overlay","title":"Non-Positional Image Overlay","text":"<p>Non-Positional overlays are images that are either 1000 x 1500 for Posters or 1920 x 1080 for Backgrounds and Title Cards.</p> <p>These Overlays should be mostly transparent and will just be completely merged with the base image.</p>"},{"location":"metadata/overlay/#positional-image-overlay","title":"Positional Image Overlay","text":"<p>Positional overlays can be of any size and use <code>horizontal_offset</code>, <code>horizontal_align</code>, <code>vertical_offset</code>, and <code>vertical_align</code> to position the overlay on the image. </p> <pre><code>overlays:\nIMDB-Top-250:\nimdb_chart: top_movies\noverlay:\nname: IMDB-Top-250\npmm: images/IMDB-Top-250\nhorizontal_offset: 0\nhorizontal_align: right\nvertical_offset: 0\nvertical_align: bottom\n</code></pre>"},{"location":"metadata/overlay/#blurring-overlay","title":"Blurring Overlay","text":"<p>There is a special overlay named <code>blur</code> that when given as the overlay name will instead of finding the image will just blur the image instead.</p> <p>You can control the level of the blur by providing a number with the attribute like so <code>blur(##)</code>.</p> <pre><code>overlays:\nblur:\noverlay:\nname: blur(50)\nbuilder_level: episode\nplex_search:\nall:\nresolution: 4K\n</code></pre> <p></p>"},{"location":"metadata/overlay/#backdrop-overlay","title":"Backdrop Overlay","text":"<p>There is a special overlay named <code>backdrop</code> that when given as the overlay name will instead of finding the image will just apply the background instead.</p> <p>You can set the size of the backdrop with <code>back_width</code> and <code>back_height</code>. By Default, they will extend the length of the Image.</p> <pre><code>overlays:\nblur:\noverlay:\nname: backdrop\nback_color: \"#00000099\"\nbuilder_level: episode\nplex_all: true\n</code></pre>"},{"location":"metadata/overlay/#text-overlay","title":"Text Overlay","text":"<p>You can add text as an overlay using the special <code>text()</code> overlay name. Anything inside the parentheses will be added as an overlay onto the image. Ex <code>text(4K)</code> adds <code>4K</code> to the image.</p> <p>You can control the font, font size and font color using the <code>font</code>, <code>font_size</code>, and <code>font_color</code> overlay attributes.</p> <p>You can control the backdrop of the text using the various <code>back_*</code> attributes.</p> <p>The <code>horizontal_offset</code> and <code>vertical_offset</code> overlay attributes are required when using Text Overlays.</p> <p>PMM includes multiple fonts in the <code>fonts</code> folder which can be called using <code>fonts/fontname.ttf</code></p> <pre><code>overlays:\naudience_rating:\noverlay:\nname: text(Direct Play)\nhorizontal_offset: 0\nhorizontal_align: center\nvertical_offset: 150\nvertical_align: bottom\nfont: fonts/Inter-Medium.ttf\nfont_size: 63\nfont_color: \"#FFFFFF\"\nback_color: \"#00000099\"\nback_radius: 30\n</code></pre>"},{"location":"metadata/overlay/#special-text-variables","title":"Special Text Variables","text":"<p>You can use the item's metadata to determine the text by adding Special Text Variables to your text Overlay.</p> <p>There are multiple Special Text Variables that can be used when formatting the text. The variables are defined like so <code>&lt;&lt;name&gt;&gt;</code> and some can have modifiers like so <code>&lt;&lt;name$&gt;&gt;</code> where <code>$</code> is the modifier. The available options are:</p> Special Text Variables &amp; Mods Movies Shows Seasons Episodes <code>&lt;&lt;audience_rating&gt;&gt;</code>: audience rating (<code>8.7</code>, <code>9.0</code>)<code>&lt;&lt;audience_rating%&gt;&gt;</code>: audience rating out of 100 (<code>87</code>, <code>90</code>)<code>&lt;&lt;audience_rating#&gt;&gt;</code>: audience rating removing <code>.0</code> as needed (<code>8.7</code>, <code>9</code>)<code>&lt;&lt;audience_rating/&gt;&gt;</code>: audience rating on a 5 point scale (<code>8.6</code> shows as <code>4.3</code>) \u2705 \u2705 \u274c \u2705 <code>&lt;&lt;critic_rating&gt;&gt;</code>: critic rating (<code>8.7</code>, <code>9.0</code>)<code>&lt;&lt;critic_rating%&gt;&gt;</code>: critic rating out of 100 (<code>87</code>, <code>90</code>)<code>&lt;&lt;critic_rating#&gt;&gt;</code>: critic rating removing <code>.0</code> as needed (<code>8.7</code>, <code>9</code>)<code>&lt;&lt;critic_rating/&gt;&gt;</code>: critic rating on a 5 point scale (<code>8.6</code> shows as <code>4.3</code>) \u2705 \u2705 \u274c \u2705 <code>&lt;&lt;user_rating&gt;&gt;</code>: user rating (<code>8.7</code>, <code>9.0</code>)<code>&lt;&lt;user_rating%&gt;&gt;</code>: user rating out of 100 (<code>87</code>, <code>90</code>)<code>&lt;&lt;user_rating#&gt;&gt;</code>: user rating removing <code>.0</code> as needed (<code>8.7</code>, <code>9</code>)<code>&lt;&lt;user_rating/&gt;&gt;</code>: user rating on a 5 point scale (<code>8.6</code> shows as <code>4.3</code>) \u2705 \u2705 \u2705 \u2705 <code>&lt;&lt;title&gt;&gt;</code>: Title of the Item<code>&lt;&lt;titleU&gt;&gt;</code>: Uppercase Title of the Item<code>&lt;&lt;titleL&gt;&gt;</code>Lowercase Title of the Item<code>&lt;&lt;titleP&gt;&gt;</code>Proper Title of the Item \u2705 \u2705 \u2705 \u2705 <code>&lt;&lt;show_title&gt;&gt;</code>: Title of the Item's Show<code>&lt;&lt;show_itleU&gt;&gt;</code>: Uppercase Title of the Item's Show<code>&lt;&lt;show_titleL&gt;&gt;</code>Lowercase Title of the Item's Show<code>&lt;&lt;show_titleP&gt;&gt;</code>Proper Title of the Item's Show \u274c \u274c \u2705 \u2705 <code>&lt;&lt;season_title&gt;&gt;</code>: Title of the Item's Season<code>&lt;&lt;season_titleU&gt;&gt;</code>: Uppercase Title of the Item's Season<code>&lt;&lt;season_titleL&gt;&gt;</code>Lowercase title of the Item's Season<code>&lt;&lt;season_titleP&gt;&gt;</code>Proper title of the Item's Season \u274c \u274c \u274c \u2705 <code>&lt;&lt;original_title&gt;&gt;</code>: Original Title of the Item<code>&lt;&lt;original_titleU&gt;&gt;</code>: Original Title of the Item<code>&lt;&lt;original_titleL&gt;&gt;</code>Lowercase Original Title of the Item<code>&lt;&lt;original_titleP&gt;&gt;</code>Proper Original Title of the Item \u2705 \u2705 \u274c \u274c <code>&lt;&lt;edition&gt;&gt;</code>: Edition of the Item<code>&lt;&lt;editionU&gt;&gt;</code>: Uppercase Edition of the Item<code>&lt;&lt;editionL&gt;&gt;</code>Lowercase Edition of the Item<code>&lt;&lt;editionP&gt;&gt;</code>Proper Edition of the Item \u2705 \u274c \u274c \u274c <code>&lt;&lt;content_rating&gt;&gt;</code>: Content Rating of the Item<code>&lt;&lt;content_ratingU&gt;&gt;</code>: Uppercase Content Rating of the Item<code>&lt;&lt;content_ratingL&gt;&gt;</code>Lowercase Content Rating of the Item<code>&lt;&lt;content_ratingP&gt;&gt;</code>Proper Content Rating of the Item \u2705 \u2705 \u274c \u2705 <code>&lt;&lt;episode_count&gt;&gt;</code>: Number of Episodes (<code>1</code>)<code>&lt;&lt;episode_countW&gt;&gt;</code>: Number of Episodes As Words (<code>One</code>)<code>&lt;&lt;episode_countWU&gt;&gt;</code>: Number of Episodes As Uppercase Words (<code>ONE</code>)<code>&lt;&lt;episode_countWL&gt;&gt;</code>: Number of Episodes As Lowercase Words (<code>one</code>)<code>&lt;&lt;episode_count0&gt;&gt;</code>: Number of Episodes With 10s Padding (<code>01</code>)<code>&lt;&lt;episode_count00&gt;&gt;</code>: Number of Episodes With 100s Padding (<code>001</code>) \u274c \u2705 \u2705 \u274c <code>&lt;&lt;season_number&gt;&gt;</code>: Season Number (<code>1</code>)<code>&lt;&lt;season_numberW&gt;&gt;</code>: Season Number As Words (<code>One</code>)<code>&lt;&lt;season_numberWU&gt;&gt;</code>: Season Number As Uppercase Words (<code>ONE</code>)<code>&lt;&lt;season_numberWL&gt;&gt;</code>: Season Number As Lowercase Words (<code>one</code>)<code>&lt;&lt;season_number0&gt;&gt;</code>: Season Number With 10s Padding (<code>01</code>)<code>&lt;&lt;season_number00&gt;&gt;</code>: Season Number With 100s Padding (<code>001</code>) \u274c \u274c \u2705 \u2705 <code>&lt;&lt;episode_number&gt;&gt;</code>: Episode Number (<code>1</code>)<code>&lt;&lt;episode_numberW&gt;&gt;</code>: Episode Number As Words (<code>One</code>)<code>&lt;&lt;episode_numberWU&gt;&gt;</code>: Episode Number As Uppercase Words (<code>One</code>)<code>&lt;&lt;episode_numberWL&gt;&gt;</code>: Episode Number As Lowercase Words (<code>one</code>)<code>&lt;&lt;episode_number0&gt;&gt;</code>: Episode Number With 10s Padding (<code>01</code>)<code>&lt;&lt;episode_number00&gt;&gt;</code>: Episode Number With 100s Padding (<code>001</code>) \u274c \u274c \u274c \u2705 <code>&lt;&lt;versions&gt;&gt;</code>: Number of Versions of the Item (<code>1</code>)<code>&lt;&lt;versionsW&gt;&gt;</code>: Number of Versions of the Item As Words (<code>One</code>)<code>&lt;&lt;versionsWO&gt;&gt;</code>: Number of Versions of the Item As Uppercase Words (<code>ONE</code>)<code>&lt;&lt;versionsWL&gt;&gt;</code>: Number of Versions of the Item As Words (<code>one</code>)<code>&lt;&lt;versions0&gt;&gt;</code>: Number of Versions of the Item With 10s Padding (<code>01</code>)<code>&lt;&lt;versions00&gt;&gt;</code>: Number of Versions of the Item With 100s Padding (<code>001</code>) \u2705 \u274c \u274c \u2705 <code>&lt;&lt;runtime&gt;&gt;</code>: Complete Runtime of the Item in minutes (<code>150</code>)<code>&lt;&lt;runtimeH&gt;&gt;</code>: Hours in runtime of the Item (<code>2</code>)<code>&lt;&lt;runtimeM&gt;&gt;</code>: Minutes remaining in the hour in the runtime of the Item (<code>30</code>) \u2705 \u274c \u274c \u2705 <code>&lt;&lt;bitrate&gt;&gt;</code>: Bitrate of the first media file for an item.<code>&lt;&lt;bitrateH&gt;&gt;</code>: Bitrate of the media file with the highest bitrate<code>&lt;&lt;bitrateL&gt;&gt;</code>: Bitrate of the media file with the lowest bitrate \u2705 \u274c \u274c \u2705 <code>&lt;&lt;originally_available&gt;&gt;</code>: Original Available Date of the Item<code>&lt;&lt;originally_available[FORMAT]&gt;&gt;</code>: Original Available Date of the Item in the given format. Format Options \u2705 \u2705 \u274c \u2705 <p>Note: You can use the <code>mass_audience_rating_update</code> or <code>mass_critic_rating_update</code> Library Operation to update your plex ratings to various services like <code>tmdb</code>, <code>imdb</code>, <code>mdb</code>, <code>metacritic</code>, <code>letterboxd</code> and many more.</p>"},{"location":"metadata/overlay/#example","title":"Example","text":"<p>I want to have the audience_rating display with a <code>%</code> out of 100 vs 0.0-10.0. <pre><code>overlays:\naudience_rating:\noverlay:\nname: text(&lt;&lt;audience_rating%&gt;&gt;%)\nhorizontal_offset: 225\nhorizontal_align: center\nvertical_offset: 15\nvertical_align: top\nfont: fonts/Inter-Medium.ttf\nfont_size: 63\nfont_color: \"#FFFFFF\"\nback_color: \"#00000099\"\nback_radius: 30\nback_width: 300\nback_height: 105\n</code></pre></p> <p>I want to add <code>S##E##</code> to all my episode images. <pre><code>overlays:\ntext_content_rating:\nbuilder_level: episode\noverlay:\nname: text(S&lt;&lt;season_number0&gt;&gt;E&lt;&lt;episode_number0&gt;&gt;)\nhorizontal_align: center\nvertical_offset: 15\nvertical_align: top\nfont: fonts/Inter-Medium.ttf\nfont_size: 63\nfont_color: \"#FFFFFF\"\nback_color: \"#00000099\"\nback_radius: 30\nback_width: 300\nback_height: 105\nplex_all: true\n</code></pre></p>"},{"location":"metadata/overlay/#common-special-text-uses","title":"Common Special Text Uses","text":"<p>These are some commonly-used examples of Special Text overlays:</p> Special Text Example Output <code>name: text(S&lt;&lt;season_number0&gt;&gt;E&lt;&lt;episode_number0&gt;&gt;)</code> S01E01 <code>name: text(Season &lt;&lt;season_number&gt;&gt; Episode &lt;&lt;episode_number&gt;&gt;)</code> Season 1 Episode 1 <code>name: text(Season &lt;&lt;season_number&gt;&gt;)</code> Season 1 <code>name: text(Episode &lt;&lt;episode_number&gt;&gt;)</code> Episode 1 <code>name: \"text(Runtime: &lt;&lt;runtime&gt;&gt;m)\"</code> Runtime: 90m <code>name: \"text(Runtime: &lt;&lt;runtimeH&gt;&gt;h &lt;&lt;runtimeM&gt;&gt;m)\"</code> Runtime: 1h 30m"},{"location":"metadata/overlay/#text-addon-images","title":"Text Addon Images","text":"<p>You can add an image to accompany the text by specifying the image location using <code>file</code>, <code>url</code>, <code>git</code>, or <code>repo</code>.</p> <p>Use <code>addon_offset</code> to control the space between the text and the image.</p> <p>Use <code>addon_position</code> to control which side of the text the image will be located on. </p> <pre><code>overlays:\naudience_rating:\noverlay:\nname: text(audience_rating)\nhorizontal_offset: 225\nhorizontal_align: center\nvertical_offset: 15\nvertical_align: top\nfont: fonts/Inter-Medium.ttf\nfont_size: 63\nfont_color: \"#FFFFFF\"\nback_color: \"#00000099\"\nback_radius: 30\nback_width: 300\nback_height: 105\npmm: images/raw/IMDB_Rating\naddon_position: left\naddon_offset: 25\n</code></pre>"},{"location":"metadata/overlay/#overlay-groups","title":"Overlay Groups","text":"<p>Overlay groups are defined by the name given to the <code>group</code> attribute. Only one overlay with the highest weight per group will be applied.</p> <p>This is an example where the Multi-Audio overlay will be applied over the Dual-Audio overlay for every item found by both. </p> <pre><code>overlays:\nDual-Audio:\noverlay:\nname: Dual-Audio\npmm: images/Dual-Audio\ngroup: audio_language\nweight: 10\nhorizontal_offset: 0\nhorizontal_align: center\nvertical_offset: 15\nvertical_align: bottom\nplex_all: true\nfilters:\naudio_language.count_gt: 1\nMulti-Audio:\noverlay:\nname: Multi-Audio\npmm: images/Multi-Audio\ngroup: audio_language\nweight: 20\nhorizontal_offset: 0\nhorizontal_align: center\nvertical_offset: 15\nvertical_align: bottom\nplex_all: true\nfilters:\naudio_language.count_gt: 2\n</code></pre>"},{"location":"metadata/overlay/#overlay-queues","title":"Overlay Queues","text":"<p>Overlay queues are defined by the name given to the <code>queue</code> attribute. The overlay with the highest weight is put into the first queue position, then the second highest is placed in the second queue position and so on. </p> <p>You can define the queue positions by using the <code>queues</code> attribute at the top level of an Overlay File. You can define as many positions as you want. </p> <pre><code>queues:\ncustom_queue_name:\n- horizontal_offset: 300        # This is the first position\nhorizontal_align: center\nvertical_offset: 1375\nvertical_align: top\n- horizontal_offset: 300        # This is the second position\nhorizontal_align: center\nvertical_offset: 1250\nvertical_align: top\n\noverlays:\nIMDb:\nimdb_chart: popular_movies\noverlay:\nname: text(IMDb Popular)\nqueue: custom_queue_name\nweight: 20\nfont: fonts/Inter-Medium.ttf\nfont_size: 65\nfont_color: \"#FFFFFF\"\nback_color: \"#00000099\"\nback_radius: 30\nback_width: 380\nback_height: 105\nTMDb:\ntmdb_popular: 100\noverlay:\nname: text(TMDb Popular)\nqueue: custom_queue_name\nweight: 10\nfont: fonts/Inter-Medium.ttf\nfont_size: 65\nfont_color: \"#FFFFFF\"\nback_color: \"#00000099\"\nback_radius: 30\nback_width: 400\nback_height: 105\n</code></pre>"},{"location":"metadata/overlay/#suppress-overlays","title":"Suppress Overlays","text":"<p>You can add <code>suppress_overlays</code> to an overlay definition and give it a list or comma separated string of overlay names you want suppressed from this item if this overlay is attached to the item.</p> <p>So in this example if the <code>4K-HDR</code> overlay matches an item then the <code>4K</code> and <code>HDR</code> overlays will also match. The <code>suppress_overlays</code> attribute on <code>4K-HDR</code> will stop the overlays specified (<code>4K</code> and <code>HDR</code>) from also being applied. </p> <pre><code>overlays:\n4K:\nplex_search:\nall:\nresolution: 4K\nHDR:\nplex_search:\nall:\nhdr: true\n4K-HDR:\nsuppress_overlays:\n- 4K\n- HDR\nplex_search:\nall:\nresolution: 4K\nhdr: true\n</code></pre>"},{"location":"metadata/overlay/#examples","title":"Examples","text":""},{"location":"metadata/overlay/#example-overlay-file","title":"Example Overlay File","text":"<pre><code>overlays:\n4K:\noverlay:\nname: 4K    # This will look for a local overlays/4K.png in your config folder\nplex_search:\nall:\nresolution: 4K\nHDR:\noverlay:\nname: HDR\npmm: HDR\nplex_search:\nall:\nhdr: true\nDolby:\noverlay:\nname: Dolby\nurl: https://somewebsite.com/dolby_overlay.png\nplex_all: true\nfilters:\nhas_dolby_vision: true\n</code></pre>"},{"location":"metadata/overlay/#example-folder-structure","title":"Example Folder Structure","text":"<pre><code>config\n\u251c\u2500\u2500 config.yml\n\u251c\u2500\u2500 Movies.yml\n\u251c\u2500\u2500 TV Shows.yml\n\u251c\u2500\u2500 Overlays.yml\n\u251c\u2500\u2500 overlays\n\u2502   \u251c\u2500\u2500 4K.png\n\u2502   \u251c\u2500\u2500 Dolby.png\n\u2502   \u251c\u2500\u2500 HDR.png\n</code></pre>"},{"location":"metadata/playlist/","title":"Playlist Files","text":"<p>As playlists are not tied to one specific library and can combine media from multiple libraries, they require their own special Playlist Files to work.</p> <p>Within the Config File, the <code>playlist_files</code> attribute specifies the path type and path of the Playlist Files that the user wants Plex Meta Manager to act on.</p> <pre><code>playlist_files:\n- file: config/playlists.yml\n- pmm: playlist\ntemplate_variables:\nlibraries: Movies, TV Shows\n</code></pre> <p>The libraries used in the playlist attribute <code>libraries</code> must be defined under the <code>libraries</code> attribute of the Config File.</p> <p>Playlist files are used to create and maintain playlists on the Plex Server.</p> <p>If utilized to their fullest, these files can be used to maintain the entire server's collections and playlists, and can be used as a backup for these in the event of a restore requirement.</p> <p>Playlists are defined in one or more Playlist files that are mapped in the Playlist Files Attribute within the Configuration File.</p> <p>You can use the <code>playlist_report</code> setting to get a list of your playlists printed out in your log. </p> <p>These are the attributes which can be utilized within the Playlist File:</p> Attribute Description <code>templates</code> contains definitions of templates that can be leveraged by multiple playlists <code>external_templates</code> contains path types that point to external templates that can be leveraged by multiple playlists <code>playlists</code> contains definitions of playlists you wish to add to the server <ul> <li><code>playlists</code> is required in order to run the Playlist File.</li> <li>You can find example Playlist Files in the Plex Meta Manager Configs Repository</li> <li>Plex does not support the \"Continue Watching\" feature for playlists, you can vote for the feature here</li> </ul>"},{"location":"metadata/playlist/#playlist-attributes","title":"Playlist Attributes","text":"<p>Plex Meta Manager can automatically build and update playlists defined within the <code>playlists</code> attribute.</p> <p>Each playlist requires its own section within the <code>playlists</code> attribute and unlike collections, playlists can only be built using one Builder as their ordering is inherited from the builder; it is not possible to combine builders.</p> <pre><code>playlists:\nMarvel Cinematic Universe Chronological Order:\n# ... builder, details, and filters for this playlist\nStar Wars Clone Wars Chronological Order:\n# ... builder, details, and filters for this playlist\netc:\n# ... builder, details, and filters for this playlist\n</code></pre> <p>There are multiple types of attributes that can be utilized within a playlist:</p> <ul> <li>Builders</li> <li>Settings/Updates</li> <li>Filters</li> </ul>"},{"location":"metadata/playlist/#special-playlist-attributes","title":"Special Playlist Attributes","text":"Attribute Description Required <code>libraries</code> Determine which libraries the playlist will be built from.Options: Comma-separated string or list of library mapping names defined in the <code>libraries</code> attribute in the base of your Configuration File. \u2705 <code>sync_to_users</code> Determine which Users have the playlist synced.This will override the global <code>playlist_sync_to_users</code> Setting.Options: Comma-separated string or list of users, <code>all</code> for every user who has server access, or leave blank for just the server owner. \u274c <code>exclude_users</code> Determine which Users will be excluded from having the playlist synced.This will override the global <code>playlist_excude_users</code> Setting.Options: Comma-separated string or list of users, <code>all</code> for every user who has server access, or leave blank for just the server owner. \u274c <code>delete_playlist</code> Will delete this playlist for the users defined by sync_to_users.Options: <code>true</code> or <code>false</code> \u274c <ul> <li>Any defined playlist will be always be visible by The Plex Media Server owner, so it doesn't need to be defined within <code>sync_to_users</code>.</li> </ul>"},{"location":"metadata/playlist/#example","title":"Example","text":"<p>In the following example, media is pulled from the <code>Movies</code> and <code>TV Shows</code> libraries into the one Playlist, and the playlist is shared with a specific set of users:</p> <pre><code>playlists:\nMarvel Cinematic Universe Chronological Order:\nsync_mode: sync\nlibraries: Movies, TV Shows\nsync_to_users: User1, someone@somewhere.com, User3\ntrakt_list: https://trakt.tv/users/donxy/lists/marvel-cinematic-universe?sort=rank,asc\nsummary: Marvel Cinematic Universe In Chronological Order\nStar Wars Clone Wars Chronological Order:\nsync_to_users: all\nsync_mode: sync\nlibraries: Movies, TV Shows\ntrakt_list: https://trakt.tv/users/tomfin46/lists/star-wars-the-clone-wars-chronological-episode-order\n</code></pre>"},{"location":"metadata/update/","title":"Settings/Updates","text":"<p>The settings will change how Plex Meta Manager functions with the Definition while updates change the actual metadata stored in plex.</p> Name Description Definition Settings These are settings to change of Plex Meta Manager deals with the definition. Schedule Settings These are settings to change how the definition is scheduled to run. Arr Definition Settings These are settings to change how Radarr/Sonarr is handled in this specific definition. Collection/Playlist Metadata Updates These are settings to change an aspect of a collection/playlist's metadata. Item Metadata Updates These are settings to change an aspect of metadata for all items in the collection."},{"location":"metadata/metadata/movie/","title":"Movie Library Metadata","text":"<p>You can have the script edit the metadata of Movies by adding them to the <code>metadata</code> mapping of a Metadata File.</p> <p>An example of multiple metadata edits in a movie library is below:</p> <pre><code>metadata:\nGodzilla (1954):\nmatch:\ntitle: Godzilla\nyear: 1954\ncontent_rating: R\nGodzilla (1998):\nmatch:\ntitle: Godzilla\nyear: 1998\nsort_title: Godzilla 03\ncontent_rating: PG-13\nShin Godzilla:\nsort_title: Godzilla 06\ncontent_rating: R\nGodzilla 1985:\ncontent_rating: PG\n\"Godzilla 2000: Millennium\":\noriginally_available: 1999-08-18\nGodzilla Against MechaGodzilla:\noriginally_available: 2002-03-23\nGodzilla Raids Again:\ncontent_rating: G\noriginally_available: 1955-05-21\nGodzilla vs. Biollante:\ncontent_rating: PG\nGodzilla vs. Destoroyah:\ncontent_rating: PG\noriginally_available: 1995-01-19\nGodzilla vs. Gigan:\ncontent_rating: G\noriginally_available: 1972-09-14\nGodzilla vs. Hedorah:\ncontent_rating: G\noriginally_available: 1971-04-01\nGodzilla vs. King Ghidorah:\ncontent_rating: PG\noriginally_available: 1991-04-28\nGodzilla vs. Mechagodzilla:\ncontent_rating: G\noriginally_available: 1974-03-24\nGodzilla vs. Mechagodzilla II:\ncontent_rating: PG\nGodzilla vs. Megaguirus:\ncontent_rating: PG\noriginally_available: 2000-08-31\nGodzilla vs. Megalon:\ncontent_rating: G\noriginally_available: 1973-03-17\nGodzilla vs. Mothra:\ncontent_rating: PG\noriginally_available: 1992-04-28\nGodzilla vs. SpaceGodzilla:\ncontent_rating: PG\noriginally_available: 1994-01-19\nGodzilla, King of the Monsters!:\ncontent_rating: G\n\"Godzilla, Mothra and King Ghidorah: Giant Monsters All-Out Attack\":\ncontent_rating: PG\noriginally_available: 2001-08-31\n\"Godzilla: Final Wars\":\ncontent_rating: PG\noriginally_available: 2004-12-13\n\"Godzilla: Tokyo S.O.S.\":\noriginally_available: 2003-12-14\nHalloween (Rob Zombie):\nmatch:\ntitle: - Halloween (Rob Zombie)\n- Halloween\nyear: 2007\n\"Halo 4: Forward Unto Dawn\":\nmatch:\ntitle:\n- Halo 4: Forward Unto Dawn\n- Halo 4 Forward Unto Dawn\ntmdb_show: 56295\ncontent_rating: R\n</code></pre>"},{"location":"metadata/metadata/movie/#matching-movies","title":"Matching Movies","text":"<p>The <code>match</code> attribute is used to match movies within Plex to that definition within the Metadata file. One definition can match and edit multiple movies. The available matching options are outlined below.</p> Attribute Description <code>title</code>1 Only matches movies that exactly match the movie's Title. Can be a list (only one needs to match). <code>year</code> Only matches movies that were released in the given year. <code>mapping_id</code>2 Only matches movies that have the given TMDb or IMDb ID. <code>edition</code>3 Only matches movies that exactly match the movie's Edition. Can be a list (only one needs to match). <code>edition_contains</code>3 Only matches movies where the movie's Edition contains the given string. Can be a list (only one needs to match). <code>blank_edition</code>3 Only matches movies that have no Edition.Default: <code>false</code>Values: <code>true</code> or <code>false</code> <ol> <li>When <code>title</code> is not provided and the mapping name was not specified as an ID, the default behaviour is to use the mapping name as <code>title</code> for matching.</li> <li>When <code>mapping_id</code> is not provided and the mapping name was specified as an ID, the default behaviour is to use the mapping name as <code>mapping_id</code> for matching.</li> <li>When the server does not have a Plex Pass then the Edition Field is not accessible. In this scenario, PMM will check the movie's filepath for <code>{edition-...}</code> to determine what the edition is.</li> </ol>"},{"location":"metadata/metadata/movie/#examples","title":"Examples","text":"<p>Below are some examples on how movies can be matched.</p>"},{"location":"metadata/metadata/movie/#example-1-title-and-mapping_id","title":"Example 1 - <code>title</code> and <code>mapping_id</code>","text":"<p>The below example shows how <code>title</code> and <code>mapping_id</code> can be used to match movies.</p> <pre><code>metadata:\nmovie1:                   # Matches via the title \"Star Wars\"\nmatch:\ntitle: Star Wars\nedits...\nmovie2:                   # Matches via TMDb ID: 299534\nmatch:\nmapping_id: 299534\nedits...\nmovie3:                   # Matches via IMDb ID: tt4154756\nmatch:\nmapping_id: tt4154756\nedits...\nmovie4:                   # Matches via the title \"9\" \nmatch:\ntitle: 9\nedits...\n</code></pre> <p>The Mapping Name can also be used to reduce line-count, as shown here:</p> <pre><code>metadata:\nStar Wars:    # Matches via the title \"Star Wars\"\nedits...\n299534:       # Matches via TMDb ID: 299534\nedits...\ntt4154756:    # Matches via IMDb ID: tt4154756\nedits...\n\"9\":          # Matches via the title \"9\" \nedits...\n</code></pre> <p>Note: to search for a movie titled with a number from the mapping name you must surround the number in quotes like in the example below. Otherwise, it will look for the movie associated with that TMDb ID.</p>"},{"location":"metadata/metadata/movie/#example-2-title-and-year","title":"Example 2 - <code>title</code> and <code>year</code>","text":"<p>The below example shows how <code>title</code> and <code>year</code> can be used to match movies. </p> <p>In this example, there are two movies in the library called \"Godzilla\", so the <code>year</code> attribute is used to identify which movie is being matched.</p> <pre><code>metadata:\nGodzilla (1954):                   # Matches via the title \"Godzilla\" released in 1954\nmatch:\ntitle: Godzilla\nyear: 1954\nedits...\nGodzilla (1998):                   # Matches via the title \"Godzilla\" released in 1998\nmatch:\ntitle: Godzilla\nyear: 1998\nedits...\n</code></pre>"},{"location":"metadata/metadata/movie/#example-3-using-editions","title":"Example 3 - using <code>editions</code>","text":"<p>The edition attributes can be used to further specify which version of a movie should be matched within Plex.</p> <p>This can be combined with Example 1 as follows</p> <pre><code>metadata:\nmovie1:                   # Matches via the title \"Star Wars\" and edition containing \"4K77\"\nmatch:\ntitle: Star Wars\nedition_contains: 4K77\nedits...\n</code></pre> <p>If you wanted to specify the version of Star Wars which does not have an edition, then the <code>blank_edition</code> attribute can be used as shown below:</p> <pre><code>metadata:\nmovie1:                   # Matches via the title \"Star Wars\" and checks for no edition version\nmatch:\ntitle: Star Wars\nblank_edition: true\nedits...\n</code></pre>"},{"location":"metadata/metadata/movie/#metadata-edits","title":"Metadata Edits","text":"<p>The available attributes for editing movies are as follows</p>"},{"location":"metadata/metadata/movie/#special-attributes","title":"Special Attributes","text":"Attribute Description <code>tmdb_show</code> TMDb Show ID to use for metadata. Used when the Movie in your library is actually a miniseries on TMDb. (Example: Halo 4: Forward Unto Dawn or IT) This is not used to say this movie is the given ID. <code>run_definition</code> Used to specify if this definition runs.Multiple can be used for one definition as a list or comma separated string. One <code>false</code> or unmatched library type will cause it to fail.Values: <code>movie</code>, <code>show</code>, <code>artist</code>, <code>true</code>, <code>false</code> <ol> <li>If the server does not have a Plex Pass then the Edition Field is not accessible. In this case PMM will check the movies filepath for <code>{edition-MOVIES EDITION}</code> to determine what the edition is.</li> </ol>"},{"location":"metadata/metadata/movie/#general-attributes","title":"General Attributes","text":"Attribute Allowed Values <code>title</code> Text to change Title. <code>sort_title</code> Text to change Sort Title. <code>edition</code>1 Text to change Edition. <code>original_title</code> Text to change Original Title. <code>originally_available</code> Date to change Originally Available.Format: YYYY-MM-DD <code>content_rating</code> Text to change Content Rating. <code>user_rating</code> Number to change User Rating. <code>audience_rating</code> Number to change Audience Rating. <code>critic_rating</code> Number to change Critic Rating. <code>studio</code> Text to change Studio. <code>tagline</code> Text to change Tagline. <code>summary</code> Text to change Summary. <ol> <li>Requires Plex Pass</li> </ol>"},{"location":"metadata/metadata/movie/#tag-attributes","title":"Tag Attributes","text":"<p>You can add <code>.remove</code> to any tag attribute to only remove those tags i.e. <code>genre.remove</code>.</p> <p>You can add <code>.sync</code> to any tag attribute to sync all tags vs just appending the new ones i.e. <code>genre.sync</code>.</p> Attribute Allowed Values <code>director</code> List or comma-separated text of each Director Tag. <code>country</code> List or comma-separated text of each Country Tag. <code>genre</code> List or comma-separated text of each Genre Tag. <code>writer</code> List or comma-separated text of each Writer Tag. <code>producer</code> List or comma-separated text of each Producer Tag. <code>collection</code> List or comma-separated text of each Collection Tag. <code>label</code> List or comma-separated text of each Label Tag."},{"location":"metadata/metadata/movie/#image-attributes","title":"Image Attributes","text":"Attribute Allowed Values <code>url_poster</code> URL of image publicly available on the internet. <code>file_poster</code> Path to image in the file system. <code>url_background</code> URL of image publicly available on the internet. <code>file_background</code> Path to image in the file system."},{"location":"metadata/metadata/movie/#advanced-attributes","title":"Advanced Attributes","text":"Attribute Allowed Values <code>metadata_language</code>1 <code>default</code>, <code>ar-SA</code>, <code>ca-ES</code>, <code>cs-CZ</code>, <code>da-DK</code>, <code>de-DE</code>, <code>el-GR</code>, <code>en-AU</code>, <code>en-CA</code>, <code>en-GB</code>, <code>en-US</code>, <code>es-ES</code>, <code>es-MX</code>, <code>et-EE</code>, <code>fa-IR</code>, <code>fi-FI</code>, <code>fr-CA</code>, <code>fr-FR</code>, <code>he-IL</code>, <code>hi-IN</code>, <code>hu-HU</code>, <code>id-ID</code>, <code>it-IT</code>, <code>ja-JP</code>, <code>ko-KR</code>, <code>lt-LT</code>, <code>lv-LV</code>, <code>nb-NO</code>, <code>nl-NL</code>, <code>pl-PL</code>, <code>pt-BR</code>, <code>pt-PT</code>, <code>ro-RO</code>, <code>ru-RU</code>, <code>sk-SK</code>, <code>sv-SE</code>, <code>th-TH</code>, <code>tr-TR</code>, <code>uk-UA</code>, <code>vi-VN</code>, <code>zh-CN</code>, <code>zh-HK</code>, <code>zh-TW</code> <code>use_original_title</code>1 <code>default</code>: Library default<code>no</code>: No<code>yes</code>: Yes <ol> <li>Must be using the New Plex Movie Agent.</li> </ol>"},{"location":"metadata/metadata/music/","title":"Music Library Metadata","text":"<p>You can have the script edit the metadata of Artists, Albums, and Tracks by adding them to the <code>metadata</code> mapping of a Metadata File.</p> <p>An example of multiple metadata edits in a music library is below:</p> <pre><code>metadata:\n\"Linkin Park\":\ncountry: \"United States of America\"\nalbum_sorting: newest\nalbums:\n\"Hybrid Theory\":\noriginally_available: \"2000-10-24\"\ntracks:\n1:\nuser_rating: 5\n\"One Step Closer\":\nuser_rating: 5\n\"Meteora\":\noriginally_available: \"2003-03-25\"\nalbum_sorting: newest\ntracks:\n9:\nuser_rating: 5\n\"Numb\":\nuser_rating: 5\n\"Minutes To Midnight\":\noriginally_available: \"2007-05-14\"\n</code></pre>"},{"location":"metadata/metadata/music/#matching-artist","title":"Matching Artist","text":"<p>The <code>match</code> attribute is used to match artists within Plex to that definition within the Metadata file. One definition can match and edit multiple artists. The available matching options are outlined below.</p> Attribute Allowed Values <code>title</code>1 Only matches artists that exactly match the artist's Title. Can be a list (only one needs to match). <ol> <li>When <code>title</code> is not provided and the mapping name was not specified as an ID, the default behaviour is to use the mapping name as <code>title</code> for matching.</li> </ol>"},{"location":"metadata/metadata/music/#examples","title":"Examples","text":"<p>Below are some examples on how artists can be matched.</p>"},{"location":"metadata/metadata/music/#example-1-title","title":"Example 1 - <code>title</code>","text":"<p>The below example shows how <code>title</code> can be used to match artists.</p> <pre><code>metadata:\nartist1:                   # Matches via the title \"Ke$ha\"\nmatch:\ntitle: Ke$ha\nedits...\nartist2:                   # Matches via the title \"311\" \nmatch:\ntitle: 311\nedits...\n</code></pre> <p>The Mapping Name can also be used to reduce line-count, as shown here:</p> <pre><code>metadata:\nKe$ha:             # Matches via the Name \"Ke$ha\"\nedits...\n\"311\":             # Matches via the Name \"311\" \nedits...\n</code></pre>"},{"location":"metadata/metadata/music/#metadata-edits","title":"Metadata Edits","text":"<p>The available attributes for editing artists, albums, and tracks are as follows</p>"},{"location":"metadata/metadata/music/#special-attributes","title":"Special Attributes","text":"Attribute Values Artists Album Tracks <code>albums</code> Attribute used to edit album metadata. The mapping name is the album name. \u2705 \u274c \u274c <code>tracks</code> Attribute used to edit track metadata. The mapping name is the track number on that Album, or the title of the Track. \u274c \u2705 \u274c <ul> <li>If you know of another Title your item might exist under, but you want it titled differently you can use <code>alt_title</code> to specify another title to look under and then be changed to the mapping name. For Example the Artist <code>Kesha</code> used to be stylized as <code>Ke$ha</code>, and might still be found that way in Metadata results.     <pre><code>metadata:\n\"Kesha\":\nalt_title: \"Ke$ha\"\n</code></pre>     This would change the name of the default <code>Ke$ha</code> to <code>Kesha</code> and would not mess up any subsequent runs. ``</li> </ul>"},{"location":"metadata/metadata/music/#general-attributes","title":"General Attributes","text":"Attribute Values Artists Album Tracks <code>title</code> Text to change Title. \u274c \u274c \u2705 <code>sort_title</code> Text to change Sort Title. \u2705 \u2705 \u2705 <code>user_rating</code> Number to change User Rating. \u2705 \u2705 \u2705 <code>critic_rating</code> Number to change Critic Rating. \u274c \u2705 \u274c <code>originally_available</code> Date to change Originally Available.Format: YYYY-MM-DD \u274c \u2705 \u274c <code>record_label</code> Text to change Record Label. \u274c \u2705 \u274c <code>summary</code> Text to change Summary. \u2705 \u2705 \u2705 <code>track</code> Text to change Track. \u274c \u274c \u2705 <code>disc</code> Text to change Disc. \u274c \u274c \u2705 <code>original_artist</code> Text to change Original Artist. \u274c \u274c \u2705 <code>run_definition</code> Used to specify if this definition runs.Multiple can be used for one definition as a list or comma separated string. One <code>false</code> or unmatched library type will cause it to fail.Values: <code>movie</code>, <code>show</code>, <code>artist</code>, <code>true</code>, <code>false</code> \u2705 \u274c \u274c"},{"location":"metadata/metadata/music/#tag-attributes","title":"Tag Attributes","text":"<p>You can add <code>.remove</code> to any tag attribute to only remove those tags i.e. <code>genre.remove</code>.</p> <p>You can add <code>.sync</code> to any tag attribute to sync all tags vs just appending the new ones i.e. <code>genre.sync</code>.</p> Attribute Values Artists Album Tracks <code>genre</code> List or comma-separated text of each Genre Tag. \u2705 \u2705 \u274c <code>collection</code> List or comma-separated text of each Collection Tag. \u2705 \u2705 \u2705 <code>label</code> List or comma-separated text of each Label Tag. \u2705 \u2705 \u2705 <code>style</code> List or comma-separated text of each Style Tag. \u2705 \u2705 \u274c <code>mood</code> List or comma-separated text of each Mood Tag. \u2705 \u2705 \u2705 <code>country</code> List or comma-separated text of each Country Tag. \u2705 \u274c \u274c <code>similar_artist</code> List or comma-separated text of each Similar Artist Tag. \u2705 \u274c \u274c"},{"location":"metadata/metadata/music/#image-attributes","title":"Image Attributes","text":"Attribute Values Artists Album Tracks <code>url_poster</code> URL of image publicly available on the internet. \u2705 \u2705 \u274c <code>file_poster</code> Path to image in the file system. \u2705 \u2705 \u274c <code>url_background</code> URL of image publicly available on the internet. \u2705 \u2705 \u274c <code>file_background</code> Path to image in the file system. \u2705 \u2705 \u274c"},{"location":"metadata/metadata/music/#advanced-attributes","title":"Advanced Attributes","text":"<p>All these attributes only work with Artists.</p> Attribute Values <code>album_sorting</code> <code>default</code>Library default<code>oldest</code>Oldest first<code>newest</code>Newest first<code>name</code>Alphabetical"},{"location":"metadata/metadata/show/","title":"TV Show Library Metadata","text":"<p>You can have the script edit the metadata of Shows, Seasons, and Episodes by adding them to the <code>metadata</code> mapping of a Metadata File.</p> <p>An example of multiple metadata edits in a show library is below: <pre><code>metadata:\n\"Avatar: The Last Airbender\":\nsort_title: Avatar 01\nseasons:\n1:\ntitle: \"Book One: Water\"\nsummary: &gt;-\nAfter a lapse of 100 years, the Avatar-spiritual master of the elements-has returned. And just in\nthe nick of time. The Four Nations (Water, Earth, Fire, and Air) have become unbalanced. The Fire\nNation wants to rule the world, and its first conquest will be the Northern Water Tribe. It's up to\na 12-year-old Airbender named Aang to find a way to stop it. Join Aang, Katara, Sokka, Momo, and\nAppa as they head north on the adventure of a lifetime.\nepisodes:\n1:\nuser_rating: 9.1\n2:\ntitle: \"Book Two: Earth\"\nsummary: &gt;-\nAvatar Aang continues his quest to master the four elements before the end of summer. Together with\nKatara, Sokka, Momo, and Appa, he journeys across the Earth Kingdom in search of an Earthbending\nmentor. Along the way, he confronts Princess Azula, treacherous  daughter of Firelord Ozai and\nsister to Prince Zuko. More powerful than her brother, Azula will stop nothing to defeat the Avatar.\nBut Aang and the gang find plenty of Earth Kingdom allies to help them along the way. From the swamps\nof the South to the Earth King's palace, Avatar: Book 2 is an adventure like no other.\n3:\ntitle: \"Book Three: Fire\"\nsummary: &gt;-\nHaving survived the terrible battle with Azula, Aang faces new challenges as he and his brave\nfriends secretly enter the Fire Nation. Their quest is to find and defeat Firelord Ozai. Along\nthe way, they discover that Ozai has plans of his own. The leader of the Fire Nation intends to\nuse the massive power of Sozin's comet to spread his dominion permanently across the four nations.\nShort on time, Aang has a lot of bending to learn and no master to help him learn it. However, his\nfriends are there to help, and he finds unexpected allies deep in the heart of the Fire Nation. In\nthe spectacular four-part conclusion, Aang must fulfill his destiny and become a fully realized\nAvatar, or watch the world go up in smoke.\nepisodes:\n21:\nsummary: The Epic Series Final of Avatar The Last Airbender\n\"Avatar: The Legend of Korra\":\nmatch:\ntitle: - \"Avatar: The Legend of Korra\"\n- The Legend of Korra\nsort_title: Avatar 02\noriginal_title: The Legend of Korra\nseasons:\n1:\ntitle: \"Book One: Air\"\n2:\ntitle: \"Book Two: Spirits\"\n3:\ntitle: \"Book Three: Change\"\n4:\ntitle: \"Book Four: Balance\"\n</code></pre></p>"},{"location":"metadata/metadata/show/#matching-shows","title":"Matching Shows","text":"<p>The <code>match</code> attribute is used to match shows within Plex to that definition within the Metadata file. One definition can match and edit multiple shows. The available matching options are outlined below.</p> Attribute Allowed Values <code>title</code>1 Only matches shows that exactly match the show's Title. Can be a list (only one needs to match). <code>year</code> Only matches shows that were released in the given year. <code>mapping_id</code>2 Only matches shows that have the given TVDb or IMDb ID. <ol> <li>When <code>title</code> is not provided and the mapping name was not specified as an ID, the default behaviour is to use the mapping name as <code>title</code> for matching.</li> <li>When <code>mapping_id</code> is not provided and the mapping name was specified as an ID, the default behaviour is to use the mapping name as <code>mapping_id</code> for matching.</li> </ol>"},{"location":"metadata/metadata/show/#examples","title":"Examples","text":"<p>Below are some examples on how shows can be matched.</p>"},{"location":"metadata/metadata/show/#example-1-title-and-mapping_id","title":"Example 1 - <code>title</code> and <code>mapping_id</code>","text":"<p>The below example shows how <code>title</code> and <code>mapping_id</code> can be used to match shows.</p> <pre><code>metadata:\nshow1:                   # Matches via the title \"Game of Thrones\"\nmatch:\ntitle: Game of Thrones\nedits...\nshow2:                   # Matches via TVDb ID: 366524\nmatch:\nmapping_id: 366524\nedits...\nshow3:                   # Matches via IMDb ID: tt10234724\nmatch:\nmapping_id: tt10234724\nedits...\nshow4:                   # Matches via the title \"24\" \nmatch:\ntitle: 24\nedits...\n</code></pre> <p>The Mapping Name can also be used to reduce line-count, as shown here:</p> <pre><code>metadata:\nGame of Thrones:  # Matches via the Name \"Game of Thrones\"\nedits...\n366524:           # Matches via TVDb ID: 366524\nedits...\ntt10234724:       # Matches via IMDb ID: tt10234724\nedits...\n\"24\":             # Matches via the Name \"24\" \nedits...\n</code></pre> <p>Note: to search for a show titled with a number from the mapping name you must surround the number in quotes like in the example below. Otherwise, it will look for the show associated with that TVDb ID.</p>"},{"location":"metadata/metadata/show/#example-2-title-and-year","title":"Example 2 - <code>title</code> and <code>year</code>","text":"<p>The below example shows how <code>title</code> and <code>year</code> can be used to match shows. </p> <p>In this example, there are two shows in the library called \"Vikings\", so the <code>year</code> attribute is used to identify which show is being matched.</p> <pre><code>metadata:\nVikings (2012):                   # Matches via the title \"Vikings\" released in 2012\nmatch:\ntitle: Vikings\nyear: 2012\nedits...\nVikings (2013):                   # Matches via the title \"Vikings\" released in 2013\nmatch:\ntitle: Vikings\nyear: 2013\nedits...\n</code></pre>"},{"location":"metadata/metadata/show/#metadata-edits","title":"Metadata Edits","text":"<p>The available attributes for editing shows, seasons, and episodes are as follows</p>"},{"location":"metadata/metadata/show/#special-attributes","title":"Special Attributes","text":"Attribute Description Shows Seasons Episodes <code>f1_season</code> F1 Season Year to make the Show represent a Season of F1 Races. See Formula 1 Metadata Guide for more information. \u2705 \u274c \u274c <code>round_prefix</code> Used only with <code>f1_season</code> to add the round as a prefix to the Season (Race) Titles i.e. <code>Australian Grand Prix</code> --&gt; <code>01 - Australian Grand Prix</code>. \u2705 \u274c \u274c <code>shorten_gp</code> Used only with <code>f1_season</code> to shorten <code>Grand Prix</code> to <code>GP</code> in the Season (Race) Titles i.e. <code>Australian Grand Prix</code> --&gt; <code>Australian GP</code>. \u2705 \u274c \u274c <code>seasons</code> Attribute used to edit season metadata. The mapping name is the season number (use 0 for specials) or the season name. \u2705 \u274c \u274c <code>episodes</code> Attribute used to edit episode metadata. The mapping name is the episode number in that season, the title of the episode, or the Originally Available date in the format <code>MM/DD</code>. \u274c \u2705 \u274c <code>run_definition</code> Used to specify if this definition runs.Multiple can be used for one definition as a list or comma separated string. One <code>false</code> or unmatched library type will cause it to fail.Values: <code>movie</code>, <code>show</code>, <code>artist</code>, <code>true</code>, <code>false</code> \u2705 \u274c \u274c <code>update_seasons</code> Used to specify if this definition's seasons metadata will update.Multiple can be used for one definition as a list or comma separated string. One <code>false</code> will cause it to fail.Values: <code>true</code>, <code>false</code> \u2705 \u274c \u274c <code>update_episodes</code> Used to specify if this definition's episodes metadata will update.Multiple can be used for one definition as a list or comma separated string. One <code>false</code> will cause it to fail.Values: <code>true</code>, <code>false</code> \u2705 \u274c \u274c"},{"location":"metadata/metadata/show/#general-attributes","title":"General Attributes","text":"Attribute Allowed Values Shows Seasons Episodes <code>title</code> Text to change Title. \u2705 \u2705 \u2705 <code>sort_title</code> Text to change Sort Title. \u2705 \u274c \u2705 <code>original_title</code> Text to change Original Title. \u2705 \u274c \u274c <code>originally_available</code> Date to change Originally Available.Format: YYYY-MM-DD \u2705 \u274c \u2705 <code>content_rating</code> Text to change Content Rating. \u2705 \u274c \u2705 <code>user_rating</code> Number to change User Rating. \u2705 \u2705 \u2705 <code>audience_rating</code> Number to change Audience Rating. \u2705 \u274c \u2705 <code>critic_rating</code> Number to change Critic Rating. \u2705 \u274c \u2705 <code>studio</code> Text to change Studio. \u2705 \u274c \u274c <code>tagline</code> Text to change Tagline. \u2705 \u274c \u274c <code>summary</code> Text to change Summary. \u2705 \u2705 \u2705"},{"location":"metadata/metadata/show/#tag-attributes","title":"Tag Attributes","text":"<p>You can add <code>.remove</code> to any tag attribute to only remove those tags i.e. <code>genre.remove</code>.</p> <p>You can add <code>.sync</code> to any tag attribute to sync all tags vs just appending the new ones i.e. <code>genre.sync</code>.</p> Attribute Allowed Values Shows Seasons Episodes <code>director</code> List or comma-separated text of each Director Tag. \u274c \u274c \u2705 <code>genre</code> List or comma-separated text of each Genre Tag. \u2705 \u274c \u274c <code>writer</code> List or comma-separated text of each Writer Tag. \u274c \u274c \u2705 <code>collection</code> List or comma-separated text of each Collection Tag. \u2705 \u2705 \u2705 <code>label</code> List or comma-separated text of each Label Tag. \u2705 \u2705 \u2705"},{"location":"metadata/metadata/show/#image-attributes","title":"Image Attributes","text":"Attribute Allowed Values Shows Seasons Episodes <code>url_poster</code> URL of image publicly available on the internet. \u2705 \u2705 \u2705 <code>file_poster</code> Path to image in the file system. \u2705 \u2705 \u2705 <code>url_background</code> URL of image publicly available on the internet. \u2705 \u2705 \u2705 <code>file_background</code> Path to image in the file system. \u2705 \u2705 \u2705"},{"location":"metadata/metadata/show/#advanced-attributes","title":"Advanced Attributes","text":"<p>All these attributes only work with Shows.</p> Attribute Allowed Values <code>episode_sorting</code> <code>default</code>Library default<code>oldest</code>Oldest first<code>newest</code>Newest first <code>keep_episodes</code> <code>all</code>All episodes<code>5_latest</code>5 latest episodes<code>3_latest</code>3 latest episodes<code>latest</code>Latest episodes<code>past_3</code>Episodes added in the past 3 days<code>past_7</code>Episodes added in the past 7 days<code>past_30</code>Episodes added in the past 30 days <code>delete_episodes</code> <code>never</code>Never<code>day</code>After a day<code>week</code>After a week<code>refresh</code>On next refresh <code>season_display</code> <code>default</code>Library default<code>show</code>Show<code>hide</code>Hide <code>episode_ordering</code> <code>default</code>Library default<code>tmdb_aired</code>The Movie Database (Aired)<code>tvdb_aired</code>TheTVDb (Aired)<code>tvdb_dvd</code>TheTVDb (DVD)<code>tvdb_absolute</code>TheTVDb (Absolute) <code>metadata_language</code>1 <code>default</code>, <code>ar-SA</code>, <code>ca-ES</code>, <code>cs-CZ</code>, <code>da-DK</code>, <code>de-DE</code>, <code>el-GR</code>, <code>en-AU</code>, <code>en-CA</code>, <code>en-GB</code>, <code>en-US</code>, <code>es-ES</code>, <code>es-MX</code>, <code>et-EE</code>, <code>fa-IR</code>, <code>fi-FI</code>, <code>fr-CA</code>, <code>fr-FR</code>, <code>he-IL</code>, <code>hi-IN</code>, <code>hu-HU</code>, <code>id-ID</code>, <code>it-IT</code>, <code>ja-JP</code>, <code>ko-KR</code>, <code>lt-LT</code>, <code>lv-LV</code>, <code>nb-NO</code>, <code>nl-NL</code>, <code>pl-PL</code>, <code>pt-BR</code>, <code>pt-PT</code>, <code>ro-RO</code>, <code>ru-RU</code>, <code>sk-SK</code>, <code>sv-SE</code>, <code>th-TH</code>, <code>tr-TR</code>, <code>uk-UA</code>, <code>vi-VN</code>, <code>zh-CN</code>, <code>zh-HK</code>, <code>zh-TW</code> <code>use_original_title</code>1 <code>default</code>Library default<code>no</code>No<code>yes</code>Yes <ol> <li>Must be using the New Plex TV Agent</li> </ol>"},{"location":"pmm/essentials/basics/","title":"Basics","text":""},{"location":"pmm/essentials/environmental/","title":"Run Commands &amp; Environment Variables","text":"<p>The basic command to run Plex Meta Manager is as follows:</p> Windows / Mac / LinuxDocker <pre><code>python plex_meta_manager.py\n</code></pre> <pre><code>docker run --rm -it -v \"/&lt;ROOT_PMM_DIRECTORY_HERE&gt;/config:/config:rw\" meisnate12/plex-meta-manager\n</code></pre> <p>To customize the running of Plex Meta Manager according to your needs, you can use either run commands or environmental variables. Environmental variables take precedence over run command attributes. However, if you encounter a race condition where an attribute has been set both via an environmental variable and a shell command, the environmental variable will be given priority.</p> <p>Please note that these instructions assume that you have a basic understanding of Docker concepts. If you need to familiarize yourself with Docker, you can check out the official tutorial.</p> <p>Another way to specify environmental variables is by adding them to a .env file located in your config folder.</p> <p>official tutorial.</p> Attribute Shell Command Environment Variable Config <code>-c</code> or <code>--config</code> <code>PMM_CONFIG</code> Time to Run <code>-t</code> or <code>--time</code> <code>PMM_TIME</code> Run Immediately <code>-r</code> or <code>--run</code> <code>PMM_RUN</code> Run Tests <code>-rt</code>, <code>--tests</code>, or <code>--run-tests</code> <code>PMM_TEST</code> Debug <code>-db</code> or <code>--debug</code> <code>PMM_DEBUG</code> Trace <code>-tr</code> or <code>--trace</code> <code>PMM_TRACE</code> Log Requests <code>-lr</code> or <code>--log-requests</code> <code>PMM_LOG_REQUESTS</code> Timeout <code>-ti</code> or <code>--timeout</code> <code>PMM_TIMEOUT</code> Collections Only <code>-co</code> or <code>--collections-only</code> <code>PMM_COLLECTIONS_ONLY</code> Playlists Only <code>-po</code> or <code>--playlists-only</code> <code>PMM_PLAYLISTS_ONLY</code> Operations Only <code>-op</code>, <code>--operations</code>, or <code>--operations-only</code> <code>PMM_OPERATIONS</code> Overlays Only <code>-ov</code>, <code>--overlays</code>, or <code>--overlays-only</code> <code>PMM_OVERLAYS</code> Run Collections <code>-rc</code> or <code>--run-collections</code> <code>PMM_COLLECTIONS</code> Run Libraries <code>-rl</code> or <code>--run-libraries</code> <code>PMM_LIBRARIES</code> Run Metadata Files <code>-rm</code> or <code>--run-metadata-files</code> <code>PMM_METADATA_FILES</code> Libraries First <code>-lf</code> or <code>--libraries-first</code> <code>PMM_LIBRARIES_FIRST</code> Ignore Schedules <code>-is</code> or <code>--ignore-schedules</code> <code>PMM_IGNORE_SCHEDULES</code> Ignore Ghost <code>-ig</code> or <code>--ignore-ghost</code> <code>PMM_IGNORE_GHOST</code> Cache Libraries <code>-ca</code> or <code>--cache-libraries</code> <code>PMM_CACHE_LIBRARIES</code> Delete Collections <code>-dc</code> or <code>--delete-collections</code> <code>PMM_DELETE_COLLECTIONS</code> Delete Labels <code>-dl</code> or <code>--delete-labels</code> <code>PMM_DELETE_LABELS</code> Resume Run <code>-re</code> or <code>--resume</code> <code>PMM_RESUME</code> No Countdown <code>-nc</code> or <code>--no-countdown</code> <code>PMM_NO_COUNTDOWN</code> No Missing <code>-nm</code> or <code>--no-missing</code> <code>PMM_NO_MISSING</code> No Report <code>-nr</code> or <code>--no-report</code> <code>PMM_NO_REPORT</code> Read Only Config <code>-ro</code> or <code>--read-only-config</code> <code>PMM_READ_ONLY_CONFIG</code> Divider Character <code>-d</code> or <code>--divider</code> <code>PMM_DIVIDER</code> Screen Width <code>-w</code> or <code>--width</code> <code>PMM_WIDTH</code> Config Secrets <code>--pmm-***</code> <code>PMM_***</code> <p>Further explanation and examples of each command can be found below.</p> <p>Environment variables are expressed as <code>KEY=VALUE</code>  Depending on the context where you are specifying them, you may enter those two things in two different fields, or some other way.  The examples below show how you would specify the environment variable in a script or a <code>docker run</code> command.  Things like Portainer or a NAS Docker UI will have different ways to specify these things.</p>"},{"location":"pmm/essentials/environmental/#config","title":"Config","text":"<p>Specify the location of the configuration YAML file.</p> Shell Environment Flags <code>-c</code> or <code>--config</code> <code>PMM_CONFIG</code> Example <code>--config /data/config.yml</code> <code>PMM_CONFIG=/data/config.yml</code> Default <code>config/config.yml</code> <code>config/config.yml</code> Values Path to YAML config file Path to YAML config file <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --config &lt;path_to_config&gt;\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --config &lt;path_to_config&gt;\n</code></pre>"},{"location":"pmm/essentials/environmental/#time-to-run","title":"Time to Run","text":"<p>Specify the time of day that Plex Meta Manager will run.</p> Shell Command Environment Variable Flags <code>-ti</code> or <code>--timeout</code> <code>PMM_TIMEOUT</code> Example <code>--timeout 360</code> <code>PMM_TIMEOUT=360</code> Values Integer Number of Seconds <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --time 22:00,03:00\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --time 22:00,03:00\n</code></pre>"},{"location":"pmm/essentials/environmental/#run-immediately","title":"Run Immediately","text":"<p>Perform a run immediately, bypassing the time to run flag.</p> Shell Command Environment Variable Flags <code>-r</code> or <code>--run</code> <code>PMM_RUN</code> Example <code>--run</code> <code>PMM_RUN=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --run\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --run\n</code></pre>"},{"location":"pmm/essentials/environmental/#run-tests","title":"Run Tests","text":"<p>Perform a debug test run immediately, bypassing the time to run flag. This will only run collections with <code>test: true</code> in the definition.</p> Shell Command Environment Variable Flags <code>-rt</code>, <code>--tests</code>, or <code>--run-tests</code> <code>PMM_TEST</code> Example <code>--run-tests</code> <code>PMM_TEST=true</code> <ul> <li>Only collections with <code>test: true</code> enabled will be run</li> </ul> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --run-tests\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --run-tests\n</code></pre>"},{"location":"pmm/essentials/environmental/#debug","title":"Debug","text":"<p>Run with Debug Logs Reporting to the Command Window.</p> Shell Command Environment Variable Flags <code>-db</code> or <code>--debug</code> <code>PMM_DEBUG</code> Example <code>--debug</code> <code>PMM_DEBUG=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --debug\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --debug\n</code></pre>"},{"location":"pmm/essentials/environmental/#trace","title":"Trace","text":"<p>Run with extra Trace Debug Logs.</p> Shell Command Environment Variable Flags <code>-tr</code> or <code>--trace</code> <code>PMM_TRACE</code> Example <code>--trace</code> <code>PMM_TRACE=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --trace\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --trace\n</code></pre>"},{"location":"pmm/essentials/environmental/#log-requests","title":"Log Requests","text":"<p>Run with every network request printed to the Logs. This can potentially have personal information in it.</p> Shell Command Environment Variable Flags <code>-lr</code> or <code>--log-request</code> or <code>--log-requests</code> <code>PMM_LOG_REQUESTS</code> Example <code>--log-requests</code> <code>PMM_LOG_REQUESTS=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --log-requests\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --log-requests\n</code></pre>"},{"location":"pmm/essentials/environmental/#timeout","title":"Timeout","text":"<p>Change the timeout for all non-Plex services (such as TMDb, Radarr, and Trakt). This is overwritten by any timeouts mentioned for specific services in the Configuration File.</p> Shell Command Environment Variable Flags <code>-ti</code> or <code>--timeout</code> <code>PMM_TIMEOUT</code> Example <code>--timeout 360</code> <code>PMM_TIMEOUT=360</code> Values Integer Number of Seconds <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --timeout 360\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --timeout 360\n</code></pre>"},{"location":"pmm/essentials/environmental/#collections-only","title":"Collections Only","text":"<p>Only run collection metadata/YAML files, skip library operations, overlays, and playlists.</p> Shell Command Environment Variable Flags <code>-co</code> or <code>--collections-only</code> <code>PMM_COLLECTIONS_ONLY</code> Example <code>--collections-only</code> <code>PMM_COLLECTIONS_ONLY=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --collections-only\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --collections-only\n</code></pre>"},{"location":"pmm/essentials/environmental/#playlists-only","title":"Playlists Only","text":"<p>Only run playlist metadata/YAML files, skip library operations, overlays, and collections/metadata.</p> Shell Command Environment Variable Flags <code>-po</code> or <code>--playlists-only</code> <code>PMM_PLAYLISTS_ONLY</code> Example <code>--playlists-only</code> <code>PMM_PLAYLISTS_ONLY=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --playlists-only\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --playlists-only\n</code></pre>"},{"location":"pmm/essentials/environmental/#operations-only","title":"Operations Only","text":"<p>Only run library operations skipping collections/metadata, playlists, and overlays.</p> Shell Command Environment Variable Flags <code>-op</code> or <code>--operations</code> <code>PMM_OPERATIONS</code> Example <code>--operations</code> <code>PMM_OPERATIONS=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --operations\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --operations\n</code></pre>"},{"location":"pmm/essentials/environmental/#overlays-only","title":"Overlays Only","text":"<p>Only run library overlays skipping collections/metadata, playlists, and operations.</p> Shell Command Environment Variable Flags <code>-ov</code> or <code>--overlays</code> <code>PMM_OVERLAYS</code> Example <code>--overlays</code> <code>PMM_OVERLAYS=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --overlays\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --overlays\n</code></pre>"},{"location":"pmm/essentials/environmental/#run-collections","title":"Run Collections","text":"<p>Perform a collections run immediately to run only the pre-defined collections, bypassing the time to run flag.</p> Shell Command Environment Variable Flags <code>-rc</code> or <code>--run-collections</code> <code>PMM_COLLECTIONS</code> Example <code>--run-collections \"Harry Potter\\               | Star Wars\"</code> <code>PMM_COLLECTIONS=Harry Potter\\|Star Wars</code> Values Pipe-separated list of Collection Names to run <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --run-collections \"Harry Potter|Star Wars\"\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --run-collections \"Harry Potter|Star Wars\"\n</code></pre>"},{"location":"pmm/essentials/environmental/#run-libraries","title":"Run Libraries","text":"<p>Perform a libraries run immediately to run only the pre-defined libraries, bypassing the time to run flag.</p> Shell Command Environment Variable Flags <code>-rl</code> or <code>--run-libraries</code> <code>PMM_LIBRARIES</code> Example <code>--run-libraries \"Movies - 4K\\              | TV Shows - 4K\"</code> <code>PMM_LIBRARIES=Movies - 4K\\|TV Shows - 4K</code> Values Pipe-separated list of Library Names to run <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --run-libraries \"TV Shows\"\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --run-libraries \"TV Shows\"\n</code></pre>"},{"location":"pmm/essentials/environmental/#run-metadata-files","title":"Run Metadata Files","text":"<p>Perform a metadata files run immediately to run only the pre-defined metadata files, bypassing the time to run flag.</p> Shell Command Environment Variable Flags <code>-rm</code> or <code>--run-metadata-files</code> <code>PMM_METADATA_FILES</code> Example <code>--run-metadata-files \"Movies.yml\\               | MovieCharts\"</code> <code>PMM_METADATA_FILES=Movies.yml\\|MovieCharts</code> Available Values Pipe-separated list of Metadata Filenames to run <ul> <li>This works for all different metadata paths i.e. <code>git</code>, <code>url</code>, <code>file</code>, or <code>repo</code>.</li> </ul> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --run-metadata-files \"Movies\"\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --run-metadata-files \"Movies\"\n</code></pre>"},{"location":"pmm/essentials/environmental/#libraries-first","title":"Libraries First","text":"<p>Run library operations prior to running collections.</p> Shell Command Environment Variable Flags <code>-lf</code> or <code>--libraries-first</code> <code>PMM_LIBRARIES_FIRST</code> Example <code>--libraries-first</code> <code>PMM_LIBRARIES_FIRST=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --libraries-first\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --libraries-first\n</code></pre>"},{"location":"pmm/essentials/environmental/#ignore-schedules","title":"Ignore Schedules","text":"<p>Ignore all schedules for the run.</p> Shell Command Environment Variable Flags <code>-is</code> or <code>--ignore-schedules</code> <code>PMM_IGNORE_SCHEDULES</code> Example <code>--ignore-schedules</code> <code>PMM_IGNORE_SCHEDULES=true</code> <ul> <li>Range Scheduled collections (such as Christmas movies) will still be ignored.</li> </ul> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --ignore-schedules\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --ignore-schedules\n</code></pre>"},{"location":"pmm/essentials/environmental/#ignore-ghost","title":"Ignore Ghost","text":"<p>Ignore all ghost logging for the run. A ghost log is what's printed to the console to show progress during steps.</p> Shell Command Environment Variable Flags <code>-ig</code> or <code>--ignore-ghost</code> <code>PMM_IGNORE_GHOST</code> Example <code>--ignore-ghost</code> <code>PMM_IGNORE_GHOST=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --ignore-ghost\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --ignore-ghost\n</code></pre>"},{"location":"pmm/essentials/environmental/#cache-libraries","title":"Cache Libraries","text":"<p>Cache the library Load for 1 day.</p> Shell Command Environment Variable Flags <code>-ca</code> or <code>--cache-libraries</code> <code>PMM_CACHE_LIBRARIES</code> Example <code>--cache-libraries</code> <code>PMM_CACHE_LIBRARIES=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --cache-libraries\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --cache-libraries\n</code></pre>"},{"location":"pmm/essentials/environmental/#delete-collections","title":"Delete Collections","text":"<p>Delete all collections in a Library prior to running collections/operations.</p> Shell Command Environment Variable Flags <code>-dc</code> or <code>--delete-collections</code> <code>PMM_DELETE_COLLECTIONS</code> Example <code>--delete-collections</code> <code>PMM_DELETE_COLLECTIONS=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --delete-collections\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --delete-collections\n</code></pre>"},{"location":"pmm/essentials/environmental/#delete-labels","title":"Delete Labels","text":"<p>Delete all labels on every item in a Library prior to running collections/operations.</p> Shell Command Environment Variable Flags <code>-dl</code> or <code>--delete-labels</code> <code>PMM_DELETE_LABELS</code> Example <code>--delete-labels</code> <code>PMM_DELETE_LABELS=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --delete-labels\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --delete-labels\n</code></pre>"},{"location":"pmm/essentials/environmental/#resume-run","title":"Resume Run","text":"<p>Perform a resume run immediately resuming from the first instance of the specified collection, bypassing the time to run flag.</p> Shell Command Environment Variable Flags <code>-re</code> or <code>--resume</code> <code>PMM_RESUME</code> Example <code>--resume \"Star Wars\"</code> <code>PMM_RESUME=Star Wars</code> Available Values Name of collection to resume from <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --resume \"Star Wars\"\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --resume \"Star Wars\"\n</code></pre>"},{"location":"pmm/essentials/environmental/#no-countdown","title":"No Countdown","text":"<p>Run without displaying a countdown to the next scheduled run.</p> Shell Command Environment Variable Flags <code>-nc</code> or <code>--no-countdown</code> <code>PMM_NO_COUNTDOWN</code> Example <code>--no-countdown</code> <code>PMM_NO_COUNTDOWN=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --no-countdown\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --no-countdown\n</code></pre>"},{"location":"pmm/essentials/environmental/#no-missing","title":"No Missing","text":"<p>Run without utilizing the missing movie/show functions.</p> Shell Command Environment Variable Flags <code>-nc</code> or <code>--no-countdown</code> <code>PMM_NO_COUNTDOWN</code> Example <code>--no-countdown</code> <code>PMM_NO_COUNTDOWN=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --no-missing\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --no-missing\n</code></pre>"},{"location":"pmm/essentials/environmental/#no-report","title":"No Report","text":"<p>Run without saving the report.</p> Shell Command Environment Variable Flags <code>-nr</code> or <code>--no-report</code> <code>PMM_NO_REPORT</code> Example <code>--no-report</code> <code>PMM_NO_REPORT=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --no-report\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --no-report\n</code></pre>"},{"location":"pmm/essentials/environmental/#read-only-config","title":"Read Only Config","text":"<p>Run without writing to the configuration file.</p> Shell Command Environment Variable Flags <code>-ro</code> or <code>--read-only-config</code> <code>PMM_READ_ONLY_CONFIG</code> Example <code>--read-only-config</code> <code>PMM_READ_ONLY_CONFIG=true</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --read-only-config\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --read-only-config\n</code></pre>"},{"location":"pmm/essentials/environmental/#divider-character-screen-width","title":"Divider Character &amp; Screen Width","text":"<p>Change the terminal output divider character or width.</p>"},{"location":"pmm/essentials/environmental/#divider-character","title":"Divider Character","text":"Shell Command Environment Variable Flags <code>-d</code> or <code>--divider</code> <code>PMM_DIVIDER</code> Example <code>--divider *</code> <code>PMM_DIVIDER=*</code> Default <code>=</code> Values Any character"},{"location":"pmm/essentials/environmental/#screen-width","title":"Screen Width","text":"Shell Command Environment Variable Flags <code>-w</code> or <code>--width</code> <code>PMM_WIDTH</code> Example <code>--width 150</code> <code>PMM_WIDTH=150</code> Default Integer between 90 and 300 Values Any character <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --divider * --width 200\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --divider * --width 200\n</code></pre>"},{"location":"pmm/essentials/environmental/#config-secrets","title":"Config Secrets","text":"<p>All Run Commands that start with <code>--pmm-***</code> and Environment Variables that start with <code>PMM_***</code> will be loaded in as Config Secrets.</p> <p>These Config Secrets can be loaded into the config by placing <code>&lt;&lt;***&gt;&gt;</code> in any field in the config, where <code>***</code> is whatever name you want to call the variable.  </p> Shell Command Environment Variable Flags <code>--pmm-***</code> <code>PMM_***</code> Example <code>--pmm-mysecret 123456789</code> <code>PMM_MYSECRET=123456789</code> <p>Example</p> Local EnvironmentDocker Environment <pre><code>python plex_meta_manager.py --pmm-mysecret 123456789\n</code></pre> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager --pmm-mysecret 123456789\n</code></pre> <p>Example Config Usage:</p> <pre><code>tmdb:\napikey: &lt;&lt;mysecret&gt;&gt;\n</code></pre>"},{"location":"pmm/essentials/kb/","title":"Frequently Asked Questions &amp; Knowledgebase","text":"<p>This page aims to provide knowledge based on combined user experience, and to answer the frequent questions that we are asked in our Discord Server.</p>"},{"location":"pmm/essentials/kb/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>This sections aims to answer the most commonly asked questions that users have.</p>"},{"location":"pmm/essentials/kb/#pmm-versions-updating","title":"PMM Versions &amp; Updating","text":"How do I update to the latest version of Plex Meta Manager?  Linux macOS Windows Docker <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd C:\\Users\\mroche\\Plex-Meta-Manager\ngit pull\n.\\pmm-venv\\Scripts\\activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ndocker pull meisnate12/plex-meta-manager\n```\n</code></pre> How do I switch to the develop branch?  Linux macOS Windows <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit checkout develop\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit checkout develop\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd C:\\Users\\mroche\\Plex-Meta-Manager\ngit checkout develop\ngit pull\n.\\pmm-venv\\Scripts\\activate\npython -m pip install -r requirements.txt\n```\n</code></pre> How do I switch to the nightly branch  Linux macOS Windows <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit checkout nightly\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit checkout nightly\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd C:\\Users\\mroche\\Plex-Meta-Manager\ngit checkout nightly\ngit pull\n.\\pmm-venv\\Scripts\\activate\npython -m pip install -r requirements.txt\n```\n</code></pre> How do I switch back to the master branch?  Linux macOS Windows <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit checkout master\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd /Users/mroche/Plex-Meta-Manager\ngit checkout master\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n```\n</code></pre> <pre><code>[type this into your terminal]\n```\ncd C:\\Users\\mroche\\Plex-Meta-Manager\ngit checkout master\ngit pull\n.\\pmm-venv\\Scripts\\activate\npython -m pip install -r requirements.txt\n```\n</code></pre>"},{"location":"pmm/essentials/kb/#performance-scheduling","title":"Performance &amp; Scheduling","text":"Any tips on increasing PMM performance? <p>Use PMM Caching where possible, this allows PMM to temporarily store commonly-used information so that it can be retreived more efficiently. There are multipe things that can be cached within PMM.</p> <p>Run PMM after PLEX Scheduled Tasks, as Plex's API tends to be slower at responding whilst it is performing the tasks. By default, PMM runs at 5AM to avoid the 3-5am window that Plex suggests for Scheduled Tasks.</p> <p>For users who are more technically advanced and happy to risk manipulating the Plex database, considering altering the PRAGMA_CACHE settings within Plex.</p> <p>NOTE: you MUST use the version of sqlite3 tool that comes with your running version of PLEX or you will mess up your PLEX DB beyond repair. See this article on how to find the proper version for your setup.</p> Why does my PMM run take so long to complete? <p>Every time an item (media, collection, overlay) needs to be updated, PMM needs to send the request to Plex, and then receive confirmation back from Plex that the action has been completed. This can take anywhere from seconds to minutes depending on when Plex provides a response. Given that the typical run can update hundreds or even thousands of items, this can quickly add up to a lot of time. If \"Mass Update\" operations are used, then every single item in the library needs to go through this process, which can be lengthy. </p> <p>Overlays can be particularly cumbersome as PMM needs to perform the following actions for each of the items that need to have an overlay applied:</p> <ul> <li>Check which overlays are applicable (this will take more time depending on how many overlays you are applying)<ul> <li>Compare the current poster to confirm what overlays are already applied, if changes are needed then continue with the following steps</li> <li>Grab source image from Plex and save it to disk</li> <li>Draw each overlay image on top of the source image</li> <li>save final image to disk</li> <li>Tell Plex to apply new image to the item</li> <li>Wait for Plex to responsd confirming that the change has been made</li> </ul> </li> </ul> <p>The above two points can be greatly exasterbated if PMM has to update every episode within a Show library rather than just the Shows themselves, as there can often be hundreds of thousands of episodes to be updated with mass operations or overlays.</p> <p>Additionally, some collections requires a lot of computing resource to determine the critera of the collections that are to be made. This is commonly seen in the Defaults files for Actor/Director/Producer/Writer which need to get the crew information for each of the movies/shows within your library, and then calculate which ones appear the most to find out which are the most popular. The larger your library, the longer this process will take.</p> Can I schedule library operations and/or overlays to happen at a different time than collections? <p>Yes, the recommended approach is to set up a new library for the Operations/Overlays, mapping it back to the original library, and then scheduling the library, as outlined below</p> <pre><code>libraries:\nMovie Operations:           # NAME DOESN'T MATTER BUT MUST BE UNIQUE\nlibrary_name: Movies      # THIS MUST MATCH A LIBRARY IN PLEX\nschedule: weekly(monday)\noperations:\nsplit_duplicates: true\noverlay_path:\n- pmm: resolution\n</code></pre>"},{"location":"pmm/essentials/kb/#errors-issues","title":"Errors &amp; Issues","text":"Why doesn't PMM let me enter my authentication information for Trakt/MAL? <p>PMM needs to run in an interactive mode which allows the user to enter information (such as the Trakt/MAL PIN) as part of the authentication process. This can prove troublesome in some environments, particularly NAS.</p> <p>Chazlarson has developed an online tool which will allow you to perform the authentication of both Trakt and MAL outside of PMM, and will then provide you the completed code block to paste into your config.yml.</p> <p>The scripts can be found here. Click the green play button, wait a little bit, then follow the prompts. </p> <p>MyAnimeList Authenticator</p> <p>Trakt Authenticator</p> Why am I seeing \"(500) Internal Server Error\" in my log files? <p>A 500 Internal Server Error happens when the server has an unexpected error when responding to an API request.</p> <p>There could be any number of reasons why this happens and it depends on what server PMM is talking to although its most likely coming from your Plex Server.</p> <p>Most of the time these errors need to be resolved by changing something specific to your set up but some do come up that can be fixed (i.e. Plex throws one if you upload a photo larger then 10 MB)</p> <p>Many Appbox Setups will throw this error when too many requests are sent, or if the central metadata repository is not properly configured to allow users to upload custom posters.</p> <p>Take a look at the following logs:</p> <p> Settings | Manage | Console -&gt; then filter on Error and Warning to see what might be going on</p> <p> Check the plex logs (container or other) for the \"Busy DB Sleeping for 200ms)</p> <p>There is nothing that PMM or our support staff can really do to resolve a 500 error.</p>"},{"location":"pmm/essentials/kb/#knowledgebase","title":"Knowledgebase","text":"<p>This section aims to provide some guidance on the most common issues that we see.</p>"},{"location":"pmm/essentials/kb/#locating-log-files","title":"Locating Log Files","text":"<p>The meta.log file can be found within the <code>logs</code> folder of your Plex Meta Manager config folder [right next to <code>config.yml</code>]. <code>meta.log</code> is the most recent run of Plex Meta Manager, <code>meta.log.1</code> is the previous run, <code>meta.log.2</code> is the run before that, so on and so forth.</p>"},{"location":"pmm/essentials/kb/#basic-log-file-troubleshooting","title":"Basic Log File Troubleshooting","text":"<p>Wondering how to troubleshoot Plex Meta Manager and how to read through the meta.log?</p> <p>Using a text editor like Visual Studio Code or Sublime Text is recommended</p> <p>In all cases, the first step is to open the <code>meta.log</code> with your text editor and perform these steps:</p> <ol> <li>Check that you are running the latest <code>version</code> of your branch. Your current version can be found in the <code>meta.log</code> file either below the Plex Meta Manager ASCII art, or at the end of the run. If you are not on the latest version of your branch, you will see <code>Newest Version: X.X.X</code> below this. Ensure you <code>upgrade</code> to the latest version of Plex Meta Manager.</li> <li>When scanning your meta.log file, search for <code>[CRITICAL]</code> items first as these will definitely need to be fixed</li> <li>Scan your meta.log file for <code>[ERROR]</code> and make a note of the content of the full line to start your search below on how to resolve</li> </ol>"},{"location":"pmm/essentials/kb/#checking-plex-meta-manager-version","title":"Checking Plex Meta Manager Version","text":"<p>Checking the version: You will find that in your <code>meta.log</code> around the 8th-10th line and will look something like this:</p> <pre><code>|                                 |\n|     Version: 1.17.1-develop10   |\n|=================================|\n</code></pre> <p>If you are not on the latest version of your branch, you will see Newest Version: X.X.X below this. Ensure you upgrade to the latest version of Plex Meta Manager.</p> <pre><code>|                                       |\n|     Version: 1.17.1-develop10         |\n|     Newest Version: 1.17.1-develop20  |\n|=======================================|\n</code></pre>"},{"location":"pmm/essentials/kb/#understanding-log-file-event-types","title":"Understanding Log File Event Types","text":"<p>There are five main event types that you need to be aware of when understanding the log files, detailed below:</p> Type Short Info Description Recommendation <code>INFO</code> Information log Informational message that does not require much attention No action required <code>DEBUG</code> Debug Log Debug log message that does not require much attention No action required <code>WARNING</code> Warning Log Warning message that may require your attention Read the warning and determine if this is something you need to take action on or not <code>ERROR</code> Error Log Error message that in MOST cases requires action on your part to resolve Read the error message, look for the message below and try recommendations <code>CRITICAL</code> Critical Log Critical messaage requiring you to fix it for PMM to run properly Read the critical message and take appropriate action. look for message below and try recommendations"},{"location":"pmm/essentials/kb/#common-log-file-messages","title":"Common Log File Messages","text":"<p>This section aims to explain some commonly seen event messages that are produced in the logs.</p>"},{"location":"pmm/essentials/kb/#critical","title":"CRITICAL","text":"<p>This table details examples of the most commonly-seen <code>CRITICAL</code> events and what they mean for the user.</p> Type Short Info Description Recommendation <code>CRITICAL</code> <code>Failed to Connect to https://api.themoviedb.org/3</code> Current step PMM was on made an API call to TMDb, but it aborted and moved on Determine if TMDb was offline and not replying to api requests. Try again and see if it fails again or not."},{"location":"pmm/essentials/kb/#error","title":"ERROR","text":"<p>This table details examples of the most commonly-seen <code>[ERROR]</code> events and what they mean for the user.</p> Type Short Info Description Recommendation <code>ERROR</code> <code>Playlist Error: Library: XYZ not defined</code> Plex library XYZ is not found Ensure that your config file has defined the proper library name as found in Plex <code>ERROR</code> <code>Plex Error: resolution: No matches found with regex pattern XYZ</code> While looking for a pattern in Plex, this one was not found This may be normal and require 0 actions. However, if you expect that Plex should have returned records, check the pattern to ensure it is working properly <code>ERROR</code> <code>Plex Error: No Items found in Plex</code> While using the PMM builder, no items with that criteria were returned from Plex This may be normal and require 0 actions. However, if you expect that Plex should have returned records, check the builder to ensure it is working properly <code>ERROR</code> <code>IMDb Error: Failed to parse URL:</code> While using the PMM builder, url does not exist This may be normal and require 0 actions. However, if you expect that the URL should have returned records, check the url in your browser to ensure it is working properly <code>ERROR</code> <code>Trakt Error: No TVDb ID found for Nightfall (2022)</code> Online sources are missing information These sorts of errors indicate that the thing can't be cross-referenced between sites.For example, at the time of that error, the Trakt record for \"Nightfall (2022)\" didn't contain a TVDb ID.This could be because the record just hasn't been updated, or because \"Nightfall (2022)\" is not listed on TVDb.The fix is for someone [like you, perhaps] to go to the relevant site and fill in the missing data. <code>ERROR</code> <code>MdbList Error: Not Found</code> Online sources are missing information These sorts of errors indicate that the thing can't be cross-referenced between sites. For example, at the time of that error, the the MDBlist record was trying to get a rating for a media item and could not find it. <code>ERROR</code> <code>Plex Error: actor: Mel B not found</code> Actor not found and hence unable to create the collection Report error in #pmm-help channel and see if there is a fix. <code>ERROR</code> <code>Input Failed</code> A token or password is no longer valid for an online source of information Review the meta.log for more information <code>ERROR</code> <code>Collection Error: trakt_list requires Trakt to be configured</code> You are using a builder that has not been configured yet. Review the meta.log for more information on what went wrong. Refer to the wiki for details on how to set this up (in this case Trakt)"},{"location":"pmm/essentials/kb/#warning","title":"WARNING","text":"<p>This table details examples of the most commonly-seen <code>[WARNING]</code> events and what they mean for the user.</p> Type Short Info Description Recommendation <code>WARNING</code> <code>Convert Error: No TVDb ID Found for TMDb ID: 15733</code> Online sources are missing information These sorts of errors indicate that the thing can't be cross-referenced between sites.For example, at the time of that error, the TMDb record for \"The Two Mrs. Grenvilles\" [ID 15733] didn't contain a TVDb ID.This could be because the record just hasn't been updated, or because \"The Two Mrs. Grenvilles\" is not listed on TVDB.The fix is for someone [like you, perhaps] to go to the relevant site and fill in the missing data. <code>WARNING</code> <code>Convert Error: AniDB ID not found for AniList ID: 21400</code> Online sources are missing information These sorts of errors indicate that the thing can't be cross-referenced between sites. The fix is for someone [like you, perhaps] to go to the relevant site and fill in the missing data. <code>WARNING</code> <code>Convert Error: No TVDb ID or IMDb ID found for AniDB ID: 14719</code> Online sources are missing information These sorts of errors indicate that the thing can't be cross-referenced between sites. The fix is for someone [like you, perhaps] to go to the relevant site and fill in the missing data. <code>WARNING</code> <code>Convert Error: AniDB ID not found for MyAnimeList ID: 36838</code> Online sources are missing information These sorts of errors indicate that the thing can't be cross-referenced between sites. The fix is for someone [like you, perhaps] to go to the relevant site and fill in the missing data."},{"location":"pmm/essentials/kb/#info","title":"INFO","text":"<p>This table details examples of the most commonly-seen <code>[INFO]</code> events and what they mean for the user.</p> Type Short Info Description Recommendation <code>INFO</code> <code>Detail: TMDb_person updated poster to [URL]</code> Person image was downloaded from TMDb May require you to update the people poster image to your style or request it in the style of the PMM defaults people posters"},{"location":"pmm/essentials/logs/","title":"Log files and where to find them","text":"<p>Plex-Meta-Manager's log files can be found in <code>config/logs</code>:</p> <pre><code>config/logs\n\u251c\u2500\u2500 Movies\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 collections\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Action\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 collection.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 collection.log.1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Best of 2022\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 collection.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 collection.log.1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Top Rated\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 collection.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 collection.log.1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Trending\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 collection.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 collection.log.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 library.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 library.log.1\n\u251c\u2500\u2500 TV\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 collections\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Reality\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 collection.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 collection.log.1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Game Shows\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 collection.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 collection.log.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 library.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 library.log.1\n\u251c\u2500\u2500 meta.log\n\u251c\u2500\u2500 meta.log.1\n\u2514\u2500\u2500 playlists\n    \u251c\u2500\u2500 playlists.log\n    \u2514\u2500\u2500 playlists.log.1\n</code></pre> <p>You will find a <code>meta.log</code>, which the the full log of the entire run.</p> <p>The subfolders provide more limited logs at the library, collection, and playlist levels.</p> <p>As new log files are created, the old ones get a numeric suffix added: <code>meta.log.1</code>. The most recent is always the one without a number at the end.</p> <p>These files will contain a great deal of detail about what exactly is happening and why.  Generally speaking, if you're having a problem with PMM the answer will be found here.  These logs can of course be quite technical, but often the error can be relatively clear:</p> <p>Something's missing from the format of the file: <pre><code>| Loading Metadata File: config/TV Shows.yml                                                         |\n|                                                                                                    |\n| YAML Error: metadata, collections, or dynamic_collections attribute is required                    |\n</code></pre></p> <p>The problem in that case was:</p> <pre><code>templates:\nCollection:\ncache_builders: 30\nsync_mode: sync\nsort_title: ZZZ-&lt;&lt;source&gt;&gt;-&lt;&lt;collection_name&gt;&gt;\n\ncollections:   &lt;&lt;&lt; THIS LINE WAS MISSING\nCached for 30 Days:\ntemplate: {name: Collection, source: Looper}\nsummary: \"\"\ntrakt_list:\n- https://trakt.tv/users/kesleyalfa/lists/year-2011\n</code></pre> <p>YAML doesn't allow duplicate keys: <pre><code>| Loading Metadata File: config/Anime.yml                                                            |\n|                                                                                                    |\n| YAML Error: while constructing a mapping\n|   in \"&lt;unicode string&gt;\", line 27, column 5:\n|         mal_favorite: 50\n|         ^ (line: 27)\n| found duplicate key \"collection_order\" with value \"custom\" (original value: \"custom\")\n|   in \"&lt;unicode string&gt;\", line 32, column 5:\n|         collection_order: custom\n|         ^ (line: 32)\n</code></pre></p> <p>The problem there was something like this: <pre><code>templates:\nCollection:\ncache_builders: 30\nsync_mode: sync\nsort_title: ZZZ-&lt;&lt;source&gt;&gt;-&lt;&lt;collection_name&gt;&gt;\n\ncollections:   &lt;&lt;&lt; THIS LINE WAS MISSING\nCached for 30 Days:\ntemplate: {name: Collection, source: Looper}\ncollection_order: custom                         &lt;&lt;&lt;&lt;  THIS KEY\nsummary: \"\"\ncollection_order: custom                         &lt;&lt;&lt;&lt;  DUPLICATED HERE\ntrakt_list:\n- https://trakt.tv/users/kesleyalfa/lists/year-2011\n</code></pre></p> <p>File is not where PMM expects it: <pre><code>| Loading Metadata File: config/Movies.yml                                                           |\n| YAML Error: File Error: File does not exist /Users/Lucky/Plex-Meta-Manager/config/Movies.yml       |\n</code></pre></p>"},{"location":"pmm/essentials/logs/#providing-log-files","title":"Providing Log Files","text":"<p>You can drag-and-drop your meta.log file directly into Discord, you do not need to upload it to a third-party site unless it exceeds the 50mb size limit.</p> <p>Please DO NOT manually extract, copy and paste text from your log files directly into Discord as the formatting can be difficult to read and can often redact parts of the log file that are important for full context.</p>"},{"location":"pmm/essentials/ratings/","title":"Plex Meta Manager Ratings Explained","text":"<p>How do ratings and ratings overlays work in Plex Meta Manager? This Guide will walk through some basics of how ratings work in conjunction with Plex Meta Manager.</p> Basics <p>Each thing in Plex that can have a rating [movie, show, episode, album, track] has three ratings \"boxes\" or \"fields\".  Critic, Audience, and User.</p> <p>The Critic and Audience ratings are typically managed by Plex, pulling from whatever you specify as the ratings source for the library; this is what determines the images that are displayed in the Plex UI.  The User rating is the star rating assigned by you to the item.</p> <p>Plex Meta Manager can insert a broader range of values into those fields than Plex supports natively, then it can leverage those values in overlays and the like.</p> <p>It's doing this \"behind Plex's back\", so there can be some seeming inconsistencies in the way things are displayed in the UI.  This guide is intended to clear up some of these things.</p> Setup <p>Here's our starting point if you want to run through this yourself:</p> <p>Set up a brand new Library with only one movie in it. Ensure the Ratings source on the library is set to Rotten Tomatoes:</p> <p></p> <p>The Plex UI shows the correct ratings and icons for Rotten Tomatoes and is aligned with the Rotten Tomatoes site:</p> <p></p> <p>Also note that we have not given this a user rating.</p> Initial Overlay <p>Now let's add rating overlays to the poster. We're going to use the minimal config needed here to illustrate the concepts.</p> Click to see initial minimal config <pre><code>libraries:\nOne Movie:\noverlay_path:\n- reapply_overlays: true\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: rt_tomato\nrating2: audience\nrating2_image: rt_popcorn\nrating3: user\nrating3_image: imdb\n</code></pre> <ul> <li> <p><code>rating1</code>, <code>rating1_image</code>, <code>rating2</code>, <code>rating2_image</code> are set to match the ratings that Plex already has assigned to those fields (critic/audience).  The order here is arbitrary.</p> </li> <li> <p><code>rating3</code> is set to be the user rating and it's image (<code>rating3_image</code>) is set to IMDb just because we have to pick something.</p> </li> <li> <p><code>reapply_overlays</code> is set to true to ensure that Plex Meta Manager always updates the overlays as we run things.</p> </li> <li> <p>We do not recommend using <code>reapply_overlays: true</code> consistently in a live/production environment, make sure to switch this back to <code>false</code> when finished.</p> </li> </ul> <p>After Plex Meta Manager is run on this library, you'll get this result:</p> <p></p> <ul> <li> <p>Plex Meta Manager has added those two ratings to the poster using the values already stored with the movie. The icons and values are correctly associated simply because we made sure they are in the config file.</p> </li> <li> <p>The two ratings match, and there is no IMDb rating icon on the poster since there is no user rating. (no star rating on the right)</p> </li> </ul> <p>Now we're going to add a user rating by clicking the middle star on the right for a rating of 3/5:</p> <p></p> <p>Now just run Plex Meta Manager again without changing anything else and the user rating overlay will appear:</p> <p></p> <ul> <li>Plex Meta Manager added the third rating overlay, since there is now a value in the user rating. </li> <li>It gave it an IMDb icon because we told it to in the config file. (Why does it say 250 instead of IMDb?)</li> <li>It's displaying 6.0 since 3 stars on a 5-star scale is 60%.</li> </ul>"},{"location":"pmm/essentials/ratings/#change-rating-image","title":"Change Rating Image","text":"<p>You and I both know that the IMDb rating isn't 6.0, but Plex Meta Manager is just doing what it's told. Nobody but us humans know where those numbers come from. As an example, let's change the icons to \"prove\" that Plex Meta Manager doesn't know or care:</p> Click to see the updated config <pre><code>libraries:\nOne Movie:\noverlay_path:\n- reapply_overlays: true\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: imdb\nrating2: audience\nrating2_image: imdb\nrating3: user\nrating3_image: imdb\n</code></pre> <ul> <li><code>rating1_image</code> and <code>rating2_image</code> were both changed from <code>rt_score</code> and <code>rt_popcorn</code> respectively to <code>imdb</code></li> </ul> <p>When the above is run you see this result:</p> <p></p> <ul> <li>Three different ratings on the poster, all IMDb; All while the Plex UI still shows RT icons.</li> <li>Note that the existing RT ratings numbers (<code>93%</code> and <code>96%</code>) display on the poster as <code>9.3</code> and <code>9.6</code>. This is happening because we just told Plex Meta Manager that those ratings were IMDb, and IMDb ratings are on a 1-10 scale. Plex Meta Manager doesn't \"know\" where those numbers are from, it just does what it's told to do and places the value (critic/audience/user) in that rating box. </li> <li>That first overlay showing an IMDb rating of <code>9.3</code> is not evidence that Plex Meta Manager pulled the wrong IMDb rating; it just shows that it has been told to display the number in the critic rating box (whatever that number is) as an IMDb rating. All three of those overlays mean the same thing; Plex Meta Manager read a number from a field and stuck it on the poster formatted as requested.</li> </ul>"},{"location":"pmm/essentials/ratings/#update-user-ratings","title":"Update User Ratings","text":"<p>Now let's actually update the ratings and push some numbers into those boxes using library operations. We'll start with making that user rating accurate:</p> Click to see the updated config <pre><code>libraries:\nOne Movie:\noverlay_path:\n- reapply_overlays: true\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: rt_tomato\nrating2: audience\nrating2_image: rt_popcorn\nrating3: user\nrating3_image: imdb\noperations:\nmass_user_rating_update: imdb\n</code></pre> <ul> <li><code>operations</code> with the attribute <code>mass_user_rating_update</code> set to <code>imdb</code> is added.</li> <li><code>rating1_image</code> and <code>rating2_image</code> were both changed back to <code>rt_score</code> and <code>rt_popcorn</code> respectively from <code>imdb</code></li> </ul> <p>This will put the actual IMDb rating value, retrieved from IMDb, into the \"user\" rating field.</p> <p>After that has been run, we see:</p> <p></p> <ul> <li>The IMDb Rating Overlay on the poster matches the rating from the IMDb page for Star Wars.</li> <li>The number of stars has also changed to 4 stars. (since <code>8.6</code> split in half is <code>4.3</code> and then rounded down to the nearest half gives you 4 stars)</li> </ul>"},{"location":"pmm/essentials/ratings/#update-critic-audience-ratings","title":"Update Critic &amp; Audience Ratings","text":"<p>Now let's update the critic and audience ratings to some different ratings:</p> Click to see the updated config <pre><code>libraries:\nOne Movie:\noverlay_path:\n- reapply_overlays: true\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: rt_tomato\nrating2: audience\nrating2_image: rt_popcorn\nrating3: user\nrating3_image: imdb\noperations:\nmass_critic_rating_update: trakt_user\nmass_audience_rating_update: tmdb\nmass_user_rating_update: imdb\n</code></pre> <ul> <li>under <code>operations</code> the attribute <code>mass_critic_rating_update</code> set to <code>trakt_user</code> and <code>mass_audience_rating_update</code> set to <code>tmdb</code> are added.</li> </ul> <p>Running the above will put the Trakt User's personal rating into the critic box and the TMDb rating into the audience box. Note that we haven't changed the rating images yet.</p> <p></p> <ul> <li>Critic rating matches the trakt personal user rating of <code>6</code> which is displayed as <code>60%</code>:</li> <li>Audience rating matches the TMDb rating of <code>82%</code>.</li> <li>Note how the values have changed dramatically and all match between the overlay, plex ratings, and external sites.</li> </ul> <p>The log will show Plex Meta Manager updating those values.</p> <pre><code>| Processing: 1/1 Star Wars: Episode IV - A New Hope     |\n| Batch Edits                                            |\n| Audience Rating | 8.2                                  |\n| Critic Rating | 6.0                                    |\n</code></pre> <ul> <li>And the poster reflects those numbers, though with the wrong icons, since that's what Plex Meta Manager has been told to do.</li> <li>The Plex UI still shows RT icons, and it always will, even though the numbers displayed are no longer RT ratings.  Plex has no idea.</li> </ul>"},{"location":"pmm/essentials/ratings/#use-trakt-rating","title":"Use Trakt Rating","text":"<p>Let's change the Trakt rating to that trakt public rating of <code>85%</code> instead, which is available via MDbList:</p> Click to see the updated config <pre><code>libraries:\nOne Movie:\noverlay_path:\n- reapply_overlays: true\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: rt_tomato\nrating2: audience\nrating2_image: rt_popcorn\nrating3: user\nrating3_image: imdb\noperations:\nmass_critic_rating_update: mdb_trakt\nmass_audience_rating_update: tmdb\nmass_user_rating_update: imdb\n</code></pre> <ul> <li>under <code>operations</code> the attribute <code>mass_critic_rating_update</code> was changed to <code>mdb_trakt</code> from <code>trakt_user</code>. (This step requires MDBList to be configured)</li> </ul> <p>When the above is run you should get:</p> <p></p> <ul> <li>Note how the <code>60%</code> in <code>rating1</code> became <code>85%</code></li> </ul>"},{"location":"pmm/essentials/ratings/#use-proper-images","title":"Use Proper Images","text":"<p>Now, finally, let's make the poster rating images match the numbers we put in there:</p> Click to see the updated config <pre><code>libraries:\nOne Movie:\noverlay_path:\n- reapply_overlays: true\n- pmm: ratings\ntemplate_variables:\nrating1: critic\nrating1_image: trakt\nrating2: audience\nrating2_image: tmdb\nrating3: user\nrating3_image: imdb\noperations:\nmass_critic_rating_update: mdb_trakt\nmass_audience_rating_update: tmdb\nmass_user_rating_update: imdb\n</code></pre> <ul> <li><code>rating1_image</code> was changed to <code>trakt</code> from <code>rt_score</code></li> <li><code>rating2_image</code> was changed to <code>tmdb</code> from <code>rt_popcorn</code></li> </ul> <p>When the above is run you should get:</p> <p></p> <p>This config file is the only linkage between the ratings we are setting and the icons we want displayed, as we've seen above.</p> <p>You can see that the Plex UI still shows the RT icons with the Trakt and TMDb numbers we put into the relevant fields, since again, it has no idea those numbers got changed behind its back.</p> <p>The poster displays the correct icons because we told Plex Meta Manager to do so in the config file.</p>"},{"location":"pmm/essentials/ratings/#why-do-different-images-appear-for-the-same-source","title":"Why do different Images appear for the same source?","text":"<p>As seen in the Images above the IMDb rating image says <code>250</code> instead of <code>IMDb</code> and the Rotten Tomatoes rating images has the certified fresh logo vs their normal logo.</p> <p>This is because the Star Wars: Episode IV - A New Hope is in the IMDb Top 250 list as well as being Certified Fresh by Rotten Tomatoes and that gets reflected by the rating image.</p>"},{"location":"pmm/essentials/scripts/","title":"Companion Scripts","text":"<p>Each Companion Script is a separate project that has its own Docker container and GitHub Repository.</p> Name Description Readme <code>PMM Overlay Reset</code> Script to completely remove all PMM applied Overlays. Wiki/GitHub <code>Plex Image Cleanup</code> Script to clean up Plex's Image Cache. Wiki/GitHub"},{"location":"pmm/essentials/yaml/","title":"YAML Tutorial","text":"<p>All of Plex Meta Manager's Config, Metadata, Overlay, and Playlist Files are written in the YAML data structure.</p> <p>This tutorial will help you understand the specific parts of the files.</p>"},{"location":"pmm/essentials/yaml/#example-yaml-file","title":"Example YAML File","text":"<pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: basic\n- pmm: imdb\noverlay_path:\n- pmm: ribbon\ntemplate_variables:\nuse_metacritic: false\nuse_common: false\nTV Shows:\nmetadata_path:\n- pmm: basic\n- pmm: imdb\noverlay_path:\n- pmm: ribbon\nsettings:\ncache: true\ncache_expiration: 60\nasset_directory:\n- config/movie assets\n- config/tv assets\n</code></pre>"},{"location":"pmm/essentials/yaml/#basic-yaml-syntax","title":"Basic YAML Syntax","text":"<p>A YAML format primarily uses 3 node types:</p> <ol> <li> <p>Dictionaries/Mappings:     The content of a mapping node is an unordered set of key/value node pairs, with the restriction that each of the keys is unique. YAML places no further restrictions on the nodes. </p> </li> <li> <p>Lists/Arrays:     The content of a list node is an ordered series of zero or more nodes. In particular, a sequence may contain the same node more than once. It could even contain itself. </p> </li> <li> <p>Literals (Strings, numbers, boolean, etc.):     The content of a scalar node is an opaque datum that can be presented as a series of zero or more Unicode characters.</p> </li> </ol> <p>Let us try and identify where these appear in the sample YAML file we saw earlier.</p> <pre><code># Starts with a top level Dictionary with keys `libraries` and `settings`\nlibraries:                        # Value is a Dictionary with keys `Movies` and `TV Shows`\nMovies:                         # Value is a Dictionary with keys `metadata_path` and `overlay_path`\nmetadata_path:                # Value is a List with two Items\n- pmm: basic                # List Item is a Dictionary with one key pair whose value is a String Literal\n- pmm: imdb                 # List Item is a Dictionary with one key pair whose value is a String Literal\noverlay_path:                 # Value is a List with one Item\n- pmm: ribbon               # List Item is a Dictionary with keys `pmm` and `template_variables` with `pmm`'s value a String Literal\ntemplate_variables:       # Value is a Dictionary with keys `use_metacritic` and `use_common`\nuse_metacritic: false   # Value is a Boolean Literal\nuse_common: false       # Value is a Boolean Literal\nTV Shows:                       # Value is a Dictionary with keys `metadata_path` and `overlay_path`\nmetadata_path:                # Value is a List with two Items\n- pmm: basic                # List Item is a Dictionary with one key pair whose value is a String Literal\n- pmm: imdb                 # List Item is a Dictionary with one key pair whose value is a String Literal\noverlay_path:                 # Value is a List with one Item\n- pmm: ribbon               # List Item is a Dictionary with one key pair whose value is a String Literal\nsettings:                         # Value is a Dictionary with keys `cache` and `cache_expiration`\ncache: true                     # Value is a Boolean Literal\ncache_expiration: 60            # Value is a Number Literal\nasset_directory:                # Value is a List with two Items\n- config/movie assets         # List Item is a String Literal\n- config/tv assets            # List Item is a String Literal\n</code></pre>"},{"location":"pmm/essentials/yaml/#indentation","title":"Indentation","text":"<p>A YAML file relies on whitespace and indentation to indicate nesting. The number of spaces used for indentation doesn\u2019t matter as long as they are consistent.</p> <p>It is critical to note that tab characters cannot be used for indentation in YAML files; only spaces can be used.</p> <pre><code>libraries:                        # Nesting Level 1\nMovies:                         # Nesting Level 2\nmetadata_path:                # Nesting Level 3\n- pmm: basic                # Nesting Level 4\n- pmm: imdb                 # Nesting Level 4\noverlay_path:                 # Nesting Level 3\n- pmm: ribbon               # Nesting Level 4\ntemplate_variables:       # Nesting Level 5\nuse_metacritic: false   # Nesting Level 6\nuse_common: false       # Nesting Level 6\nTV Shows:                       # Nesting Level 2\nmetadata_path:                # Nesting Level 3\n- pmm: basic                # Nesting Level 4\n- pmm: imdb                 # Nesting Level 4\noverlay_path:                 # Nesting Level 3\n- pmm: ribbon               # Nesting Level 4\nsettings:                         # Nesting Level 1\ncache: true                     # Nesting Level 2\ncache_expiration: 60            # Nesting Level 2\n</code></pre>"},{"location":"pmm/essentials/yaml/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries are used to associate key/value pairs that are unordered. Dictionaries can be nested by increasing the indentation, or new dictionaries can be created at the same level by resolving the previous one.</p> <pre><code>cache: true\ncache_expiration: 60\n</code></pre> <p>The \"keys\" are <code>cache</code> and <code>cache_expiration</code> and the \"values\" are <code>true</code> and <code>60</code> respectively.</p>"},{"location":"pmm/essentials/yaml/#in-line-dictionaries","title":"In-Line Dictionaries","text":"<p>you can represent a dictionary on a single line by using <code>{</code> and <code>}</code></p> <pre><code>settings: {cache: true, cache_expiration: 60}\n</code></pre> <p>is equivalent to</p> <pre><code>settings:\ncache: true\ncache_expiration: 60\n</code></pre>"},{"location":"pmm/essentials/yaml/#lists","title":"Lists","text":"<p>Lists in YAML are represented by using the hyphen (-) and space. They are ordered and can be embedded inside a map using indentation.</p> <pre><code>asset_directory:\n- config/movie assets\n- config/tv assets\n</code></pre> <p>The first item in the list is <code>config/movie assets</code> and the second is <code>config/tv assets</code>.</p>"},{"location":"pmm/essentials/yaml/#in-line-lists","title":"In-Line Lists","text":"<p>you can represent a dictionary on a single line by using <code>[</code> and <code>]</code></p> <pre><code>settings:\nasset_directory: [config/movie assets, config/tv assets]\n</code></pre> <p>is equivalent to</p> <pre><code>settings:\nasset_directory:\n- config/movie assets\n- config/tv assets\n</code></pre>"},{"location":"pmm/essentials/yaml/#literals","title":"Literals","text":"<p>Literals can come in multiple types:</p> <ul> <li> <p>String: any sequence of characters</p> </li> <li> <p>Number: any representation of a number</p> </li> <li> <p>Boolean: <code>true</code> or <code>false</code></p> </li> </ul>"},{"location":"pmm/essentials/yaml/#string-literals","title":"String Literals","text":"<p>The string literals do not require to be quoted. It is only important to quote them when they contain a value that can be mistaken as a special character.</p> <p>Here is an example where the string has to be quoted as <code>&amp;</code> and <code>:</code> are special characters.</p> <p>YAML Special Characters: <code>{</code>, <code>}</code>, <code>[</code>, <code>]</code>, <code>,</code>, <code>&amp;</code>, <code>:</code>, <code>*</code>, <code>#</code>, <code>?</code>, <code>|</code>, <code>-</code>, <code>&lt;</code>. <code>&gt;</code>, <code>=</code>, <code>!</code>, <code>%</code>, <code>@</code>, <code>\\</code></p> <p>There are many occurrences of these special characters where quotes are not needed but if the YAML fails to load it could easily be because one of these are unquoted.</p> <pre><code>message1: YAML &amp; JSON                 # breaks as a &amp; is a special character\nmessage2: \"YAML &amp; JSON\"               # Works as the string is quoted\nmessage: 3: YAML                      # breaks as a : is a special character\n\"message: 3\": YAML                    # Works as the key string is quoted\n</code></pre>"},{"location":"pmm/essentials/yaml/#multiline-strings","title":"Multiline Strings","text":"<p>Strings can be interpreted as multiline using the pipe (<code>|</code>) character.</p> <pre><code>message: |\nthis is\na real multiline\nmessage\n</code></pre> <p>This would be read as <code>this is\\na real multiline\\nmessage</code></p>"},{"location":"pmm/essentials/yaml/#comments","title":"Comments","text":"<p>YAML file also supports comments, unlike JSON. A comment starts with #.</p> <pre><code># Strats with a top level Dictionary with keys `libraries` and `settings`\nlibraries:                        # Value is a Dictionary with keys `Movies` and `TV Shows`\n</code></pre> <p>Everything after <code>#</code> on a line is ignored.</p>"},{"location":"pmm/essentials/yaml/#anchors-and-aliases","title":"Anchors and Aliases","text":"<p>With a lot of configuration, configuration files can become quite large.</p> <p>In YAML files, anchors (<code>&amp;</code>) and aliases (<code>*</code>) are used to avoid duplication. When writing large configurations in YAML, it is common for a specific configuration to be repeated. For example, the vars config is repeated for all three services in the following YAML snippet.</p> <pre><code>libraries:\nMovies:\nmetadata_path:\n- pmm: basic\n- pmm: imdb\noverlay_path:\n- pmm: ribbon\ntemplate_variables:\nuse_metacritic: false\nuse_common: false\nTV Shows:\nmetadata_path:\n- pmm: basic\n- pmm: imdb\noverlay_path:\n- pmm: ribbon\n</code></pre> <p>As more and more things are repeated for large configuration files, this becomes tedious.</p> <p>Anchors and aliases allow us to rewrite the same snippet without having to repeat any configuration.</p> <p>Anchors (<code>&amp;</code>) are used to define a chunk of configuration, and aliases (<code>*</code>) are used to refer to that chunk at a different part of the configuration.</p> <pre><code>libraries:\nMovies:\nmetadata_path: &amp;paths   # Anchor called `paths`\n- pmm: basic\n- pmm: imdb\noverlay_path:\n- pmm: ribbon\ntemplate_variables:\nuse_metacritic: false\nuse_common: false\nTV Shows:\nmetadata_path: *paths   # Alias to call the above `paths` section\noverlay_path:\n- pmm: ribbon\n</code></pre>"},{"location":"pmm/essentials/scripts/image-cleanup/","title":"Plex Image Cleanup","text":"<p>Your Plex folders are growing out of control. You use overlays from Plex Meta Manager (PMM) or upload lots of custom art from Title Card Maker (TCM) that you no longer want to use or need to eliminate. You don't want to perform the plex dance if you can avoid it. This script will free up gigs of space....</p> <p>As well as being able to clean the PhotoTranscoder Directory and running the Plex operations Empty Trash, Clean Bundles, and Optimize DB. </p> <p>Special Thanks to bullmoose20 for the original Plex Bloat Fix (PBF) Script this is based on.</p> <p></p> <p>This image shows which photos would be removed. Red is removed, Green is kept because it is the actively selected poster. The other two come standard from Plex when the posters are retrieved so Plex Meta Manager will not touch those either:</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#installing-plex-image-cleanup","title":"Installing Plex Image Cleanup","text":"<p>Generally, Plex Image Cleanup can be installed in one of two ways:</p> <ol> <li>Running on a system as a Python script [we will refer to this as a \"local\" install]</li> <li>Running as a Docker container</li> </ol> <p>GENERALLY SPEAKING, running as a Docker container is simpler, as you won't have to be concerned about installing Python, or support libraries, or any possible system conflicts generated by those actions.</p> <p>For this reason, it's generally recommended that you install via Docker rather than directly on the host.</p> <p>If you have some specific reason to avoid Docker, or you prefer running it as a Python script for some particular reason, then this general recommendation is not aimed at you.  It's aimed at someone who doesn't have an existing compelling reason to choose one over the other.</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#install-walkthroughs","title":"Install Walkthroughs","text":"<p>There are no detailed walkthroughs specifically for Plex Image Cleanup but the process is extremely similar to how you would do it with Plex Meta Manager.</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#local-install-overview","title":"Local Install Overview","text":"<p>Plex Image Cleanup is compatible with Python 3.11. Later versions may function but are untested.</p> <p>These are high-level steps which assume the user has knowledge of python and pip, and the general ability to troubleshoot issues. </p> <ol> <li>Clone or download and unzip the repo.</li> </ol> <p><pre><code>git clone https://github.com/meisnate12/Plex-Image-Cleanup\n</code></pre> 2. Install dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>If the above command fails, run the following command:</li> </ol> <pre><code>pip install -r requirements.txt --ignore-installed\n</code></pre> <p>At this point Plex-Image-Cleanup has been installed, and you can verify installation by running:</p> <pre><code>python plex_image_cleanup.py\n</code></pre>"},{"location":"pmm/essentials/scripts/image-cleanup/#docker-install-overview","title":"Docker Install Overview","text":""},{"location":"pmm/essentials/scripts/image-cleanup/#docker-run","title":"Docker Run:","text":"<p><pre><code>docker run -v &lt;PATH_TO_CONFIG&gt;:/config:rw -v &lt;PATH_TO_PLEX&gt;:/plex:rw meisnate12/plex-image-cleanup\n</code></pre> * The <code>-v &lt;PATH_TO_CONFIG&gt;:/config:rw</code> and <code>-v &lt;PATH_TO_PLEX&gt;:/plex:rw</code> flags mount the location you choose as a persistent volumes to store your files and give access to plex.   * Change <code>&lt;PATH_TO_CONFIG&gt;</code> to a folder where your .env and other files are.   * Change <code>&lt;PATH_TO_PLEX&gt;</code> to the folder where your Plex Folder is (It contains folders: Cache, Metadata, Plug-in Support).   * If your directory has spaces (such as \"My Documents\"), place quotation marks around your directory pathing as shown here: <code>-v \"&lt;PATH_TO_CONFIG&gt;:/config:rw\"</code></p> <p>Example Docker Run command:</p> <p>These docs are assuming you have a basic understanding of Docker concepts.  One place to get familiar with Docker would be the official tutorial.</p> <pre><code>docker run -v \"X:\\Media\\Plex Image Cleanup\\config:/config:rw\" -v \"X:\\Plex Media Server:/plex:rw\" meisnate12/plex-image-cleanup\n</code></pre>"},{"location":"pmm/essentials/scripts/image-cleanup/#docker-compose","title":"Docker Compose:","text":"<p>Example Docker Compose file: <pre><code>version: \"2.1\"\nservices:\nplex-image-cleanup:\nimage: meisnate12/plex-image-cleanup\ncontainer_name: plex-image-cleanup\nenvironment:\n- TZ=TIMEZONE #optional\nvolumes:\n- /path/to/config:/config\n- /path/to/plex:/plex\nrestart: unless-stopped\n</code></pre></p>"},{"location":"pmm/essentials/scripts/image-cleanup/#dockerfile","title":"Dockerfile","text":"<p>A <code>Dockerfile</code> is included within the GitHub repository for those who require it, although this is only suggested for those with knowledge of dockerfiles. The official Plex Image Cleanup build is available on the Dockerhub Website.</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#usage","title":"Usage","text":"<p>When running Plex Image Cleanup, make sure that you are not running any tools which may touch posters, backgrounds or title card images - namely Plex Meta Manager or TitleCardMaker.</p> <p>It is recommended to schedule Plex Image Cleanup after the above tools or Plex's Scheduled Tasks.</p> <p>An example schedule would be: * 00:00-02:00 - TitleCardMaker * 02:00-05:00 - Plex Scheduled Tasks * 05:00-07:00 - Plex Meta Manager * 07:00-09:00 - Plex Image Cleanup</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#tips","title":"Tips","text":"<ul> <li>Ensure you have proper permissions to delete/rename or Plex Meta Manager will fail</li> <li>For performance purposes, it's recommended to run locally so that accessing the files is not done over a network share</li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#global-options","title":"Global Options","text":"<p>Plex Image Cleanup has multiple Global Options to change how it runs these are set in 3 different ways listed in priority order:</p> <ol> <li>Setting the Environment Variable.</li> <li>Adding the Environment Variables to <code>config/.env</code> </li> <li><code>example.env</code> is included as an example but is not read by Plex Meta Manager it will only read a file specifically called <code>.env</code>.</li> <li>Use the Shell Command when launching.</li> </ol>"},{"location":"pmm/essentials/scripts/image-cleanup/#example-env-file","title":"Example .env File","text":"<pre><code>PLEX_PATH=C:\\Plex Media Server\nMODE=report\nSCHEDULE=\nPLEX_URL=http://192.168.1.12:32400\nPLEX_TOKEN=123456789\nDISCORD=https://discord.com/api/webhooks/###################/####################################################################\nTIMEOUT=600\nSLEEP=60\nIGNORE_RUNNING=False\nLOCAL_DB=False\nUSE_EXISTING=False\nPHOTO_TRANSCODER=False\nEMPTY_TRASH=False\nCLEAN_BUNDLES=False\nOPTIMIZE_DB=False\nTRACE=False\nLOG_REQUESTS=False\n</code></pre>"},{"location":"pmm/essentials/scripts/image-cleanup/#base-options","title":"Base Options","text":""},{"location":"pmm/essentials/scripts/image-cleanup/#plex-path","title":"Plex Path","text":"<p>The only required Option is the <code>Plex Path</code> Option which is the Plex Config Folder containing the servers Metadata including <code>Cache</code>, <code>Metadata</code>, and <code>Plug-in Support</code>.</p> <p>To set the <code>Plex Path</code> for the run:  * Environment Variable: <code>PLEX_PATH=C:\\Plex Media Server</code> * Shell Command: <code>-p \"C:\\Plex Media Server\"</code> or <code>--plex \"C:\\Plex Media Server\"</code> * Will also check <code>/plex</code> relative to the base directory of the script if neither of the above are specified.</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#mode","title":"Mode","text":"<p>How Plex Image Cleanup runs depends on the <code>Mode</code> Option that's currently set for that run.</p> <ul> <li><code>report</code>: Metadata Directory File changes will be reported but not performed.</li> <li><code>move</code>: Metadata Directory Files will be moved to the PIC Restore Directory. (CAN BE RESTORED)</li> <li><code>restore</code>: Restores the Metadata Directory Files from the PIC Restore Directory.</li> <li><code>clear</code>: Clears out the PIC Restore Directory. (CANNOT BE RESTORED)</li> <li><code>remove</code>: Metadata Directory Files will be removed. (CANNOT BE RESTORED)</li> <li><code>nothing</code>: Metadata Directory Files will not even be looked at.</li> </ul> <p>To set the Global <code>Mode</code> for the run:  * Environment Variable: <code>MODE=remove</code> * Shell Command: <code>-m remove</code> or <code>--mode remove</code></p>"},{"location":"pmm/essentials/scripts/image-cleanup/#database","title":"Database","text":"<p>The script needs to query the server's plex database to make sure it doesn't remove actively selected images. </p>"},{"location":"pmm/essentials/scripts/image-cleanup/#download-from-plex-api","title":"Download From Plex API","text":"<p>By default, the script will expect to connect to your Plex Server to download the Database using your <code>Plex URL</code> and <code>Plex Token</code> Options (Finding a Token).</p> <ul> <li>Environment Variables: </li> <li><code>PLEX_URL=http://192.168.1.12:32400</code></li> <li><code>PLEX_TOKEN=123456789</code></li> <li>Shell Commands: </li> <li><code>-u \"http://192.168.1.12:32400\"</code> or <code>--url \"http://192.168.1.12:32400\"</code></li> <li><code>-t \"123456789\"</code> or <code>--token \"123456789\"</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#copy-from-local","title":"Copy From Local","text":"<p>Alternatively the database can be copied from your local config folder you supplied in the <code>Plex Path</code> Option by using the <code>Local DB</code> Option. </p> <ul> <li>Environment Variable: <code>LOCAL_DB=True</code></li> <li>Shell Command: <code>-l</code> or <code>--local</code></li> </ul> <p>IMPORTANT! When Copying the Local Database, it is recommended to restart Plex before running this script and to make sure Plex is idle.</p> <p>Restarting allows for all temp SQLite files to be written to the primary Plex DB ensuring that all currently selected posters are properly known and preserved.</p> <p>The script will not run when the temp SQLite files are found. To ignore this error, use the <code>Ignore Running</code> Option.</p> <ul> <li>Environment Variable: <code>IGNORE_RUNNING=True</code> </li> <li>Shell Command: <code>-i</code> or <code>--ignore</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#use-existing","title":"Use Existing","text":"<p>A previously downloaded or copied database can be used if it's less than 2 hours old by using the <code>Use Existing</code> Option. If the database is more than 2 hours old a new one will be downloaded or copied.</p> <ul> <li>Environment Variable: <code>USE_EXISTING=True</code></li> <li>Shell Command: <code>-e</code> or <code>--existing</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#other-operations","title":"Other Operations","text":"<p>In addition to cleaning the Plex Metadata Directory for custom images the script can clean out your PhotoTranscoder Directory, Empty Trash, Clean Bundles, and Optimize DB.</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#photo-transcoder","title":"Photo Transcoder","text":"<ul> <li>Environment Variable: <code>PHOTO_TRANSCODER=True</code></li> <li>Shell Command: <code>-pt</code> or <code>--photo-transcoder</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#empty-trash","title":"Empty Trash","text":"<ul> <li>Environment Variable: <code>EMPTY_TRASH=True</code></li> <li>Shell Command: <code>-et</code> or <code>--empty-trash</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#clean-bundles","title":"Clean Bundles","text":"<ul> <li>Environment Variable: <code>CLEAN_BUNDLES=True</code></li> <li>Shell Command: <code>-cb</code> or <code>--clean-bundles</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#optimize-db","title":"Optimize DB","text":"<ul> <li>Environment Variable: <code>OPTIMIZE_DB=True</code></li> <li>Shell Command: <code>-od</code> or <code>--optimize-db</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#other-options","title":"Other Options","text":""},{"location":"pmm/essentials/scripts/image-cleanup/#discord-url","title":"Discord URL","text":"<p>Discord Webhook URL to send notifications to.</p> <ul> <li>Environment Variable: <code>DISCORD=https://discord.com/api/webhooks/###/###</code></li> <li>Shell Command: <code>-d \"https://discord.com/api/webhooks/###/###\"</code> or <code>--discord \"https://discord.com/api/webhooks/###/###\"</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#timeout","title":"Timeout","text":"<p>Connection Timeout in seconds that's greater than 0.</p> <ul> <li>Default: <code>600</code></li> <li>Environment Variable: <code>TIMEOUT=1000</code></li> <li>Shell Command: <code>-ti 1000</code> or <code>--timeout 1000</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#sleep","title":"Sleep","text":"<p>Sleep Timer between Empty Trash, Clean Bundles, and Optimize DB in seconds that's greater than 0 .</p> <ul> <li>Default: <code>60</code></li> <li>Environment Variable: <code>SLEEP=100</code></li> <li>Shell Command: <code>-s 100</code> or <code>--sleep 100</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#trace","title":"Trace","text":"<p>Run with extra trace logs.</p> <ul> <li>Environment Variable: <code>TRACE=True</code></li> <li>Shell Command: <code>-tr</code> or <code>--trace</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#log-requests","title":"Log Requests","text":"<p>Run with every request and file action logged.</p> <ul> <li>Environment Variable: <code>LOG_REQUESTS=True</code></li> <li>Shell Command: <code>-lr</code> or <code>--log-requests</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#continuous-schedule","title":"Continuous Schedule","text":"<p>Plex Image Cleanup can be run either immediately or on a schedule. The default behavior is to run immediately to run using a schedule simply pass in the <code>Schedule</code> Option.</p> <p>Add a Schedule Block to the <code>Schedule</code> Option to run Plex Image Cleanup using a continuous schedule.</p> <ul> <li>Shell Command: <code>-sc</code> or <code>--schedule \"05:00|weekly(sunday)\"</code></li> <li>Environment Variable: <code>SCHEDULE=\"05:00|weekly(sunday)\"</code></li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#schedule-blocks","title":"Schedule Blocks","text":"<p>Schedule Blocks define how and when Plex Meta Manager will run.</p> <p>Each Schedule Blocks has 2 required parts (<code>time</code> and <code>frequency</code>) and 1 optional part (<code>options</code>) all separated with a <code>|</code>. (Example: <code>time|frequency</code> or <code>time|frequency|options</code>)</p> <p>You can have multiple Schedule Blocks separated with a <code>,</code> (<code>time|frequency,time|frequency|options</code>).</p>"},{"location":"pmm/essentials/scripts/image-cleanup/#schedule-block-parts","title":"Schedule Block Parts","text":"<ul> <li><code>time</code>: Time in the day the run will occur.</li> <li>Time: <code>HH:MM</code> 24-hour format</li> <li>Examples: <code>00:00</code>-<code>23:59</code> </li> <li><code>frequency</code>: Frequency to schedule the run. </li> <li>Frequencies: <code>daily</code>, <code>weekly(day of week)</code>, or <code>monthly(day of month)</code></li> <li>Examples: <code>weekly(sunday)</code> or <code>monthly(1)</code></li> <li><code>options</code>: Options changed for the run in the format <code>option=value</code>, with multiple options separated with a <code>;</code>. </li> <li>Options: <code>mode</code>, <code>photo-transcoder</code>, <code>empty-trash</code>, <code>clean-bundles</code>, or <code>optimize-db</code></li> <li>Examples: <code>mode=nothing</code> or <code>photo-transcoder=true</code></li> <li>NOTE: This overrides the currently set global value for just this one scheduled run</li> </ul>"},{"location":"pmm/essentials/scripts/image-cleanup/#schedule-block-example","title":"Schedule Block Example","text":"<pre><code>SCHEDULE=08:00|weekly(sunday)|mode=clear,09:00|weekly(sunday)|mode=move,10:00|monthly(1)|mode=nothing;photo-transcoder=true\n</code></pre> <p>The example above is detailed out below to better explain how it works:</p> <ul> <li>Run at 8:00 AM on Sundays with the Options: <code>mode: clear</code></li> <li><code>08:00|weekly(sunday)|mode=remove</code></li> <li><code>time |frequency     |options</code></li> <li>Run at 9:00 AM on Sundays with the Options: <code>mode: move</code></li> <li><code>09:00|weekly(sunday)|mode=move</code></li> <li><code>time |frequency     |options</code></li> <li>Run at 10:00 AM on the 1st of each month with the Options: <code>mode: nothing</code> and <code>photo-transcoder: true</code> </li> <li><code>10:00|monthly(1)|mode=nothing;photo-transcoder=true</code></li> <li><code>time |frequency |options</code></li> </ul>"},{"location":"pmm/essentials/scripts/overlay-reset/","title":"Plex Meta Manager Overlay Reset","text":"<p>Plex Meta Manager Overlay Reset is an open source Python 3 project that has been created to Remove all Overlays placed on a Plex Library.</p>"},{"location":"pmm/essentials/scripts/overlay-reset/#installing-pmm-overlay-reset","title":"Installing PMM Overlay Reset","text":"<p>Generally, PMM Overlay Reset can be installed in one of two ways:</p> <ol> <li>Running on a system as a Python script [we will refer to this as a \"local\" install]</li> <li>Running as a Docker container</li> </ol> <p>GENERALLY SPEAKING, running as a Docker container is simpler, as you won't have to be concerned about installing Python, or support libraries, or any possible system conflicts generated by those actions.</p> <p>For this reason, it's generally recommended that you install via Docker rather than directly on the host.</p> <p>If you have some specific reason to avoid Docker, or you prefer running it as a Python script for some particular reason, then this general recommendation is not aimed at you.  It's aimed at someone who doesn't have an existing compelling reason to choose one over the other.</p>"},{"location":"pmm/essentials/scripts/overlay-reset/#install-walkthroughs","title":"Install Walkthroughs","text":"<p>There are no detailed walkthroughs specifically for PMM Overlay Reset but the process is extremely similar to how you would do it with Plex Meta Manager.</p>"},{"location":"pmm/essentials/scripts/overlay-reset/#local-install-overview","title":"Local Install Overview","text":"<p>PMM Overlay Reset is compatible with Python 3.11. Later versions may function but are untested.</p> <p>These are high-level steps which assume the user has knowledge of python and pip, and the general ability to troubleshoot issues. </p> <ol> <li>Clone or download and unzip the repo.</li> </ol> <p><pre><code>git clone https://github.com/meisnate12/PMM-Overlay-Reset\n</code></pre> 2. Install dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>If the above command fails, run the following command:</li> </ol> <pre><code>pip install -r requirements.txt --ignore-installed\n</code></pre> <p>At this point PMM-Overlay-Reset has been installed, and you can verify installation by running:</p> <pre><code>python pmm_overlay_reset.py\n</code></pre>"},{"location":"pmm/essentials/scripts/overlay-reset/#docker-install-overview","title":"Docker Install Overview","text":""},{"location":"pmm/essentials/scripts/overlay-reset/#docker-run","title":"Docker Run:","text":"<p><pre><code>docker run -v &lt;PATH_TO_CONFIG&gt;:/config:rw meisnate12/pmm-overlay-reset\n</code></pre> * The <code>-v &lt;PATH_TO_CONFIG&gt;:/config:rw</code> flag mounts the location you choose as a persistent volume to store your files.   * Change <code>&lt;PATH_TO_CONFIG&gt;</code> to a folder where your .env and other files are.   * If your directory has spaces (such as \"My Documents\"), place quotation marks around your directory pathing as shown here: <code>-v \"&lt;PATH_TO_CONFIG&gt;:/config:rw\"</code></p> <p>Example Docker Run command:</p> <p>These docs are assuming you have a basic understanding of Docker concepts.  One place to get familiar with Docker would be the official tutorial.</p> <pre><code>docker run -v \"X:\\Media\\PMM Overlay Reset\\config:/config:rw\" meisnate12/pmm-overlay-reset\n</code></pre>"},{"location":"pmm/essentials/scripts/overlay-reset/#docker-compose","title":"Docker Compose:","text":"<p>Example Docker Compose file: <pre><code>version: \"2.1\"\nservices:\npmm-overlay-reset:\nimage: meisnate12/pmm-overlay-reset\ncontainer_name: pmm-overlay-reset\nenvironment:\n- TZ=TIMEZONE #optional\nvolumes:\n- /path/to/config:/config\nrestart: unless-stopped\n</code></pre></p>"},{"location":"pmm/essentials/scripts/overlay-reset/#dockerfile","title":"Dockerfile","text":"<p>A <code>Dockerfile</code> is included within the GitHub repository for those who require it, although this is only suggested for those with knowledge of dockerfiles. The official PMM Overlay Reset build is available on the Dockerhub Website.</p>"},{"location":"pmm/essentials/scripts/overlay-reset/#options","title":"Options","text":"<p>Each option can be applied in three ways:</p> <ol> <li>Use the Shell Command when launching.</li> <li>Setting the Environment Variable.</li> <li>Adding the Environment Variables to <code>config/.env</code> </li> </ol> Option Description Required Plex URl Plex URL of the Server you want to connect to.Shell Command: <code>-u</code> or <code>--url \"http://192.168.1.12:32400\"</code>Environment Variable: <code>PLEX_URL=http://192.168.1.12:32400</code> \u2705 Plex Token Plex Token of the Server you want to connect to.Shell Command: <code>-t</code> or <code>--token 123456789</code>Environment Variable: <code>PLEX_TOKEN=123456789</code> \u2705 Plex Library Plex Library Name you want to reset.Shell Command: <code>-l</code> or <code>--library Movies</code>Environment Variable: <code>PLEX_LIBRARY=Movies</code> \u2705 PMM Asset Folder Plex Meta Manager Asset Folder to Scan for restoring posters.Shell Command: <code>-a</code> or <code>--asset \"C:\\Plex Meta Manager\\config\\assets\"</code>Environment Variable: <code>PMM_ASSET=C:\\Plex Meta Manager\\config\\assets</code> \u274c PMM Original Folder Plex Meta Manager Original Folder to Scan for restoring posters.Shell Command: <code>-o</code> or <code>--original \"C:\\Plex Meta Manager\\config\\overlays\\Movies Original Posters\"</code>Environment Variable: <code>PMM_ORIGINAL=C:\\Plex Meta Manager\\config\\overlays\\Movies Original Posters</code> \u274c TMDb V3 API Key TMDb V3 API Key for restoring posters from TMDb.Shell Command: <code>-ta</code> or <code>--tmdbapi 123456789123456789</code>Environment Variable: <code>TMDBAPI=123456789123456789</code> \u274c Start From Plex Item Title to Start restoring posters from.Shell Command: <code>-st</code> or <code>--start \"Mad Max\"</code>Environment Variable: <code>START=Mad Max</code> \u274c Items Restore specific Plex Items by Title. Can use a bar-separated (<code>|</code>) list.Shell Command: <code>-it</code> or <code>--items \"Mad Max|Mad Max 2\"</code>Environment Variable: <code>ITEMS=Mad Max|Mad Max 2</code> \u274c Timeout Timeout can be any number greater then 0. Default: <code>600</code>Shell Command: <code>-ti</code> or <code>--timeout 1000</code>Environment Variable: <code>TIMEOUT=1000</code> \u274c Dry Run Run as a Dry Run without making changes in Plex.Shell Command: <code>-d</code> or <code>--dry</code>Environment Variable: <code>DRY_RUN=True</code> \u274c Flat Assets PMM Asset Folder uses Flat Assets Image Paths.Shell Command: <code>-f</code> or <code>--flat</code>Environment Variable: <code>PMM_FLAT=True</code> \u274c Reset Season Posters Restore Season posters during run.Shell Command: <code>-s</code> or <code>--season</code>Environment Variable: <code>SEASON=True</code> \u274c Reset Episode Posters Restore Episode posters during run.Shell Command: <code>-e</code> or <code>--episode</code>Environment Variable: <code>EPISODE=True</code> \u274c Ignore Automatic Resume Ignores the automatic resume.Shell Command: <code>-ir</code> or <code>--ignore-resume</code>Environment Variable: <code>IGNORE_RESUME=True</code> \u274c Trace Logs Run with extra trace logs.Shell Command: <code>-tr</code> or <code>--trace</code>Environment Variable: <code>TRACE=True</code> \u274c Log Requests Run with every request logged.Shell Command: <code>-lr</code> or <code>--log-requests</code>Environment Variable: <code>LOG_REQUESTS=True</code> \u274c"},{"location":"pmm/essentials/scripts/overlay-reset/#example-env-file","title":"Example .env File","text":"<pre><code>PLEX_URL=http://192.168.1.12:32400\nPLEX_TOKEN=123456789\nPLEX_LIBRARY=Movies\nPMM_ASSET=C:\\Plex Meta Manager\\config\\assets\nPMM_ORIGINAL=C:\\Plex Meta Manager\\config\\overlays\\Movies Original Posters\nTMDBAPI=123456789123456789\nSTART=\nITEMS=\nTIMEOUT=600\nDRY_RUN=True\nPMM_FLAT=False\nSEASON=True\nEPISODE=True\nIGNORE_RESUME=False\nTRACE=False\nLOG_REQUESTS=False\n</code></pre>"},{"location":"pmm/install/installation/","title":"Installing Plex Meta Manager","text":"<p>Generally, Plex Meta Manager can be installed in one of two ways:</p> <ol> <li>Running on a system as a Python script [we will refer to this as a \"local\" install]</li> <li>Running as a Docker container</li> </ol> <p>GENERALLY SPEAKING, running as a Docker container is simpler, as you won't have to be concerned about installing Python, or support libraries, or any possible system conflicts generated by those actions.</p> <p>For this reason, it's generally recommended that you install via Docker rather than directly on the host.</p> <p>If you have some specific reason to avoid Docker, or you prefer running it as a Python script for some particular reason, then this general recommendation is not aimed at you.  It's aimed at someone who doesn't have an existing compelling reason to choose one over the other.</p>"},{"location":"pmm/install/installation/#install-walkthroughs","title":"Install Walkthroughs","text":"<p>The installation overviews on this page are aimed at users who have previous experience of installing services via command-line terminal commands.</p> <p>For those who need full installation walkthroughs, please refer to the following walkthrough guides:</p> <ul> <li>Local Walkthrough</li> <li>Docker Walkthrough</li> </ul> <p>If you are using unRAID, Kubernetes, QNAP, or Synology refer to the following basic guide to container setup for each system: this doesn't cover the Plex Meta Manager setup specifics found in the guides above</p> <ul> <li>unRAID Walkthrough</li> <li>Kubernetes Walkthrough</li> <li>QNAP Walkthrough</li> <li>Synology Walkthrough</li> </ul>"},{"location":"pmm/install/installation/#local-install-overview","title":"Local Install Overview","text":"<p>Plex Meta Manager is compatible with Python 3.7 through 3.11. Later versions may function but are untested.</p> Tip <p>These are high-level steps which assume the user has knowledge of python and pip, and the general ability to troubleshoot issues. For a detailed step-by-step walkthrough, refer to the Local Walkthrough guide.</p> <ol> <li>Clone or download and unzip the repo.</li> </ol> <p><pre><code>git clone https://github.com/meisnate12/Plex-Meta-Manager\n</code></pre> 2. Install dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>If the above command fails, run the following command:</li> </ol> <pre><code>pip install -r requirements.txt --ignore-installed\n</code></pre> <p>At this point Plex Meta Manager has been installed, and you can verify installation by running:</p> <pre><code>python plex_meta_manager.py\n</code></pre>"},{"location":"pmm/install/installation/#docker-install-overview","title":"Docker Install Overview","text":""},{"location":"pmm/install/installation/#docker-run","title":"Docker Run:","text":"<pre><code>docker run -it -v &lt;PATH_TO_CONFIG&gt;:/config:rw meisnate12/plex-meta-manager\n</code></pre> <ul> <li> <p>The <code>-it</code> flag allows you to interact with Plex Meta Manager when needed (such as for Trakt or MyAnimeList authentication).</p> </li> <li> <p>The <code>-v &lt;PATH_TO_CONFIG&gt;:/config:rw</code> flag mounts the location you choose as a persistent volume to store your files.</p> <ul> <li>Change <code>&lt;PATH_TO_CONFIG&gt;</code> to a folder where your config.yml and other files are.</li> <li>The docker image defaults to running the configuration file named <code>config.yml</code> which resides in your persistent volume.</li> <li>If your directory has spaces (such as \"My Documents\"), place quotation marks around your directory pathing as shown here: <code>-v \"&lt;PATH_TO_CONFIG&gt;:/config:rw\"</code></li> </ul> </li> </ul> <p>Example Docker Run command:</p> <p>These docs are assuming you have a basic understanding of Docker concepts.  One place to get familiar with Docker would be the official tutorial.</p> <pre><code>docker run -it -v \"X:\\Media\\Plex Meta Manager\\config:/config:rw\" meisnate12/plex-meta-manager\n</code></pre>"},{"location":"pmm/install/installation/#docker-compose","title":"Docker Compose:","text":"<p>Example Docker Compose file: <pre><code>version: \"2.1\"\nservices:\nplex-meta-manager:\nimage: meisnate12/plex-meta-manager\ncontainer_name: plex-meta-manager\nenvironment:\n- TZ=TIMEZONE #optional\nvolumes:\n- /path/to/config:/config\nrestart: unless-stopped\n</code></pre></p>"},{"location":"pmm/install/installation/#dockerfile","title":"Dockerfile","text":"<p>A <code>Dockerfile</code> is included within the GitHub repository for those who require it, although this is only suggested for those with knowledge of dockerfiles. The official Plex Meta Manager build is available on the Dockerhub Website.</p>"},{"location":"pmm/install/installation/#runtime-flags-and-env-vars","title":"Runtime flags and ENV vars","text":"<p>Plex Meta Manager's behavior can be modified in a variety of ways using either runtime flags or environnment variables.  These flags and vars are detailed here.</p> <p>For example, this docker-compose would create a container that runs immediately upon start (rather than waiting until 5AM), uses a particular config file, processes only overlays on only one library, and exits when done: <pre><code>version: \"2.1\"\nservices:\nplex-meta-manager:\nimage: meisnate12/plex-meta-manager\ncontainer_name: plex-meta-manager\nenvironment:\n- PMM_RUN=true\n- PMM_CONFIG=/config/special-config.yml\n- PMM_OVERLAYS=true\n- PMM_LIBRARIES=Movies\nvolumes:\n- /path/to/config:/config\n</code></pre></p>"},{"location":"pmm/install/guides/assets/","title":"Image Asset Directory Guide","text":"<p>The Image Asset Directories can be used to update the posters and backgrounds of collections, movies, shows, seasons, and episodes.</p> <p>You can specify your asset folders under the <code>settings</code> attribute <code>asset_directory</code>:</p> <pre><code>settings:\nasset_directory: config/assets\n</code></pre> <p>To use multiple Image Asset Directories specify the directories as a YAML list:</p> <pre><code>settings:\nasset_directory:\n- config/assets\n- config/more_assets\n- config/assets_ahoy\n</code></pre> <ul> <li>You can specify an Image Asset Directory per Metadata/Playlist/Overlay File when calling the file. See Path Types for how to define them.</li> <li>By default [if no <code>asset_directory</code> is specified], the program will look in the same folder as your <code>config.yml</code> for a folder called <code>assets</code>.</li> </ul>"},{"location":"pmm/install/guides/assets/#how-assets-are-run","title":"How assets are run","text":"<p>Assets are searched for only at specific times.</p> <ol> <li>Collection and Playlist assets are searched for whenever that collection/playlist is run.</li> <li> <p>Item assets and Unmanaged Collections assets are searched for whenever the <code>assets_for_all</code> Library Operation is active.</p> </li> <li> <p>If you want to silence the <code>Asset Warning: No poster or background found in an assets folder for 'TITLE'</code> you can use the <code>show_missing_assets</code> Setting Attribute:   <pre><code>settings:\nshow_missing_assets: false\n</code></pre></p> </li> </ol>"},{"location":"pmm/install/guides/assets/#asset-naming","title":"Asset Naming","text":"<p>The table below shows the asset folder path structures that will be searched for. There are two options for how Plex Meta Manager looks at the files inside your Asset Directories. Choose an option with the <code>asset_folders</code> Setting Attribute.  Note that <code>asset_folders</code> is a toggle; you can't put some images in folders and some not in a context where it is enabled.</p> Image Type Asset Folders Image Paths<code>asset_folders: true</code> Flat Assets Image Paths<code>asset_folders: false</code> Collection/Movie/Show poster <code>assets/ASSET_NAME/poster.ext</code> <code>assets/ASSET_NAME.ext</code> Collection/Movie/Show background <code>assets/ASSET_NAME/background.ext</code> <code>assets/ASSET_NAME_background.ext</code> Season poster <code>assets/ASSET_NAME/Season##.ext</code> <code>assets/ASSET_NAME_Season##.ext</code> Season background <code>assets/ASSET_NAME/Season##_background.ext</code> <code>assets/ASSET_NAME_Season##_background.ext</code> Episode poster <code>assets/ASSET_NAME/S##E##.ext</code> <code>assets/ASSET_NAME_S##E##.ext</code> Episode background <code>assets/ASSET_NAME/S##E##_background.ext</code> <code>assets/ASSET_NAME_S##E##_background.ext</code> <ul> <li> <p>For Collections replace <code>ASSET_NAME</code> with the mapping name used with the collection unless <code>name_mapping</code> is specified, which you would then use what's specified in <code>name_mapping</code>.</p> </li> <li> <p>For Movies replace <code>ASSET_NAME</code> with the exact name of the folder the video file is stored in.</p> </li> <li>i.e. if you have <code>Movies/Star Wars (1977)/Star Wars (1977) [1080p].mp4</code> then your asset directory would look at either <code>assets/Star Wars (1977)/poster.png</code> or <code>assets/Star Wars (1977).png</code> for the poster.</li> <li>For Shows, Seasons, and Episodes replace <code>ASSET_NAME</code> with the exact name of the folder for the show as a whole.</li> <li>i.e. if you have <code>Shows/Game of Thrones/Season 1/Game of Thrones - S01E01.mp4</code> then your asset directory would look at either <code>assets/Game of Thrones/poster.png</code> or <code>assets/Game of Thrones.png</code> for the poster.</li> <li> <p>For Seasons replace <code>##</code> with the zero padded season number (00 for specials)</p> </li> <li> <p>For Episodes replacing the first <code>##</code> with the zero padded season number (00 for specials), the second <code>##</code> with the zero padded episode number</p> </li> <li> <p>Replace <code>.ext</code> with the image extension</p> </li> <li> <p>When <code>asset_folders</code> is set to <code>true</code> movie/show folders can be nested inside other folders, but you must specify how deep you want to search because the more levels to search the longer it takes.</p> </li> <li> <p>You can specify how deep you want to scan by using the <code>asset_depth</code> Setting Attribute.</p> </li> </ul> <p>Here's an example config folder structure with an assets directory with <code>asset_folders</code> set to true and false.</p>"},{"location":"pmm/install/guides/assets/#asset-folders-asset_folders-true","title":"Asset Folders <code>asset_folders: true</code>","text":"<pre><code>config\n\u251c\u2500\u2500 config.yml\n\u251c\u2500\u2500 Movies.yml\n\u251c\u2500\u2500 TV Shows.yml\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 The Lord of the Rings\n\u2502       \u251c\u2500\u2500 poster.png\n\u2502       \u251c\u2500\u2500 background.png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Fellowship of the Ring (2001)\n\u2502       \u251c\u2500\u2500 poster.png\n\u2502       \u251c\u2500\u2500 background.png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Two Towers (2002)\n\u2502       \u251c\u2500\u2500 poster.png\n\u2502       \u251c\u2500\u2500 background.png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Return of the King (2003)\n\u2502       \u251c\u2500\u2500 poster.png\n\u2502       \u251c\u2500\u2500 background.png\n\u2502   \u251c\u2500\u2500 Star Wars (Animated)\n\u2502       \u251c\u2500\u2500 poster.png\n\u2502       \u251c\u2500\u2500 background.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars\n\u2502       \u251c\u2500\u2500 poster.png\n\u2502       \u251c\u2500\u2500 background.png\n\u2502       \u251c\u2500\u2500 Season00.png\n\u2502       \u251c\u2500\u2500 Season01.png\n\u2502       \u251c\u2500\u2500 Season02.png\n\u2502       \u251c\u2500\u2500 Season03.png\n\u2502       \u251c\u2500\u2500 Season04.png\n\u2502       \u251c\u2500\u2500 Season05.png\n\u2502       \u251c\u2500\u2500 Season06.png\n\u2502       \u251c\u2500\u2500 Season07.png\n\u2502       \u251c\u2500\u2500 S07E01.png\n\u2502       \u251c\u2500\u2500 S07E02.png\n\u2502       \u251c\u2500\u2500 S07E03.png\n\u2502       \u251c\u2500\u2500 S07E04.png\n\u2502       \u251c\u2500\u2500 S07E05.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels\n\u2502       \u251c\u2500\u2500 poster.png\n\u2502       \u251c\u2500\u2500 background.png\n\u2502       \u251c\u2500\u2500 Season01.png\n\u2502       \u251c\u2500\u2500 Season01_background.png\n\u2502       \u251c\u2500\u2500 Season02.png\n\u2502       \u251c\u2500\u2500 Season02_background.png\n\u2502       \u251c\u2500\u2500 Season03.png\n\u2502       \u251c\u2500\u2500 Season03_background.png\n\u2502       \u251c\u2500\u2500 Season04.png\n\u2502       \u251c\u2500\u2500 Season04_background.png\n</code></pre>"},{"location":"pmm/install/guides/assets/#flat-assets-asset_folders-false","title":"Flat Assets <code>asset_folders: false</code>","text":"<pre><code>config\n\u251c\u2500\u2500 config.yml\n\u251c\u2500\u2500 Movies.yml\n\u251c\u2500\u2500 TV Shows.yml\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 The Lord of the Rings.png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings_background.png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Fellowship of the Ring (2001).png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Fellowship of the Ring (2001)_background.png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Two Towers (2002).png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Two Towers (2002)_background.png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Return of the King (2003).png\n\u2502   \u251c\u2500\u2500 The Lord of the Rings The Return of the King (2003)_background.png\n\u2502   \u251c\u2500\u2500 Star Wars (Animated).png\n\u2502   \u251c\u2500\u2500 Star Wars (Animated)_background.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_background.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season00.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season01.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season02.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season03.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season04.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season05.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season06.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_Season07.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_S07E01.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_S07E02.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_S07E03.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_S07E04.png\n\u2502   \u251c\u2500\u2500 Star Wars The Clone Wars_S07E05.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_background.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season01.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season01_background.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season02.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season02_background.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season03.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season03_background.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season04.png\n\u2502   \u251c\u2500\u2500 Star Wars Rebels_Season04_background.png\n</code></pre>"},{"location":"pmm/install/guides/contributor/","title":"Contributor Guide","text":""},{"location":"pmm/install/guides/contributor/#how-to-set-up-a-local-wiki-server","title":"How to set up a local Wiki Server","text":"<ol> <li>In addition to your normal <code>python -m pip install -r requirements.txt</code> to install requirements you'll also need to install the docs <code>requirements.txt</code> by running <code>python -m pip install -r docs/requirements.txt</code>.</li> <li>Run <code>docs\\make.bat html</code> from the main PMM directory to build the html wiki files.</li> <li>Run <code>sphinx-reload docs</code> to boot up the Reloading Server at <code>http://localhost:5500</code></li> <li>Now you can make changes inside the docs folder to update the Wiki and when you want to see the changes just run <code>docs\\make.bat html</code> again and then refresh that page.</li> </ol>"},{"location":"pmm/install/guides/docker/","title":"Docker Walkthrough","text":"<p>This article will walk you through getting Plex Meta Manager set up and running via Docker.  It will cover:</p> <ol> <li>Installing Docker</li> <li>Retrieving the image</li> <li>Setting up the initial config file</li> <li>Setting up a metadata file and creating a couple sample collections</li> <li>Creating a docker container that will keep running in the background</li> </ol> <p>The specific steps you will be taking:</p> <ol> <li>Verify that Docker is installed and install it if not</li> <li>Use <code>docker</code> to retrieve the Plex Meta Manager Docker image</li> <li>Create a directory for your config files and learn how to tell Docker to use it</li> <li>Gather two things that Plex Meta Manager requires:<ul> <li>TMDb API Key</li> <li>Plex URL and Token</li> </ul> </li> <li>Then, iteratively:<ul> <li>use <code>docker</code> to run the image</li> <li>use a text editor to modify a couple of text files until you have a working config file and a single working metadata file.</li> </ul> </li> </ol> <p>Note that running a Docker container is inherently a pretty technical process.  If you are unable or unwilling to learn the rudiments of using Docker, this may not be the tool for you.</p> <p>If the idea of editing YAML files by hand is daunting, this may not be the tool for you.  All the configuration of Plex Meta Manager is done via YAML text files, so if you are unable or unwilling to learn how those work, you should stop here.</p> <p>Finally, this walkthrough is intended to give you a basic grounding in how to get Plex Meta Manager running.  It doesn't cover how to create your own collections, or how to add overlays, or any of the myriad other things Plex Meta Manager is capable of.  It provides a simple \"Getting Started\" guide for those for whom the standard install instructions make no sense; presumably because you've never run a Docker container before.</p>"},{"location":"pmm/install/guides/docker/#prerequisites","title":"Prerequisites.","text":"Info <p>Nearly anywhere you see</p> <pre><code>something like this\n</code></pre> <p>That\u2019s a command you\u2019re going to type or paste into your terminal (OSX or Linux) or Powershell (Windows).</p> <p>IMPORTANT NOTES:</p> <ul> <li> <p>This walkthrough is going to be pretty pedantic.  I\u2019m assuming you\u2019re reading it because you have no idea how to get a Docker container going, so I\u2019m proceeding from the assumption that you want to be walked through every little detail.  You\u2019re going to deliberately cause errors and then fix them as you go through it.  This is to help you understand what exactly is going on behind the scenes so that when you see these sorts of problems in the wild you will have some background to understand what\u2019s happening.  If I only give you the happy path walkthrough, then when you make a typo later on you\u2019ll have no idea where that typo might be or why it\u2019s breaking things.</p> </li> <li> <p>I am assuming you do not have any of these tools already installed.  When writing this up I started with a brand new Windows 10 install.</p> </li> <li> <p>I'm also assuming you are doing this on a computer, not through a NAS interface or the like.  You can do all this through something like the Synology NAS UI or Portainer or the like, but those aren't documented here.  This uses the docker command line because it works the same on all platforms.</p> </li> <li> <p>You may want to take an hour to get familiar with Docker fundamentals with the official tutorial.</p> </li> <li> <p>DO NOT MAKE ANY CHANGES BELOW if you want this to just work.  Don't change the docker image [<code>linuxserver.io</code> will not work for this, for example]; don't change the paths, etc.</p> </li> </ul>"},{"location":"pmm/install/guides/docker/#prepare-a-small-test-library-optional","title":"Prepare a small test library [optional]","text":"<p>While going through this process, Plex-Meta-Manager is going to load the movies in your library, create some collections, and apply some overlays.  If you have a large library, this will be very time-consuming.</p> <p>For learning and testing, you would be well-advised to create a small test library of a reasonable size, where reasonable it probably below a thousand.</p> <p>The author has a small library of 10 movies that is used for fast tests.</p> <p>For best results with this walkthrough, your test library will contain:</p> <ul> <li>At least two comedy movies released since 2012.</li> <li>At least two movies from the IMDB top 250.</li> <li>At least two movies from IMDB's Popular list.</li> <li>At least two movies from IMDB's Lowest Rated.</li> <li>A couple different resolutions among the movies.</li> </ul> <p>That will ensure there's something to go into each of the example collections that will be created.</p> <p>The advantage of the small test library is that it will reduce the time needed to see results.  Running some of these default collections against a library of a few thousand movies can take hours, and for iterative testing it's useful to have something that will run in a few minutes or seconds.</p> <p>You can set up a test library like this using symlinks without copying files.</p>"},{"location":"pmm/install/guides/docker/#starting-up-your-terminal","title":"Starting up your terminal.","text":"<p>Since most of this is typing commands into a terminal, you'll need to have a terminal open.</p>  Linux macOS Windows <p>If your Linux system is remote to your computer, connect to it via SSH.  That SSH session is the terminal you will be using, so leave it open.</p> <p>If you are running this on a desktop Linux machine, start up the Terminal application.  That window will be the terminal you will type commands into throughout this walkthrough, so leave it open.</p> <p>Open the Terminal app; this window will be the place you type commands throughout this walkthrough, so leave it open.  The Terminal app is in Applications -&gt; Utilities.</p> <p>You can also use iTerm or some other terminal app if you wish.  If you don't know what that means, use Terminal.</p> <p>Use the Start menu to open PowerShell.  This will be the window into which you type commands throughout this walkthrough, so leave it open.</p>"},{"location":"pmm/install/guides/docker/#installing-docker","title":"Installing Docker.","text":"<p>To run Docker images, you need to have Docker installed.  It is not typically installed on new Mac, Linux, or Windows machines.</p> <p>The Docker install is discussed here: Installing Docker</p> <p>Once you have Docker installed, test it at the command line with:</p> <p>[type this into your terminal] <pre><code>docker run --rm hello-world\n</code></pre> You should see something that starts with: <pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n...\n</code></pre></p> <p>If that doesn't work, stop here until you fix that.  Diagnoing and repairing Docker install problems is out of the scope of this walkthrough.</p>"},{"location":"pmm/install/guides/docker/#important-note-on-docker-images","title":"Important note on Docker images","text":"<p>This tutorial uses the official image, and you should, too.  Don't change <code>meisnate12/plex-meta-manager</code> to the <code>linuxserver.io</code> image or any other; other images may have idiosyncracies that will prevent this walkthrough from working.  The official image will behave exactly as documented below.  Others very possibly won't.</p> <p>The great thing about Docker is that all the setup you'd have to do to run Plex Meta Manager is already done inside the docker image.</p> <p>That means we can just jump right into running it.  At the command prompt, type:</p> <pre><code>docker run --rm meisnate12/plex-meta-manager --run\n</code></pre> <p>This is going to fail with an error.  That's expected.</p> <p>You should see something like this:</p> <pre><code>Unable to find image 'meisnate12/plex-meta-manager:latest' locally\nlatest: Pulling from meisnate12/plex-meta-manager\n7d63c13d9b9b: Already exists\n6ad2a11ca37b: Already exists\n8076cdef4689: Pull complete\n0ba90f5a7dd0: Pull complete\n27c191df269f: Pull complete\nc75e4c0924fa: Pull complete\ned6716577767: Pull complete\n0547721ab7a3: Pull complete\nea4d35bce959: Pull complete\nDigest: sha256:472be179a75259e07e68a3da365851b58c2f98383e02ac815804299da6f99824\nStatus: Downloaded newer image for meisnate12/plex-meta-manager:latest\nConfig Error: config not found at //config\n</code></pre> <p>That error means you don\u2019t have a config file, but we know that most everything is in place to run the image.</p>"},{"location":"pmm/install/guides/docker/#setting-up-a-volume-map","title":"Setting up a volume map","text":"<p>Plex Meta Manager, inside that Docker container, can only see other things inside the container.  We want to add our own files for config and metadata, so we need to set something up that lets Plex Meta Manager see files we create outside the container.  This is called a \"volume map\".</p> <p>Go to your home directory and create a new directory:</p> <p>[type this into your terminal]</p> <pre><code>cd ~\nmkdir plex-meta-manager\n</code></pre> <p>cd into that directory and create another directory:</p> <p>[type this into your terminal]</p> <pre><code>cd ~/plex-meta-manager\nmkdir config\n</code></pre> <p>get the full path:</p> <p>[type this into your terminal]</p> <pre><code>pwd\n</code></pre> <p>This will display a full path:</p>  Linux macOS Windows <pre><code>/home/YOURUSERNAME/plex-meta-manager\n</code></pre> <pre><code>/Users/YOURUSERNAME/plex-meta-manager\n</code></pre> <pre><code>C:\\Users\\YOURUSERNAME\\plex-meta-manager\n</code></pre> <p>Add \"config\" onto the end of that to get the host path to your config directory, for example:</p>  Linux macOS Windows <pre><code>/home/YOURUSERNAME/plex-meta-manager/config\n</code></pre> <pre><code>/Users/YOURUSERNAME/plex-meta-manager/config\n</code></pre> <pre><code>C:\\Users\\YOURUSERNAME\\plex-meta-manager\\config\n</code></pre> <p>You'll need to add this to the docker command every time you run it, like this:</p>  Linux macOS Windows <pre><code>docker run --rm -it -v \"/home/YOURUSERNAME/plex-meta-manager/config:/config:rw\" meisnate12/plex-meta-manager\n</code></pre> <pre><code>docker run --rm -it -v \"/Users/YOURUSERNAME/plex-meta-manager/config:/config:rw\" meisnate12/plex-meta-manager\n</code></pre> <pre><code>docker run --rm -it -v \"C:\\Users\\YOURUSERNAME\\plex-meta-manager\\config:/config:rw\" meisnate12/plex-meta-manager\n</code></pre> <p>If you run that command now it will display a similar error to before, but without all the image loading:</p> <pre><code> $ docker run --rm -it -v \"/Users/mroche/plex-meta-manager/config:/config:rw\" meisnate12/plex-meta-manager --run\nConfig Error: config not found at //config\n</code></pre> <p>Note that I show the example path there.</p> Why did we create that `config' directory?    This was done so that from here on in the instructions match between this walkthrough and the [Local walkthrough](local)."},{"location":"pmm/install/guides/docker/#create-a-directory-to-quiet-an-error-later","title":"Create a directory to quiet an error later","text":"<p>The default config file contains a reference to a directory that will show an error in the output later.  That error can safely be ignored, but it causes some confusion with new users from time to time.</p> <p>We'll create it here so the error doesn't show up later.</p>  Linux macOS Windows <p>[type this into your terminal]   <pre><code>mkdir config/assets\n</code></pre></p> <p>[type this into your terminal]   <pre><code>mkdir config/assets\n</code></pre></p> <p>[type this into your terminal]   <pre><code>mkdir config\\assets\n</code></pre></p>"},{"location":"pmm/install/guides/docker/#setting-up-the-initial-config-file","title":"Setting up the initial config file","text":"<p>Next you\u2019ll set up the config file.  This tells PMM how to connect to Plex and a variety of other services.</p> <p>Before you do this you\u2019ll need:</p> <ol> <li>TMDb API key.  They\u2019re free.</li> <li>Plex URL and Token</li> </ol> <p>There are a bunch of other services you can configure in the config file, but these two are the bare minimum.</p>"},{"location":"pmm/install/guides/docker/#getting-a-tmdb-api-key","title":"Getting a TMDb API Key","text":"<p>Note that if you already have an API key, you can use that one.  You don\u2019t need another.</p> <p>Go to https://www.themoviedb.org/.  Log into your account [or create one if you don\u2019t have one already], then go to \u201cSettings\u201d under your account menu.</p> <p>In the sidebar menu on the left, select \u201cAPI\u201d.</p> <p>Click to generate a new API key under \"Request an API Key\".  If there is already one there, copy it and go to the next step.</p> <p>There will be a form to fill out; the answers are arbitrary.  The URL can be your personal website, or probably even google.com or the like.</p> <p>Once you\u2019ve done that there should be an API Key available on this screen.  If you see v3 and v4, you want the v3 key.</p> <p>Copy that value, you\u2019ll need it for the config file.</p>"},{"location":"pmm/install/guides/docker/#getting-a-plex-url-and-token","title":"Getting a Plex URL and Token","text":"<p>The Plex URL is whatever URL you\u2019d use from this machine to connect directly to your Plex server [i.e. NOT app.plex.tv].</p> <p>As with the TMDb API Key, if you already have a Plex Token, you can use that one.</p> <p>This article will describe how to get a token: Finding an authentication token</p>"},{"location":"pmm/install/guides/docker/#editing-the-config-template","title":"Editing the config template","text":"<p>First, make a copy of the template:</p>  Linux macOS Windows <p>Get a copy of the template to edit [type this into your terminal]:   <pre><code>curl -fLvo config/config.yml https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/config/config.yml.template\n</code></pre></p> <p>Get a copy of the template to edit [type this into your terminal]:   <pre><code>curl -fLvo config/config.yml https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/config/config.yml.template\n</code></pre></p> <p>Go to this URL using a web browser; choose the \"Save\" command, then save the file at:   <pre><code>C:\\Users\\YOURUSERNAME\\plex-meta-manager\\config\\config.yml\n</code></pre></p> <p>Now open the copy in an editor:</p>  Linux macOS Windows <p>[type this into your terminal]</p> <pre><code>nano config/config.yml\n</code></pre> <p>I\u2019m using <code>nano</code> here mostly because it\u2019s simpler than any other editor on Linux.</p> <p>If you see something like: <pre><code> $ nano config/config.yml\nzsh: command not found: nano\n</code></pre></p> <p>You need to install <code>nano</code>, which you would do with:</p> <p>[type this into your terminal]</p> <pre><code>sudo apt install nano\n</code></pre> <p>You can use any other text editor you wish, provided it saves files as PLAIN TEXT.  <code>vi</code>, <code>emacs</code>, etc.</p> <p>[type this into your terminal]</p> <pre><code>nano config/config.yml\n</code></pre> <p>I\u2019m using <code>nano</code> here simply because it\u2019s built into OSX.  You can use any other text editor you wish, provided it saves files as PLAIN TEXT.  BBedit, TextMate, VSCode, etc.</p> <p>A common mistake is using TextEdit.app, which saves files as RTF by default.</p> <p>[type this into your terminal]</p> <p><pre><code>notepad .\\config\\config.yml\n</code></pre> I\u2019m using <code>notepad</code> here simply because it\u2019s built into Windows.  You can use any other text editor you wish, provided it saves files as PLAIN TEXT.</p> <p>From here on in, when this walkthrough says \"open the config file\", I mean this <code>nano</code> or <code>notepad</code> command.  Don't copy the template again.</p> <p>Scroll down a bit and update the three things you just collected; Plex URL, Plex Token, and TMDb API Key.</p> <pre><code>plex:                                           # Can be individually specified per library as well\nurl: http://bing.bang.boing                &lt;&lt;&lt; ENTER YOUR PLEX URL HERE\ntoken: XXXXXXXXXXXXXXXXXXXX                &lt;&lt;&lt; ENTER YOUR PLEX TOKEN HERE\ntimeout: 60\nclean_bundles: false\nempty_trash: false\noptimize: false\ntmdb:\napikey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   &lt;&lt;&lt; ENTER YOUR TMDb API KEY HERE\nlanguage: en\n</code></pre> <p>Now scroll up and look at the top section:</p> <pre><code>## This file is a template remove the .template to use the file\n\nlibraries:                       # This is called out once within the config.yml file\nMovies:                        # Each library must match the Plex library name\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\noverlay_path:\n- remove_overlays: false   # Set this to true to remove all overlays\n- pmm: ribbon              # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\nTV Shows:\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\noverlay_path:\n- remove_overlays: false   # Set this to true to remove all overlays\n- pmm: ribbon              # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\nAnime:\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: anilist             # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\nMusic:\nmetadata_path:\n- file: config/Music.yml   # This is a local file THAT YOU MIGHT CREATE\n</code></pre> <p>You will ultimately need an entry here for each of the libraries on which you want PMM to act.  Those top-level elements [Movies, TV Shows, Anime, Music] are names of libraries on your Plex server.</p> <p>For now, delete the \u201cTV Shows\u201d, \u201cAnime\u201d, and \"Music\" sections and change the name of the \u201cMovies\u201d section to \u201cMovies-NOSUCHLIBRARY\":</p> <pre><code>libraries:\nMovies-NOSUCHLIBRARY:                         ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n</code></pre> <p>This is intended to cause an error for illustration that you will then fix.</p>"},{"location":"pmm/install/guides/docker/#testing-the-config-file","title":"Testing the config file","text":"<p>Save the file:</p>  Linux macOS Windows <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>notepad</code>, type control-<code>s</code> or choose <code>Save</code> from the <code>File</code> menu.</p> <p>Then run Plex Meta Manager again:</p> <p>[type this into your terminal]</p> <pre><code>docker run --rm -it -v \"PMM_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager --run\n</code></pre> <p>I\u2019ve removed some of the lines for space, but have left the important bits:</p> <pre><code>...\n|                                            Starting Run|\n...\n| Locating config...\n|\n| Using /Users/mroche/Plex-Meta-Manager/config/config.yml as config\n...\n| Connecting to TMDb...\n| TMDb Connection Successful\n...\n| Connecting to Plex Libraries...\n...\n| Connecting to Movies-NOSUCHLIBRARY Library...                                                      |\n...\n| Plex Error: Plex Library Movies-NOSUCHLIBRARY not found                                            |\n| Movies-NOSUCHLIBRARY Library Connection Failed                                                     |\n|====================================================================================================|\n| Plex Error: No Plex libraries were connected to                                                    |\n...\n</code></pre> <p>You can see there that PMM found its config file, was able to connect to TMDb, was able to connect to Plex, and then failed trying to read the \u201cMovies-NOSUCHLIBRARY\" library, which of course doesn\u2019t exist.</p> <p>Open the config file again and change \"Movies-NOSUCHLIBRARY\" to reflect your own Movie library in Plex.</p> <p>My Movies library is called \u201cMain Movies\", so mine looks like this:</p> <pre><code>libraries:\nMain Movies:                            ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n</code></pre>"},{"location":"pmm/install/guides/docker/#creating-a-few-sample-collections","title":"Creating a few sample collections.","text":"<p>Plex-Meta-Manager provides an extensive collection of \"default\" metadata files.</p> <p>These files provide a simple way for you to create collections based on franchises or awards or actors, etc.</p> <p>The default config links to two of them:</p> <pre><code>      - pmm: basic\n      - pmm: imdb\n</code></pre> <p>The first will create:</p> <ul> <li>Newly Released</li> <li>New Episodes [TV libraries only]</li> </ul> <p>The second will create:</p> <ul> <li>IMDb Popular</li> <li>IMDb Top 250</li> <li>IMDb Lowest Rated</li> </ul> <p>So let's run Plex Meta Manager and see this happen:</p> <p>[type this into your terminal]</p> <pre><code>docker run --rm -it -v \"PMM_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager --run\n</code></pre> <p>Depending on the size of the library, this may take a while.</p> <p>As it builds the collections, you should see a fair amount of logging about which movies are being added and which ones aren\u2019t found.  Once it completes, go to Plex, go to your Movies library, and click \u201cCollections\u201d at the top.</p> <p>On my test library, this created four collections.  You may see fewer depending on what specific movies are in that library.</p> <p></p> <p>Perhaps you can do everything you want with the defaults.  You can investigate what they can provide under the \"Defaults\" heading at the top.</p>"},{"location":"pmm/install/guides/docker/#setting-up-a-metadata-file-and-creating-a-few-sample-collections","title":"Setting up a metadata file and creating a few sample collections.","text":"<p>If the default metadata files do not allow you to create the collections you want, you can define your own collections in your own metadata files to do whatever you like within the capabilities of PMM.  We will create a simple collection that will contain 20 comedy movies since 2012.</p> <p>First, open the metadata file [this will create the file if it doesn't already exist]:</p>  Linux macOS Windows <p>[type this into your terminal]</p> <pre><code>nano \"config/Movies.yml\"\n</code></pre> <p>[type this into your terminal]</p> <pre><code>nano \"config/Movies.yml\"\n</code></pre> <p>[type this into your terminal]</p> <pre><code>notepad \"config\\Movies.yml\"\n</code></pre> <p>In this file, add the following, exactly as it is shown here:</p> <pre><code>collections:\nRecent Comedy:\nplex_search:\nall:\ngenre: Comedy\nyear.gte: 2012\nlimit: 20\n</code></pre> <p>Save the file:</p>  Linux macOS Windows <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>notepad</code>, type control-<code>s</code> or choose <code>Save</code> from the <code>File</code> menu.</p> <p>Next, add a reference to this file to your config file.</p> <p>Open the config file again and add the last line shown below:</p> <pre><code>libraries:\nMain Movies:                            ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n- file: config/Movies.yml\n</code></pre> <p>That line needs to match the path you used when you created the file a moment ago.</p> <p>Save the file:</p>  Linux macOS Windows <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>notepad</code>, type control-<code>s</code> or choose <code>Save</code> from the <code>File</code> menu.</p> <p>Then run Plex Meta Manager again:</p> <p>[type this into your terminal]</p> <pre><code>docker run --rm -it -v \"PMM_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager --run\n</code></pre> <p>You should see that the metadata file gets loaded:</p> <pre><code>| Loading Metadata File: config/Movies.yml\n| Metadata File Loaded Successfully\n</code></pre> <p>As it builds the collection, you should see a fair amount of logging about which movies are being added and which ones aren\u2019t found.  Once it completes, go to Plex, go to your Movies library, and click \u201cCollections\u201d at the top.</p> <p>You should see the new collection:</p> <p></p> <p>When you click into each, you\u2019ll see the movies that PMM added to each collection.</p> <p>Each time you run Plex Meta Manager, new movies that match the collection definitions will be added.  For example, if you don\u2019t have \u201cThe ShawShank Redemption\u201d now, when you download it and run PMM again it will be added to the IMDB 250 collection.</p>"},{"location":"pmm/install/guides/docker/#adding-overlays-to-movies","title":"Adding Overlays to movies.","text":"<p>The default metadata files include a set of overlays you can add to your posters.</p> <p>We'll add resolution overlays to the movies in this library as an example.</p> <p>Open the config file again and add the last three lines shown below:</p> <pre><code>libraries:\nMain Movies:                            ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n- file: config/Movies.yml\noverlay_path:\n- remove_overlays: false\n- pmm: resolution\n</code></pre> <p>Save the file:</p>  Linux macOS Windows <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>notepad</code>, type control-<code>s</code> or choose <code>Save</code> from the <code>File</code> menu.</p> <p>Then run Plex Meta Manager again:</p> <p>[type this into your terminal]</p> <pre><code>docker run --rm -it -v \"PMM_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager --run\n</code></pre> <p>While it runs this time you should see the previous collections go by pretty quickly, since they aren't changing, and then a lot of logging as PMM decides which overlays apply to which movies.</p> <p>This may take quite a while depending on the size of this library.</p> <p>Eventually, you'll see it start applying overlays to all your movies:</p> <pre><code>|=========================================================|\n|     Applying Overlays for the Movies - 4K Library       |\n|=========================================================|\n|                                                         |\n| 10 Cloverfield Lane         | Overlays Applied: 4K-HDR  |\n| 10 Minutes Gone             | Overlays Applied: 4K-HDR  |\n| 10 Things I Hate About You  | Overlays Applied: 4K-HDR  |\n| 12 Mighty Orphans           | Overlays Applied: 4K-HDR  |\n| 12 Monkeys                  | Overlays Applied: 4K-DV   |\n| 12 Strong                   | Overlays Applied: 4K-HDR  |\n...\n</code></pre> <p>When it finishes, go to the Library tab in this library in Plex:</p> <p></p>"},{"location":"pmm/install/guides/docker/#what-comes-next","title":"What comes next:","text":"<p>If you want to remove those overlays, open the config file, change the value of <code>remove_overlays</code> to <code>true</code>, and rerun PMM.</p> <pre><code>    overlay_path:\n      - remove_overlays: true\n      - pmm: resolution\n</code></pre> <p>If you want to remove those collections, open the config file, remove or comment out [add <code>#</code> to the beginning] any or all of those lines under <code>metadata_path</code>, and delete the collections manually from Plex.</p> <pre><code>libraries:\nMain Movies:\nmetadata_path:\n# - pmm: basic               # This is a file within the defaults folder in the Repository\n# - pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n# - file: config/Movies.yml\noverlay_path:\n- remove_overlays: false\n- pmm: resolution\n</code></pre> <p>Edit <code>Movies.yml</code> to reflect the actions you want PMM to perform on your libraries. Edit <code>Movies.yml</code> to reflect the actions you want PMM to perform on your libraries.</p> <p>TV Shows and other libraries work the same way as you've seen above.  Create a section under <code>Libraries:</code> in the config.yml, refer to default files or create a metadata file, define collections, run Plex Meta Manager.</p> <p>Investigate the rest of the wiki to learn about everything Plex-Meta-Manager can do for you.</p>"},{"location":"pmm/install/guides/docker/#runtime-and-environment-flags","title":"Runtime and Environment Flags","text":"<p>The command in this walkthrough will run all collections and libraries immediately.  If you want to modify that behavior to run just one or some collections, or just one library, or just overlays or the like, review the Run Commands &amp; Environment Variables.</p>"},{"location":"pmm/install/guides/docker/#creating-collections-overlays-playlists-etc","title":"Creating Collections, Overlays, Playlists, etc.","text":"<p>These things are all generally defined in metadata files that are referred to in the config file.  The starting point for creating these files is here.</p>"},{"location":"pmm/install/guides/docker/#other-topics","title":"Other Topics","text":""},{"location":"pmm/install/guides/docker/#scheduling","title":"Scheduling","text":"<p>The commands you've been using in this walkthrough run Plex-Meta-Manager immediately then quit.</p> <p>Plex Meta Manager also features multiple layers of scheduling, which you can leverage to control when various activities take place.</p> <ul> <li>You can run PMM in the background, telling it to wake up and process your libraries at fixed times during the day.  The default behavior in this regard is to wake up at 5AM and process the config.  If you leave the <code>-r</code> off the commands you have been using in this walkthrough, that's what will happen.</li> </ul> <p>You can control when PMM wakes up with the time-to-run env-var/runtime flag.</p> <ul> <li>You can skip using that internal schedule and just do manual runs as you have been doing throughout this walkthrough using standard tools available in your OS.</li> </ul> <p>Details on setting this up are found here.</p> <ul> <li>In addition, individual items within the configuration can be scheduled to take place at certain times provided PMM is running at that time.  For example, you can tell PMM only to apply overlays on Tuesdays or the like.  YOu can then schedule manual runs every day at noon and overlays will only get processed when it runs on Tuesday.  This sort of schedule will not make PMM start up if it is not already running.  If you don't arrange for PMM to be run on Tuesday, your overlays would never be processed in this example.</li> </ul> <p>Details on this level of scheduling are found here</p>"},{"location":"pmm/install/guides/docker/#i-want-to-use-the-develop-branch","title":"I want to use the develop branch","text":"<p>Add the <code>develop</code> tag to the image name in your run command [or wherever you specify the image in your environment]</p> <pre><code>docker run --rm -it -v \"Plex Meta Manager_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager:develop --run\n                                                                                    ^^^^^^^\n</code></pre> <p>This may not work if you are not using the official image; for example, it does not work with the lsio image.</p>"},{"location":"pmm/install/guides/docker/#i-want-to-use-the-nightly-branch","title":"I want to use the nightly branch","text":"<p>Add the <code>nightly</code> tag to the image name in your run command [or wherever you specify the image in your environment]</p> <pre><code>docker run --rm -it -v \"Plex Meta Manager_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager:nightly --run\n                                                                                    ^^^^^^^\n</code></pre> <p>This may not work if you are not using the official image; for example, it does not work with the lsio image.</p>"},{"location":"pmm/install/guides/docker/#i-want-to-ensure-i-am-using-the-master-branch","title":"I want to ensure I am using the master branch","text":"<p>Add the <code>latest</code> tag to the image name in your run command [or wherever you specify the image in your environment]</p> <pre><code>docker run --rm -it -v \"Plex Meta Manager_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager:latest --run\n                                                                                    ^^^^^^\n</code></pre> <p>This is the only version tag supplied by the lsio image.</p>"},{"location":"pmm/install/guides/formula/","title":"Formula 1 Metadata Guide","text":"<p>This is a guide for setting up Formula 1 in Plex using the <code>f1_season</code> metadata attribute.</p> <p>Most of this guide is taken from a reddit post written by /u/Toastjuh.</p>"},{"location":"pmm/install/guides/formula/#folder-structure","title":"Folder structure","text":"<p>Let's start with the basics:</p> <ul> <li>Every Formula 1 season will be a TV Show in Plex. Season 2001, Season 2002, etc.</li> <li>Every race will be a Season in Plex. Season 1 will be the Australian GP, Season 2 will be the Bahrain GP etc.</li> <li>Every session will be an Episode in Plex. Episode 1 will be Free Practice 1, Episode 2 will be Free Practice 2 etc.</li> </ul> <p>The folder format is like this: <pre><code>Formula                                   -&gt; Library Folder\n\u251c\u2500\u2500 Season 2018                           -&gt; Folder for each F1 Season\n\u2502   \u251c\u2500\u2500 01 - Australian GP                -&gt; Folder for each Race in a season\n\u2502       \u251c\u2500\u2500 01x10 - Australian GP - Highlights.mkv\n\u2502       \u251c\u2500\u2500 01x01 - Australian GP - Free Practice 1.mkv\n\u2502       \u251c\u2500\u2500 01x02 - Australian GP - Free Practice 2.mkv\n\u2502       \u251c\u2500\u2500 01x03 - Australian GP - Free Practice 3.mkv\n\u2502       \u251c\u2500\u2500 01x04 - Australian GP - Pre-Qualifying Buildup.mkv\n\u2502       \u251c\u2500\u2500 01x05 - Australian GP - Qualifying Session.mkv\n\u2502       \u251c\u2500\u2500 01x06 - Australian GP - Post-Qualyfing Analysis.mkv\n\u2502       \u251c\u2500\u2500 01x07 - Australian GP - Pre-Race Buildup.mkv\n\u2502       \u251c\u2500\u2500 01x08 - Australian GP - Race Session.mkv\n\u2502       \u251c\u2500\u2500 01x09 - Australian GP - Post-Race Analysis.mkv\n\u2502       \u251c\u2500\u2500 01x10 - Australian GP - Highlights.mkv\n\u2502   \u251c\u2500\u2500 02 - Bahrein GP\n\u2502       \u251c\u2500\u2500 02x10 - Bahrein GP - Highlights.mkv\n\u2502       \u251c\u2500\u2500 02x01 - Bahrein GP - Free Practice 1.mkv\n\u2502       \u251c\u2500\u2500 02x02 - Bahrein GP - Free Practice 2.mkv\n\u2502       \u251c\u2500\u2500 02x03 - Bahrein GP - Free Practice 3.mkv\n\u2502       \u251c\u2500\u2500 02x04 - Bahrein GP - Pre-Qualifying Buildup.mkv\n\u2502       \u251c\u2500\u2500 02x05 - Bahrein GP - Qualifying Session.mkv\n\u2502       \u251c\u2500\u2500 02x06 - Bahrein GP - Post-Qualyfing Analysis.mkv\n\u2502       \u251c\u2500\u2500 02x07 - Bahrein GP - Pre-Race Buildup.mkv\n\u2502       \u251c\u2500\u2500 02x08 - Bahrein GP - Race Session.mkv\n\u2502       \u251c\u2500\u2500 02x09 - Bahrein GP - Post-Race Analysis.mkv\n\u2502       \u251c\u2500\u2500 02x10 - Bahrein GP - Highlights.mkv\n</code></pre></p> <p>What matters for plex and for Plex Meta Manager. * The show name can be whatever you want it to be but the pre created metadata file will only work if you use just the year numbers. * The season folder can be called whatever you want as long as plex scans it in with the Season Number matching the race number. * The episodes must follow plex's naming convention to have them scanned in properly but in order for Plex Meta Manager to update the metadata the files need to be specifically name like above.</p>"},{"location":"pmm/install/guides/formula/#metadata-file","title":"Metadata File","text":"<pre><code>metadata:\nSeason 2021:\nf1_season: 2021\nround_prefix: true\nSeason 2020:\nf1_season: 2020\nround_prefix: true\n</code></pre> <ul> <li>Add <code>round_prefix: true</code> to have the race number appended to the beginning of the Race Name.</li> <li>Add <code>shorten_gp: true</code> to shorten <code>Grand Prix</code> to <code>GP</code> in all titles.</li> </ul> <p>Add an entry for every season you want to set the metadata for. The name needs to correspond with the name the season has in Plex!</p> <p>The posters of races you can get from https://www.eventartworks.de/</p>"},{"location":"pmm/install/guides/images/","title":"Docker Images","text":"<p>You should use the official docker image:</p> <pre><code>meisnate12/plex-meta-manager\n</code></pre> <p>All the examples in the wiki are assuming the use of this image, and many do not work with non-official Docker images due to differences in how the authors have chosen to construct their images.</p> <p>One alternate image we see a lot is the Linuxserver image, due to its prominent placement in unRAID and linuxserver's general reputation.</p>"},{"location":"pmm/install/guides/images/#linuxserver","title":"LinuxServer","text":"<p>The first image offered in unRAID for Plex Meta Manager is the Linuxserver.io image [<code>linuxserver/plex-meta-manager</code>]</p> <p>This image is different to the official image [meisnate12/plex-meta-manager] in a few ways that cause a variety of problems particularly for new users.</p> <p>One typical error is something like:</p> <pre><code>Path does not exist: /run/s6/services/plex-meta-manager/config/SOMETHING\n</code></pre> <p>The result is that the stock config file and a lot of the examples found in the wiki and config repo don't work.</p> <p>If you use the LSIO image you should be aware of the following.</p> <p>The LSIO image:</p> <ol> <li> <p>requires absolute paths in the config. /config/Movies.yml, not config/Movies.yml. Because of this most of the examples in the wiki and config repo don't work as-is with lsio. Config files that work outside of docker often fail because of this with an error referring to <code>/run/s6/services/...</code>.</p> </li> <li> <p>only has <code>latest</code> version, no <code>develop</code> or <code>nightly</code>. If you want to switch to <code>develop</code> or <code>nightly</code> to try a new feature, they aren't available with LSIO image.</p> </li> <li> <p>doesn't support runtime flags, only ENV vars. This means that a command like:</p> </li> </ol> <pre><code>docker run -it --rm -v /opt/pmm/config:/config linuxserver/plex-meta-manager --config config/config.yml -r --run-libraries \"Movies - 4K DV\"\n</code></pre> <p>doesn't work with the LSIO image; it would have to be:</p> <pre><code>docker run -it --rm -v /opt/pmm/config:/config -e PMM_CONFIG=/config/config.yml -e PMM_RUN=true -e PMM_LIBRARIES=\"Movies - 4K DV\" linuxserver/plex-meta-manager\n</code></pre> <ol> <li> <p>doesn't do manual runs correctly; they loop over and over. That command in the previous bullet point [which uses <code>PMM_RUN</code> to run it right now] will run over and over until you manually kill the container.  The same thing using the official image will run once and quit, as expected.</p> </li> <li> <p>Resets ownership of entire config dir every run. In tests, the ownership of the config dir and its contents was set to 911:911 with each run.</p> </li> </ol> <p>Generally speaking, we suggest you use the official image instead of lsio.</p>"},{"location":"pmm/install/guides/images/#others","title":"Others","text":"<p>There are 8 other images listed at dockerhub aside from the official image and linuxserver.  None of them discuss how they are different beyond one noting it includes <code>curl</code>.</p> <p>Unless you have some compelling reason to use one of those, you shouldn't.  You should stick with the official image.</p> <p>If you choose to use another image than the default, you should should be prepared for the possibility that published examples fail in various ways.</p>"},{"location":"pmm/install/guides/initial/","title":"Initial Setup Guide","text":"<p>Before using this guide you should already have installed Plex Meta Manager.</p> <p>See the Installation Page for info on how to install Plex Meta Manager.</p> <p>This guide is assuming you know how to run Plex Meta Manager with the <code>--run</code> run command or the <code>PMM_RUN</code> environment variable to perform immediate runs  </p>"},{"location":"pmm/install/guides/kubernetes/","title":"Kubernetes Walkthrough","text":"<p>This article will walk you through getting Plex Meta Manager [Plex Meta Manager] set up and running in Kubernetes.  It will cover:</p> <ol> <li>Creating the Kubernetes CronJob</li> <li>Creating configuration files as Config Maps</li> <li>(Advanced) Creating dynamic configuration files with an Init Container</li> </ol>"},{"location":"pmm/install/guides/kubernetes/#prerequisites","title":"Prerequisites.","text":"<p>This walk through assumes you are familiar with Kubernetes concepts and have an exiting cluster to deploy into.  If you do not, but are interested, minikube is a great place to start.</p>"},{"location":"pmm/install/guides/kubernetes/#creating-the-kubernetes-cronjob","title":"Creating the Kubernetes CronJob","text":"<p>When running Plex Meta Manager in Kubernetes, executing it as a CronJob gives us the ability to define a schedule for execution and have Kubernetes manage the rest.</p> <p>Some parts of this to tweak to your needs:</p> <ol> <li>The namespace should be set to whatever you desire, in this example it runs in the <code>media</code> namespace.</li> <li>The schedule, in this example it runs at 00:00 UTC.  https://crontab.guru/ is a good site if you aren't sure on how to create a schedule.</li> </ol> <pre><code>apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: plex-media-manager\n  namespace: media\nspec:\n  schedule: \"0 0 * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          securityContext:\n            runAsUser: 1000\n            runAsGroup: 1000\n          containers:\n            - name: plex-media-manager\n              image: meisnate12/plex-meta-manager:latest\n              imagePullPolicy: IfNotPresent\n              args: [ \"--run\", \"--read-only-config\" ]\n              resources:\n                limits:\n                  cpu: 100m\n                  memory: 256Mi\n                requests:\n                  cpu: 100m\n                  memory: 125Mi\n              volumeMounts:\n                - name: config\n                  mountPath: /config\n                - name: pmm-config\n                  mountPath: /config/config.yml\n                  subPath: config.yml\n                - name: movie-config\n                  mountPath: /config/movies.yaml\n                  subPath: movies.yaml\n                - name: tv-config\n                  mountPath: /config/tv.yaml\n                  subPath: tv.yaml\n          volumes:\n            - name: config\n              persistentVolumeClaim:\n                claimName: plex-media-manager\n            - configMap:\n                name: pmm-config\n              name: pmm-config\n            - configMap:\n                name: movie-config\n              name: movie-config\n            - configMap:\n                name: tv-config\n              name: tv-config\n          restartPolicy: OnFailure\n</code></pre> <p>This CronJob also requires</p> <ol> <li>A Persistent Volume Claim</li> <li>3 Config Maps (see next section)</li> </ol> <p>The Persistent Volume Claim (PVC) can be as simple as:</p> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    app: plex-media-manager\n  name: plex-media-manager\n  namespace: media\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 128Mi\n</code></pre>"},{"location":"pmm/install/guides/kubernetes/#creating-the-config-maps","title":"Creating the Config Maps","text":"<p>In Kubernetes, configurations are managed via Config Maps.  So we deploy the configurations for Plex Meta Manager as config maps.  The minimum requirement is the Plex Meta Manager config, but the example here assumes you have a separate config for movies and tv shows.</p>"},{"location":"pmm/install/guides/kubernetes/#plex-meta-manager-config","title":"Plex Meta Manager Config","text":"<p>Here's a config map for the <code>config.yml</code> file for Plex Meta Manager.  Note there are many placeholders that will need update based on your environment and needs.</p> <p>Follow the Trakt Attributes directions for generating the OAuth authorization values.</p> <pre><code>apiVersion: v1\ndata:\n  config.yml: |\n    libraries:\n      Movies:\n        metadata_path:\n          - file: config/movies.yaml\n      TV Shows:\n        metadata_path:\n          - file: config/tv.yaml\n    settings:\n      cache: true\n      cache_expiration: 60\n      asset_directory: config/assets\n      asset_folders: true\n      asset_depth: 0\n      create_asset_folders: false\n      dimensional_asset_rename: false\n      download_url_assets: false\n      show_missing_season_assets: false\n      sync_mode: append\n      minimum_items: 1\n      default_collection_order:\n      delete_below_minimum: true\n      delete_not_scheduled: false\n      run_again_delay: 2\n      missing_only_released: false\n      only_filter_missing: false\n      show_unmanaged: true\n      show_filtered: false\n      show_options: false\n      show_missing: true\n      show_missing_assets: true\n      save_report: true\n      tvdb_language: eng\n      ignore_ids:\n      ignore_imdb_ids:\n      playlist_sync_to_user: all\n      verify_ssl: true\n    plex:\n      url: http://PLEX_IP_HERE:32400\n      token: YOUR_TOKEN_HERE\n      timeout: 60\n      clean_bundles: false\n      empty_trash: false\n      optimize: false\n    tmdb:\n      apikey: YOUR_API_KEY_HERE\n      language: en\n    tautulli:\n      url: http://TAUTULLI_IP_HERE:8182\n      apikey: TAUTULLI_API_KEY_HERE\n    omdb:\n      apikey: OMDB_API_KEY\n    radarr:\n      url: http://RADARR_IP_HERE:7878\n      token: RADARR_TOKEN_HERE\n      add_missing: false\n      root_folder_path: /movies\n      monitor: false\n      availability: cinemas\n      quality_profile: HD - 720p/1080p\n      tag: pmm\n      add_existing: false\n      search: false\n      radarr_path:\n      plex_path:\n    sonarr:\n      url: http://SONARR_IP_HERE:8989\n      token: SONARR_TOKEN_HERE\n      add_missing: false\n      add_existing: false\n      root_folder_path: /tv\n      monitor: pilot\n      quality_profile: HD - 720p/1080p\n      language_profile: English\n      series_type: standard\n      season_folder: true\n      tag: pmm\n      search: true\n      cutoff_search: false\n      sonarr_path:\n      plex_path:\n    trakt:\n      client_id: YOUR_CLIENT_ID_HERE\n      client_secret: YOUR_CLIENT_SECRET_HERE\n      authorization:\n          access_token: YOUR_ACCESS_TOKEN_HERE\n          token_type: Bearer\n          expires_in: 7889237\n          refresh_token: YOUR_REFERSH_TOKEN_HERE\n          scope: public\n          created_at: 1642462048\nkind: ConfigMap\nmetadata:\n  name: pmm-config\n  namespace: media\n</code></pre>"},{"location":"pmm/install/guides/kubernetes/#movie-config-map","title":"Movie Config Map","text":"<p>Config maps for collections (movies in this example) are more simple!</p> <pre><code>apiVersion: v1\ndata:\n  movies.yaml: |\n    collections:\n      Trakt Popular:\n        trakt_popular: 200\n        collection_order: custom\n        sync_mode: sync\n        sort_title: Traktpopular\n        summary: The most popular movies for all time.\n        radarr_add_missing: true\n        radarr_search: true\n        radarr_monitor: true\n      Tautulli Most Popular Movies:\n        sync_mode: sync\n        collection_order: custom\n        tautulli_watched:\n          list_days: 180\n          list_size: 10\n          list_minimum: 1\nkind: ConfigMap\nmetadata:\n  name: movie-config\n  namespace: media\n</code></pre>"},{"location":"pmm/install/guides/kubernetes/#tv-config-map","title":"TV Config Map","text":"<pre><code>apiVersion: v1\ndata:\n  tv.yaml: |\n    collections:\n      Most Popular:\n        smart_label: originally_available.desc\n        sync_mode: sync\n        imdb_list:\n          url: https://www.imdb.com/search/title/?title_type=tv_series,tv_miniseries\n          limit: 10\n        summary: The 10 most popular shows across the internet\n        sonarr_add_missing: true\n        sonarr_search: true\n        sonarr_monitor: pilot\n      Tautulli Most Popular:\n        sync_mode: sync\n        collection_order: custom\n        summary: The 10 most popular shows from Plex users\n        tautulli_popular:\n          list_days: 180\n          list_size: 10\nkind: ConfigMap\nmetadata:\n  name: tv-config\n  namespace: media\n</code></pre>"},{"location":"pmm/install/guides/kubernetes/#creating-dynamic-configuration-files-with-an-init-container","title":"Creating dynamic configuration files with an Init Container","text":"<p>IMDb search results may include results for media which has not yet been released, resulting in a collection that is incomplete.  In order to solve for this you can replace a static config map with a config file that is (re)generated when the cronjob starts each time.  This can be done by including an init container which renders a Jinja template to a file in the PVC.</p>"},{"location":"pmm/install/guides/kubernetes/#including-the-init-container-in-the-cron-job","title":"Including the Init Container in the Cron Job","text":"<p>NOTE the environment value nameed <code>JINJA_DEST_FILE</code> is the resulting name of the generated config file.</p> <pre><code>apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: plex-media-manager\n  namespace: media\nspec:\n  schedule: \"0 0 * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          securityContext:\n            runAsUser: 1000\n            runAsGroup: 1000\n          initContainers:\n            - name: render-dynamic-config\n              image: chrisjohnson00/jinja-init:v1.0.0\n              env:\n                # source and destination files\n                - name: JINJA_SRC_FILE\n                  value: /config_src/tv.yaml\n                - name: JINJA_DEST_FILE\n                  value: /config/tv.yaml\n                # let's be verbose\n                - name: VERBOSE\n                  value: \"1\"\n              volumeMounts:\n                # configMap mount point\n                - name: tv-config-template\n                  mountPath: /config_src\n                # target directory mount point; the final config file will be created here\n                - name: config\n                  mountPath: /config\n          containers:\n            - name: plex-media-manager\n              image: meisnate12/plex-meta-manager:latest\n              imagePullPolicy: Always\n              args: [ \"--run\", \"--read-only-config\" ]\n              resources:\n                limits:\n                  cpu: 100m\n                  memory: 256Mi\n                requests:\n                  cpu: 100m\n                  memory: 125Mi\n              volumeMounts:\n                - name: config\n                  mountPath: /config\n                - name: pmm-config\n                  mountPath: /config/config.yml\n                  subPath: config.yml\n                - name: movie-config\n                  mountPath: /config/movies.yaml\n                  subPath: movies.yaml\n          volumes:\n            - name: config\n              persistentVolumeClaim:\n                claimName: plex-media-manager\n            - configMap:\n                name: pmm-config\n              name: pmm-config\n            - configMap:\n                name: movie-config\n              name: movie-config\n            - configMap:\n                name: tv-config-jinja-template\n              name: tv-config-template\n          restartPolicy: OnFailure\n</code></pre>"},{"location":"pmm/install/guides/kubernetes/#templatizing-your-configuration","title":"Templatizing your configuration","text":"<p>This example will (re)generate the IMBD list URL and include the current date as the end date for the <code>release_date</code> value. <code>https://www.imdb.com/search/title/?title_type=tv_series,tv_miniseries&amp;release_date=1980-01-01,{{ now().strftime('%Y-%m-%d') }}</code></p> <p><code>{{ now().strftime('%Y-%m-%d') }}</code> is the Jinja code, which when rendered will be replaced with the current date in YYYY-MM-DD format.  <code>now()</code> is a special method defined in the Python code running in the init container to allow access to the current date, so changing the output format is as simple as changing the string in <code>strftime</code> to your desired date/time format for your list source.</p> <pre><code>apiVersion: v1\ndata:\n  tv.yaml: |\n    collections:\n      Most Popular:\n        smart_label: originally_available.desc\n        sync_mode: sync\n        imdb_list:\n          url: https://www.imdb.com/search/title/?title_type=tv_series,tv_miniseries&amp;release_date=1980-01-01,{{ now().strftime('%Y-%m-%d') }}\n          limit: 10\n        summary: The 10 most popular shows across the internet\n        sonarr_add_missing: true\n        sonarr_search: true\n        sonarr_monitor: pilot\n      Tautulli Most Popular:\n        sync_mode: sync\n        collection_order: custom\n        summary: The 10 most popular shows from Plex users\n        tautulli_popular:\n          list_days: 180\n          list_size: 10\nkind: ConfigMap\nmetadata:\n  name: tv-config-jinja-template\n  namespace: media\n</code></pre>"},{"location":"pmm/install/guides/local/","title":"Local Walkthrough","text":"<p>This article will walk you through getting Plex Meta Manager set up and running.  It will cover:</p> <ol> <li>Retrieving the Plex Meta Manager code</li> <li>Installing requirements</li> <li>Setting up the initial config file</li> <li>Setting up a metadata file and creating a couple sample collections.</li> </ol> <p>The specific steps you will be taking:</p> <ol> <li>Verify that Python 3.7 or better is installed and install it if not</li> <li>Verify that the Git tools are installed and install them if not</li> <li>Use <code>git</code> to retrieve the code</li> <li>Install requirements [extra bits of code required for Plex Meta Manager]</li> <li>Gather two things that Plex Meta Manager requires:<ul> <li>TMDb API Key</li> <li>Plex URL and Token</li> </ul> </li> <li>Then, iteratively:<ul> <li>use <code>python</code> to run Plex Meta Manager</li> <li>use a text editor to modify a couple of text files until you have a working config file and a single working metadata file.</li> </ul> </li> </ol> <p>Please note that using Python and Git can be technical. If you're not comfortable with these tools, you may want to use Docker to simplify the process. This will remove the need for Python and Git installs.</p> <p>Also, configuring Plex Meta Manager requires editing YAML files. If this is new to you, it may take some time to learn.</p> <p>Finally, this article provides a basic guide to get you started with Plex Meta Manager. It doesn't cover all the advanced features that this tool offers, such as creating custom collections or adding overlays. It's intended to help those who are new to running Python scripts get up and running with Plex Meta Manager.</p>"},{"location":"pmm/install/guides/local/#prerequisites","title":"Prerequisites.","text":"Info <p>Nearly anywhere you see</p> <pre><code>something like this\n</code></pre> <p>That\u2019s a command you\u2019re going to type or paste into your terminal (OSX or Linux) or Powershell (Windows).  In some cases it's displaying output from a command you've typed, but the difference should be apparent in context.</p> <p>IMPORTANT NOTE: This walkthrough is going to be pretty pedantic.  I\u2019m assuming you\u2019re reading it because you have no idea how to get a Python script going, so I\u2019m proceeding from the assumption that you want to be walked through every little detail.   You\u2019re going to deliberately cause errors and then fix them as you go through it.  This is to help you understand what exactly is going on behind the scenes so that when you see these sorts of problems in the wild you will have some background to understand what\u2019s happening.  If I only give you the happy path, then when you make a typo later on you\u2019ll have no idea where that typo might be or why it\u2019s breaking things.</p> <p>I am assuming you do not have any of these tools already installed.  When writing this up I started with a brand new Windows 10 install.</p> <p>This walkthrough involves typing commands into a command window.  On Mac OS X or Linux, you can use your standard terminal window, whether that's the builtin Terminal app or something like iTerm.  On Windows, you should use PowerShell.  There are other options for command windows in Windows, but if you want this to work as written, which I assume is the case since you've read this far, you should use Powershell.</p> <p>IMPORTANT: This walkthrough is assuming you are doing the entire process on the same platform; i.e. you're installing Plex Meta Manager and editing its config files on a single Linux, Windows, or OS X machine.  It doesn't account for situations like running Plex Meta Manager on a Linux machine while editing the config files on your Windows box.</p>"},{"location":"pmm/install/guides/local/#prepare-a-small-test-library-optional","title":"Prepare a small test library [optional]","text":"<pre><code>```{include} wt/wt-test-library.md\n```\n</code></pre>"},{"location":"pmm/install/guides/local/#starting-up-your-terminal","title":"Starting up your terminal.","text":"<p>Since most of this is typing commands into a terminal, you'll need to have a terminal open.</p>  Linux macOS Windows <p>If your Linux system is remote to your computer, connect to it via SSH.  That SSH session is the terminal you will be using, so leave it open.</p> <p>If you are running this on a desktop Linux machine, start up the Terminal application.  That window will be the terminal you will type commands into throughout this walkthrough, so leave it open.</p> <p>Open the Terminal app; this window will be the place you type commands throughout this walkthrough, so leave it open.  The Terminal app is in Applications -&gt; Utilities.</p> <p>You can also use iTerm or some other terminal app if you wish.  If you don't know what that means, use Terminal.</p> <p>Use the Start menu to open PowerShell.  This will be the window into which you type commands throughout this walkthrough, so leave it open.</p>"},{"location":"pmm/install/guides/local/#installing-python","title":"Installing Python.","text":"<p>In order to run a Python script. the first thing you'll need is a Python interpreter.  This is typically already present on Linux and Mac, but will probably have to be installed on Windows.</p> <p>First let's check if it's installed already [type this into your terminal]:</p> <pre><code>python3 --version\n</code></pre> <p>If this doesn't return <code>3.7.0</code> or higher, you'll need to get Python 3 installed.</p>  Linux macOS Windows <p>Describing a python install for any arbitrary linux is out of scope here, but if you're using Ubuntu, this might be useful.</p> <p>Follow the instructions here: Installing Python 3 on Mac OS X</p> <p>Before installing Python, try again without the <code>3</code>:</p> <pre><code>python --version\n</code></pre> <p>Depending on the version of Python, you may need to use one or the other.  If this works, you're ready to go, jsut substitute <code>python</code> for <code>python3</code> in the couple places it appears below.</p> <p>Go to http://www.python.org/download and download the next-to-latest minor version of Python for Windows in 32 or 64-bit as appropriate for your system [probably 64-bit].  As this is written, that's 3.10, while the latest is 3.11.</p>"},{"location":"pmm/install/guides/local/#why-the-next-to-latest","title":"Why the next-to-latest?","text":"<p>There is one dependency [<code>lxml</code>] that lags behind new Python releases; this will cause a failure when installing requirements in a moment if the newest Python version is too new [at time of writing the current is 3.11, and the requirements install fails on the lxml library].  You can avoid this by using the next-to-latest release.  At some point this will no longer be a problem, but that is outside the control of Plex Meta Manager.</p> <p>Once downloaded, run the installer.  Tick \u201cAdd to path\u201d checkbox at the bottom and click \u201cInstall Now\u201d.</p> <p>For Windows 10, you will need to enable scripts in PowerShell.  Follow the instructions here to do so.  If you skip this step you're going to hit a hard stop in a moment.</p>"},{"location":"pmm/install/guides/local/#installing-git","title":"Installing git","text":"<p>To copy the Plex Meta Manager code to your machine, we'll be using git.  This may be installed on Mac or Linux, and probably isn't in Windows.</p> <p>First let's check if it's installed already [type this into your terminal]:</p> <pre><code>git --version\n</code></pre> <p>If this doesn't return a version number, you'll need to get git installed.</p>  Linux macOS Windows <p>The git install is discussed here: Download for Linux and Unix</p> <p>The git install is discussed here: Git - Downloading Package</p> <p>Download the installer from here</p> <p>Run the install; you can probably just accept the defaults and click through except for the step that asks you to choose an editor; you probably want to choose something other than the default there:</p> <p></p> <p>This install comes with its own command line interface.  Do not use this interface in this walkthrough.  Continue to do everything here in Powershell.</p>"},{"location":"pmm/install/guides/local/#retrieving-the-plex-meta-manager-code","title":"Retrieving the Plex Meta Manager code","text":"<p>Now we're going to use <code>git</code> to make a copy of the code on your local computer.</p> <p>Clone the repo into your home directory and go into that directory [type this into your terminal]:</p> <pre><code>cd ~\ngit clone https://github.com/meisnate12/Plex-Meta-Manager\ncd Plex-Meta-Manager\n</code></pre> <p>NOTE: The rest of this walkthrough assumes you are staying in this directory in this terminal/Powershell window.</p> <p>IMPORTANT: In the future, when you want to run Plex Meta Manager at the command line, you have to be in this directory.</p> <p>When you open a command window to run Plex Meta Manager, the first step will always be:</p> <pre><code>cd ~\ncd Plex-Meta-Manager\n</code></pre> <p>There are parts of the code that are assuming and expecting that you will be in this directory when you run Plex Meta Manager [the fonts used in overlays are one example].  Be sure that you are always in this directory when you run Plex Meta Manager.</p> What did that do? <pre><code>cd ~\n</code></pre>   This changes to your home directory, which will be something like `/home/yourname` or `/Users/yourname` or `C:\\Users\\YourName` depending on the platform.   <pre><code>git clone https://github.com/meisnate12/Plex-Meta-Manager\n</code></pre>   This uses `git` to make a copy of (`clone`) the Plex Meta Manager code from where it is stored on `github`.   <pre><code>cd Plex-Meta-Manager\n</code></pre>   This moves into the directory that was created by the `clone` command.  <p>Later on you can move it elsewhere if you want, but for now put it there.  This will ensure that everything to follow works just like it says here.  Presumably you\u2019re reading this because the other docs are unclear to you.  Don\u2019t make unilateral changes to my assumptions while doing this.</p> Why use git instead of downloading the release ZIP?    Retrieving the code with `git` makes updating simpler.  When you want to update to the newest version, you can go into this directory and type:   <pre><code>git pull\n</code></pre>   No need to download a new ZIP, uncompress it, etc.   Also, if you are asked to [or want to] switch to the latest develop or nightly code, you can do so with:   <pre><code>git checkout develop\n</code></pre> <pre><code>git checkout nightly\n</code></pre>"},{"location":"pmm/install/guides/local/#setting-up-a-virtual-environment","title":"Setting up a virtual environment","text":"<p>This walkthrough is going to use a \"virtual environment\", since that provides a simple way to keep the requirements for a given thing self-contained; think of it as a \"sandbox\" for this script.  It also provides a clean way to recover from mistakes, and keeps the host system clean.</p>  Linux macOS Windows <p>[type this into your terminal] <pre><code>python3 -m venv pmm-venv\n</code></pre> If you see an error like: <pre><code>Error: Command '['/home/mroche/Plex-Meta-Manager/pmm-venv/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1.\n</code></pre> You probably need to make sure the Python 3.9-specific virtualenv support library is installed: [type this into your terminal] <pre><code>sudo apt-get install python3.9-venv\n</code></pre> Then try the original venv command above again.</p> <p>[type this into your terminal] <pre><code>python3 -m venv pmm-venv\n</code></pre></p> <p>[type this into your terminal] <pre><code>python -m venv pmm-venv\n</code></pre> If you see: <pre><code>Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings &gt; Manage App Execution Aliases.\n</code></pre> You apparently didn't check the \u201cAdd to path\u201d checkbox above under installing Python.  \"Repair\" your Python install and check \"add python to environment variables\".</p> What did that do? <pre><code>python3 -m venv pmm-venv\n</code></pre>   This tells Python3 to use the `venv` module to create a virtual environment called `pmm-venv`.  The only visible effect will be the creation of a `pmm-venv` directory.  <p>That command will not produce any output if it works; it will display an error if a problem occurs.  If everything is fine, you will be looking at something like this:</p> <pre><code>&gt; python -m venv pmm-venv\n&gt;\n</code></pre> <p>If you aren't looking at an error, you're ready to move on.</p> <p>That will create the virtual environment, and then you need to activate it:</p>  Linux macOS Windows <p>[type this into your terminal] <pre><code>source pmm-venv/bin/activate\n</code></pre></p> <p>[type this into your terminal] <pre><code>source pmm-venv/bin/activate\n</code></pre></p> <p>[type this into your terminal] <pre><code>.\\pmm-venv\\Scripts\\activate\n</code></pre> If you see something like this: <pre><code>.\\pmm-venv\\Scripts\\activate : File C:\\Users\\mroche\\Plex-Meta-Manager\\pmm-venv\\Scripts\\Activate.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at https:/go.microsoft.com/fwlink LinkID=135170.\nAt line:1 char:1\n+ .\\pmm-venv\\Scripts\\activate\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : SecurityError: (:) [], PSSecurityException\n    + FullyQualifiedErrorId : UnauthorizedAccess\n</code></pre> You apparently skipped the \"enable scripts in Powershell\" step above under installing Python for Windows.</p> <p>You will need to take care of that before moving on.  Follow the instructions here.</p> <p>Once you have done that, try the activation step again.</p> <p>That command will not produce any output if it works; it will display an error if a problem occurs.</p> <p>You may see a change in your prompt, something like this:</p> <pre><code>\u279c  Plex-Meta-Manager git:(master) \u2717 source pmm-venv/bin/activate\n(pmm-venv) \u279c  Plex-Meta-Manager git:(master) \u2717\n</code></pre> <p>Note that the prompt now shows the name of the virtual environment.  You may not see this; it's dependent on your terminal configuration, not anything to do with Python or Plex Meta Manager.</p> What did that do?    This tells Python to make the virtual environment \"active\", which means to use the copy of python that is available there, install all support libraries there, etc.  This keeps the Plex Meta Manager code and its runtime environment totally separate from your host machine's environment.  <p>An advantage of doing this in a virtual environment is that in the event something goes wrong with this part of the setup, you can delete that pmm-venv directory and do the setup again.</p> <p>IMPORTANT: In the future, when you want to run Plex Meta Manager, you will need to do this \"activation\" step every time.  Not the venv creation, just the activation:</p>  Linux macOS Windows <p>[type this into your terminal] <pre><code>source pmm-venv/bin/activate\n</code></pre></p> <p>[type this into your terminal] <pre><code>source pmm-venv/bin/activate\n</code></pre></p> <p>[type this into your terminal] <pre><code>.\\pmm-venv\\Scripts\\activate\n</code></pre></p>"},{"location":"pmm/install/guides/local/#installing-requirements","title":"Installing requirements","text":"<p>Plex Meta Manager, like every other Python script, depends on support libraries that manage things like connections to Plex, or getting things from the internet, or writing files and so on.</p> <p>These support libraries are called \u201crequirements\u201d, and they are defined in that file called <code>requirements.txt</code>.  To install them, type the following command [type this into your terminal]:</p> <pre><code>python -m pip install -r requirements.txt\n</code></pre> <p>You should see something like this [I\u2019ve removed a few lines for space, and the specific versions may have changed since this was captured]: Studio: 441 and 1807 and 2495 and 1286 and 2503 and 2264 <pre><code>Collecting PlexAPI==4.7.0\n  Downloading PlexAPI-4.7.0-py3-none-any.whl (133 kB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 133 kB 821 kB/s\nCollecting tmdbv3api==1.7.6\n  Downloading tmdbv3api-1.7.6-py2.py3-none-any.whl (17 kB)\n...\nInstalling collected packages: urllib3, idna, charset-normalizer, certifi, six, ruamel.yaml.clib, requests, tmdbv3api, schedule, ruamel.yaml, retrying, PlexAPI, pillow, pathvalidate, lxml, arrapi\n    Running setup.py install for retrying ... done\n    Running setup.py install for arrapi ... done\nSuccessfully installed PlexAPI-4.7.0 arrapi-1.1.3 certifi-2021.10.8 charset-normalizer-2.0.7 idna-3.3 lxml-4.6.3 pathvalidate-2.4.1 pillow-8.3.2 requests-2.26.0 retrying-1.3.3 ruamel.yaml-0.17.10 ruamel.yaml.clib-0.2.6 schedule-1.1.0 six-1.16.0 tmdbv3api-1.7.6 urllib3-1.26.7\nWARNING: You are using pip version 21.1.3; however, version 21.3 is available.\nYou should consider upgrading via the '/Users/mroche/Plex-Meta-Manager/pmm-venv/bin/python -m pip install --upgrade pip' command.\n</code></pre></p> <p>Don't worry about the WARNING about <code>pip version thus-and-such</code> if it comes up.</p> `Encountered error while trying to install package.`     If you see an error that ends in something like this:  <pre><code>   ...\n   building 'lxml.etree' extension\n   error: Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\": https://visualstudio.microsoft.com/visual-cpp-build-tools/\n   [end of output]\n\n   note: This error originates from a subprocess, and is likely not a problem with pip.\n   error: legacy-install-failure\n\n   \u00d7 Encountered error while trying to install package.\n   \u2570\u2500&gt; lxml\n</code></pre>   You've hit the error we were referring to above with the Python version being too recent.  Probably you are running Python 3.11 in late 2022 or Python 3.12 shortly after its release.  Deactivate and delete the virtual environment and create one based on the previous Python release [which may involve removing Python and reinstalling the older version depending on platform], then try this step again.   What did that do?    This told Python to use the `pip` module to install some libraries that Plex Meta Manager needs.  <p>Let\u2019s make sure it\u2019s working so far.</p> <pre><code>```{include} wt/wt-run-shell.md\n```\n</code></pre> <p>This is going to fail with an error, which you will then fix.</p> <p>You should see something like this:</p> <pre><code>Config Error: config not found at /Users/mroche/Plex-Meta-Manager/config\n</code></pre> <p>That error means you don\u2019t have a config file, but we at least know that the requirements are in place and Plex Meta Manager can run.</p>"},{"location":"pmm/install/guides/local/#create-a-directory-to-quiet-an-error-later","title":"Create a directory to quiet an error later","text":"<p>The default config file contains a reference to a directory that will show an error in the output later.  That error can safely be ignored, but it causes some confusion with new users from time to time.</p> <p>We'll create it here so the error doesn't show up later.</p>  Linux macOS Windows <p>[type this into your terminal] <pre><code>mkdir config/assets\n</code></pre></p> <p>[type this into your terminal] <pre><code>mkdir config/assets\n</code></pre></p> <p>[type this into your terminal] <pre><code>mkdir config\\assets\n</code></pre></p>"},{"location":"pmm/install/guides/local/#setting-up-the-initial-config-file","title":"Setting up the initial config file","text":"<pre><code>```{include} wt/wt-01-basic-config.md\n```\n</code></pre>"},{"location":"pmm/install/guides/local/#editing-the-config-template","title":"Editing the config template","text":"<p>First, make a copy of the template.  This is going to create a copy of the base template that you can then edit.  You only need to do this once.</p>  Linux macOS Windows <p>[type this into your terminal] <pre><code>cp config/config.yml.template config/config.yml\n</code></pre></p> <p>[type this into your terminal] <pre><code>cp config/config.yml.template config/config.yml\n</code></pre></p> <p>[type this into your terminal] <pre><code>copy .\\config\\config.yml.template .\\config\\config.yml\n</code></pre></p> <p>Now open the copy in an editor:</p> <pre><code>```{include} wt/wt-editor.md\n```\n\n```{include} wt/wt-02-config-bad-library.md\n```\n</code></pre>"},{"location":"pmm/install/guides/local/#testing-the-config-file","title":"Testing the config file","text":"<p>Save the file:</p> <pre><code>```{include} wt/wt-save.md\n```\n</code></pre> <p>Then run Plex Meta Manager again:</p> <pre><code>```{include} wt/wt-run-shell.md\n```\n\n```{include} wt/wt-03-lib-err-and-fix.md\n```\n</code></pre>"},{"location":"pmm/install/guides/local/#creating-a-few-sample-collections","title":"Creating a few sample collections.","text":"<pre><code>```{include} wt/wt-04-default-intro.md\n```\n</code></pre> <p>So let's run Plex Meta Manager and see this happen:</p> <pre><code>```{include} wt/wt-run-shell.md\n```\n\n```{include} wt/wt-04b-default-after.md\n```\n</code></pre>"},{"location":"pmm/install/guides/local/#setting-up-a-metadata-file-and-creating-a-sample-collection","title":"Setting up a metadata file and creating a sample collection.","text":"<pre><code>```{include} wt/wt-05-local-file.md\n```\n</code></pre> <p>Save the file:</p> <pre><code>```{include} wt/wt-save.md\n```\n</code></pre> <p>Then run Plex Meta Manager again:</p> <pre><code>```{include} wt/wt-run-shell.md\n```\n\n```{include} wt/wt-06-local-after.md\n```\n</code></pre>"},{"location":"pmm/install/guides/local/#adding-overlays-to-movies","title":"Adding Overlays to movies.","text":"<pre><code>```{include} wt/wt-07-overlay-add.md\n```\n</code></pre> <p>Save the file:</p> <pre><code>```{include} wt/wt-save.md\n```\n</code></pre> <p>Then run Plex Meta Manager again:</p> <pre><code>```{include} wt/wt-run-shell.md\n```\n\n```{include} wt/wt-08-overlay-after.md\n```\n\n```{include} wt/wt-09-next-steps.md\n```\n</code></pre> <p>When you are done, deactivate the virtual environment:</p> <p>[type this into your terminal]</p> <pre><code>deactivate\n</code></pre>"},{"location":"pmm/install/guides/local/#other-topics","title":"Other Topics","text":""},{"location":"pmm/install/guides/local/#scheduling","title":"Scheduling","text":"<pre><code>```{include} wt/wt-10-scheduling.md\n```\n</code></pre>"},{"location":"pmm/install/guides/local/#i-want-to-update-to-the-latest-version-of-plex-meta-manager","title":"I want to update to the latest version of Plex Meta Manager","text":"Linux macOS Windows <p>[type this into your terminal] <pre><code>cd ~/Plex-Meta-Manager\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n</code></pre></p> <p>[type this into your terminal] <pre><code>cd ~/Plex-Meta-Manager\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n</code></pre></p> <p>[type this into your terminal] <pre><code>cd ~\\Plex-Meta-Manager\ngit pull\n.\\pmm-venv\\Scripts\\activate\npython -m pip install -r requirements.txt\n</code></pre></p>"},{"location":"pmm/install/guides/local/#i-want-to-use-the-develop-branch","title":"I want to use the develop branch","text":"Linux macOS Windows <p>[type this into your terminal] <pre><code>cd ~/Plex-Meta-Manager\ngit checkout develop\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n</code></pre></p> <p>[type this into your terminal] <pre><code>cd ~/Plex-Meta-Manager\ngit checkout develop\ngit pull\nsource pmm-venv/bin/activate\npython -m pip install -r requirements.txt\n</code></pre></p> <p>[type this into your terminal] <pre><code>cd ~/Plex-Meta-Manager\ngit checkout develop\ngit pull\n.\\pmm-venv\\Scripts\\activate\npython -m pip install -r requirements.txt\n</code></pre></p>"},{"location":"pmm/install/guides/local/#i-want-to-use-the-nightly-branch","title":"I want to use the nightly branch","text":"<p>Follow the instructions for the <code>develop</code> branch above, subsituting <code>nightly</code> for <code>develop</code></p>"},{"location":"pmm/install/guides/local/#i-want-to-use-the-master-branch","title":"I want to use the master branch","text":"<p>Follow the instructions for the <code>develop</code> branch above, subsituting <code>master</code> for <code>develop</code></p> <p>The reinstall of requirements every time is probably overkill, but it's harmless and ensures that you always get any new versions or new requirements.</p>"},{"location":"pmm/install/guides/qnap/","title":"QNAP Walkthrough","text":"<p>This is a quick walkthrough of setting up the Plex Meta Manager Docker container in the QNAP \"Container Station\" UI.</p> <p>Steps. 1. Open Container Station; click \"Create\" in the left column.</p> <p></p> <ol> <li>Search for <code>meisnate12/plex-meta-manager</code>.</li> </ol> <p>On the \"Docker Hub\" tab you should see the image; click on it and click \"Install\".</p> <p></p> <ol> <li>Select the version you want to run from the dropdown and click \"Next\".</li> </ol> <p>The options are:     - <code>latest</code>: most recent official release; typically the most stable     - <code>develop</code>: development release, contains new features that haven't made it to latest yet, but may have minor problems     - <code>nightly</code>: bleeding-edge development version; latest fixes go here, but breakage should be expected.</p> <p></p> <ol> <li>Change the container name if you wish.</li> </ol> <p>Command line arguments can be entered in the \"Entrypoint\" field after <code>/tini -s python3 plex_meta_manager.py --</code>  IMPORTANT: DO NOT REMOVE ANY ELEMENT OF THAT COMMAND.</p> <p>For example: <code>/tini -s python3 plex_meta_manager.py -- --run</code></p> <p>Information on available command line argument can be found here</p> <p>Click \"Advanced Settings &gt;&gt;\"</p> <p></p> <ol> <li>Environment Variables can be added here:</li> </ol> <p>Information on available Environment Variables can be found here</p> <p></p> <ol> <li>Click Shared Folders Tab:</li> </ol> <p>Click \"Add\" in the middle section \"Volume from host\".</p> <p>\"Volume from host\" is the location on your QNAP where you want to store the config files.    \"Mount Point\" must be <code>/config</code></p> <p>When finished, click \"Create\".</p> <p></p>"},{"location":"pmm/install/guides/scheduling/","title":"Scheduling Guide","text":"<p>Plex Meta Manager is designed to be a background running service that \"wakes up\" and \"sleeps\" when it is scheduled to do so. By default and unless configured using the Time to Run Command, Plex Meta Manager expects to run every day at 5AM local time.</p> <p>Whilst it is possible to have <code>python plex-meta-manager.py</code> running in an open window constantly, this is not the recommended approach as it relies on an always-open command window that can be obtrusive to the user.</p> <p>Instead, it is recommended to set an automated scheduling service so that Plex Meta Manager can run in the background when scheduled to without any visible impact to the user (other than the Plex libraries and playlists updating).</p> <p>To control how individual parts of Plex Meta Manager are scheduled see the Schedule detail</p> DockerWindows Task SchedulerMacOS Launchd ServiceLinux Systemctl Servicecron <p>Using docker is the simplest and most robust solution to automating Plex Meta Manager scheduling.</p> <p>When running Plex Meta Manager within docker, the session will resume after a system reboot (assuming Docker is set to start at system startup, which is the default) and Plex Meta Manager will run in the background at all times.</p> <p>There's a Docker Walkthrough with more detailed instructions on setting up Plex Meta Manager within docker. The simplest command to facilitate a docker run is:</p> <pre><code>docker run -d \\\n  --restart=unless-stopped \\\n  -e TZ=&lt;TIMEZONE&gt;\n  -v /path/to/config:/config:rw \\\n  meisnate12/plex-meta-manager\n</code></pre> <p>TZ=  is replaced with your local timezone, or the timezone your device is in that is running Plex Meta Manager. For a list of available timezones, please see Timezones. You want to replace  with the TZ Database Name.  <pre><code>TZ=America/New_York\n</code></pre> <p>This will run Plex Meta Manager in the background persistently until it is stopped by the user. While the docker container will be persistently running, Plex Meta Manager will not begin the run until the scheduled time.</p> <p>Further customizations of the docker run command can be used to specify set times to run Plex Meta Manager, further information on this and other Run Commands can be found here</p> <p>Windows Task Scheduler is advised for those who followed the Windows instructions in the Local Walkthrough Guides and/or do not want to run Plex Meta Manager within docker.</p> <p>Windows Task Scheduler allows the user to run commands and services at scheduled times and intervals.</p> <p>There are two methods of running Plex Meta Manager: * Single run Scheduled Task   * Background run Scheduled Task</p> <p>These will be explained further down this page.</p> <p>These guides assume the user has followed the Windows instructions in the Local Walkthrough Guides which includes setting up the virtual environment. Please also ensure to edit any commands to be reflective of the live environment (such as usernames, installation directories).</p> <ol> <li>Create launchd service:</li> </ol> <p>A couple examples; you'll want to edit the THINGS IN ALL CAPS to reflect your system.</p> <p>Keep PMM running constantly, let it wait to do its thing at 3AM:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n &lt;key&gt;Label&lt;/key&gt;\n &lt;string&gt;com.YOUR_USERNAME.plex-meta-manager&lt;/string&gt;\n &lt;key&gt;ProgramArguments&lt;/key&gt;\n &lt;array&gt;\n     &lt;string&gt;sh&lt;/string&gt;\n     &lt;string&gt;-c&lt;/string&gt;\n     &lt;string&gt;pmm-venv/bin/python plex-meta-manager.py --config /PATH/TO/PMM/config/config.yml&lt;/string&gt;\n &lt;/array&gt;\n &lt;key&gt;UserName&lt;/key&gt;\n &lt;string&gt;YOUR_USERNAME&lt;/string&gt;\n &lt;key&gt;WorkingDirectory&lt;/key&gt;\n &lt;string&gt;/PATH/TO/PMM&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>Run PMM every 6 hours, running it immediately and letting it quit:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n &lt;key&gt;Label&lt;/key&gt;\n &lt;string&gt;com.YOUR_USERNAME.plex-meta-manager&lt;/string&gt;\n &lt;key&gt;ProgramArguments&lt;/key&gt;\n &lt;array&gt;\n     &lt;string&gt;sh&lt;/string&gt;\n     &lt;string&gt;-c&lt;/string&gt;\n     &lt;string&gt;pmm-venv/bin/python plex-meta-manager.py --config /PATH/TO/PMM/config/config.yml --run&lt;/string&gt;\n &lt;/array&gt;\n &lt;key&gt;StartCalendarInterval&lt;/key&gt;\n &lt;array&gt;\n     &lt;dict&gt;\n         &lt;key&gt;Hour&lt;/key&gt;\n         &lt;integer&gt;6&lt;/integer&gt;\n     &lt;/dict&gt;\n     &lt;dict&gt;\n         &lt;key&gt;Hour&lt;/key&gt;\n         &lt;integer&gt;12&lt;/integer&gt;\n     &lt;/dict&gt;\n     &lt;dict&gt;\n         &lt;key&gt;Hour&lt;/key&gt;\n         &lt;integer&gt;18&lt;/integer&gt;\n     &lt;/dict&gt;\n     &lt;dict&gt;\n         &lt;key&gt;Hour&lt;/key&gt;\n         &lt;integer&gt;24&lt;/integer&gt;\n     &lt;/dict&gt;\n &lt;/array&gt;\n &lt;key&gt;UserName&lt;/key&gt;\n &lt;string&gt;YOUR_USERNAME&lt;/string&gt;\n &lt;key&gt;WorkingDirectory&lt;/key&gt;\n &lt;string&gt;/PATH/TO/PMM&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>A useful tool to generate these plist files is https://zerolaunched.herokuapp.com/</p> <p>Save this file as <code>com.YOUR_USERNAME.plex-meta-manager.plist</code> in <code>~/Library/LaunchAgents</code>.</p> <ol> <li>Load and start the agent \ud83d\ude80</li> </ol> <p>Retrieve your user id with <code>id -u</code> in Terminal.  You'll need it for the commands in this step.</p> <p>Load the agent by executing the following commands:</p> <pre><code>cd ~/Library/LaunchAgents/\nlaunchctl bootstrap gui/YOUR-USER-ID com.YOUR_USERNAME.plex-meta-manager.plist\n</code></pre> <p>And then kick-start it with:</p> <pre><code>launchctl kickstart -k gui/YOUR-USER-ID/com.YOUR_USERNAME.plex-meta-manager\n</code></pre> <p>Note that this command uses the label, not the plist filename. The -k options means that the service will first be killed, if running.</p> <p>The agent should now be active and starting the program according to the schedule you set.</p> <ol> <li>Create the service file:</li> </ol> <pre><code>sudo nano /etc/systemd/system/plex-meta-manager.service\n</code></pre> <p>Put the following into the file:    <pre><code># /etc/systemd/system/plex-meta-manager.service\n\n[Unit]\nDescription=Plex Meta Manager\nAfter=network-online.target\n\n[Service]\nUser=USER\nGroup=GROUP\nType=simple\nEnvironment=LC_ALL=C.UTF-8\nEnvironment=LANG=C.UTF-8\nWorkingDirectory=/path/to/plex-meta-manager\nExecStart=/path/to/plex-meta-manager/pmm-venv/bin/python /path/to/plex-meta-manager/plex_meta_manager.py\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=default.target\n</code></pre></p> <p>Change <code>USER</code> and <code>GROUP</code> to reflect your user and group.</p> <p>Change <code>/path/to/plex-meta-manager</code> to reflect where you've installed Plex Meta Manager.</p> <p>NOTE: This is assuming you created the <code>pmm-venv</code> virtual environment as described in the Local Walkthrough</p> <p>Save and close the file.</p> <ol> <li> <p>Load and start the service</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl start plex-meta-manager.service\n</code></pre> </li> <li> <p>You can check whether the service is running with:</p> <pre><code>sudo systemctl status plex-meta-manager.service\n</code></pre> </li> </ol> <p>The cron utility is used for running scripts and commands at regular intervals, and at specific times and dates. It\u2019s built into most Operating Systems (namely Linux and Mac), and provides a very useful way to schedule tasks on your server. It also works for running Docker commands on a schedule.</p> <ol> <li>Decide when you want to run Plex Meta Manager</li> </ol> <p><code>cron</code> needs a specific syntax to express schedules.  A cron schedule is something like \"Every Tuesday at 4\" or \"5 minutes past every other hour\".</p> <p>You can generate the required line by checking boxes using something like crontab-generator.</p> <p>The command you use in crontab will probably be the command you use to run it on the command line.</p> <p>A command you could use for this:</p> <pre><code>cd /path/to/plex-meta-manager &amp;&amp; pmm-venv/bin/python plex_meta_manager.py --config config/config.yml --run\n</code></pre> <p>NOTE: This is assuming you created the <code>pmm-venv</code> virtual environment as described in the Local Walkthrough</p> <ol> <li> <p>Open the system crontab for editing:</p> <pre><code>sudo crontab -e\n</code></pre> </li> <li> <p>Paste in the crontab line you got from <code>crontab-generator</code>, or type in one of your own.</p> </li> <li> <p>Save and close the file.</p> </li> </ol>"},{"location":"pmm/install/guides/scheduling/#background-run-scheduled-task","title":"Background Run Scheduled Task","text":"<p>This method will start Plex Meta Manager at system startup and will keep Plex Meta Manager running in the background indefinitely. The user can then define set days and times for the Configuration File to be processed, and Plex Meta Manager will handle processing as and when required.</p> <p>This is the recommended approach as it allows the user additional control over how and when Plex Meta Manager processes.</p> Background Run Scheduled Task <ol> <li>Create a <code>waiter.cmd</code> file by opening the text editor (i.e. Notepad, TextEdit) and pasting the following code:</li> </ol> <p><pre><code>cd C:\\Users\\USERNAMEHERE\\Plex-Meta-Manager\n.\\pmm-venv\\Scripts\\python .\\plex_meta_manager.py\n</code></pre>    * This will navigate to the Plex Meta Manager directory, then run PMM. At the scheduled time [as defined within Plex Meta Manager], PMM will process the Configuration File and will then wait until the next scheduled time.</p> <ol> <li> <p>Open Task Scheduler by searching for it in the Start Menu or by opening the Run window (Windows + R) and typing taskschd.msc before hitting OK.</p> </li> <li> <p> Ensure that Task Scheduler is opened and not Task Manager </p> <p></p> </li> <li> <p>Select \"Create a basic task\" on the right-hand column</p> <p></p> </li> <li> <p>Give the task a name, in this example <code>Background PMM</code> and then select \"Next\"</p> <p></p> </li> <li> <p>Choose the frequency that PMM should run and then select \"Next\", <code>When the computer starts</code> is recommended.</p> <p></p> </li> <li> <p>Choose the action \"Start a program\" and select \"Next\".</p> <p></p> </li> <li> <p>Click \"Browse\", Navigate to the PMM directory and choose <code>waiter.cmd</code>, which was created in Step 1, then select \"Open\".  NOTE: Your path may vary from the illustration here; navigate to the file you created and saved in Step 1.</p> <p></p> </li> <li> <p>Copy the directory everything up to but not including <code>waiter.cmd</code> from the \"Program/Script\" field, and paste it into the \"Start in\" field.  This is <code>C:\\User\\IEUser\\Plex-Meta-Manager-1.15.1</code> in the example below, then select \"next\".  NOTE: Your path may vary from the illustration or example.</p> <p></p> </li> <li> <p>Click \"Finish\".</p> </li> <li> <p>Click \"Task Schedule Library\" on the left. The \"Background PMM\" task should be visible.</p> </li> </ol> <p>Plex Meta Manager will now launch at system startup, but will wait until the user-specified scheduled time before executing, and will then wait in the background for the next scheduled run.</p>"},{"location":"pmm/install/guides/scheduling/#single-run-scheduled-task","title":"Single Run Scheduled Task","text":"<p>This method will start Plex Meta Manager at the desired time, immediately begin running the Configuration File and will then kill the process once it has completed.</p> Single Run Scheduled Task <ol> <li>Create a <code>runner.cmd</code> file by opening the text editor (i.e. Notepad, TextEdit) and pasting the following code:</li> </ol> <p><pre><code>cd C:\\Users\\USERNAMEHERE\\Plex-Meta-Manager\n.\\pmm-venv\\Scripts\\python .\\plex_meta_manager.py --run\n</code></pre>    * This will navigate to the PMM directory, then launch PMM using the <code>-r</code>/<code>--run</code> flag which triggers an immediate run. Once complete, Plex Meta Manager will exit.</p> <pre><code>  Save this file to C:\\Users\\USERNAMEHERE\\Plex-Meta-Manager\\runner.cmd`.\n</code></pre> <ol> <li> <p>Open Task Scheduler by searching for it in the Start Menu or by opening the Run window (Windows + R) and typing taskschd.msc before hitting OK.</p> </li> <li> <p> Ensure that Task Scheduler is opened and not Task Manager </p> <p></p> </li> <li> <p>Select \"Create a basic task\" on the right-hand column</p> <p></p> </li> <li> <p>Give the task a name, in this example <code>Run PMM</code> and then select \"Next\"</p> <p></p> </li> <li> <p>Choose the frequency that PMM should run and then select \"Next\", <code>Daily</code> is recommended.</p> <p></p> </li> <li> <p>Specify the first date and time at which PMM should run and then select \"Next\".</p> <p></p> </li> <li> <p>Choose the action \"Start a program\" and select \"Next\".</p> <p></p> </li> <li> <p>Click \"Browse\", Navigate to the PMM directory and choose <code>runner.cmd</code>, which was created in Step 1, then select \"Open\".</p> <p></p> </li> <li> <p>Copy the directory everything up to but not including <code>runner.cmd</code> from the \"Program/Script\" field, and paste it into the \"Start in\" field.  This is <code>C:\\User\\IEUser\\Plex-Meta-Manager-1.15.1</code> in the example below, then select \"next\".</p> <p></p> </li> <li> <p>Check \"Open the properties dialog\" if desired (not required) then select \"Finish\".</p> </li> </ol> <p></p> <ol> <li>Click \"Task Schedule Library\" on the left. The PMM Run task should be visible.</li> </ol> <p></p> <p>Plex Meta Manager will now run at the set date/time you selected in Step 6, and will run each subsequent day at the same time.</p>"},{"location":"pmm/install/guides/synology/","title":"Synology Walthrough","text":"<p>This is a quick walkthrough of setting up the Plex-Meta-Manager Docker container in the Synology UI.</p>"},{"location":"pmm/install/guides/synology/#prerequisite-installing-docker","title":"Prerequisite: Installing Docker","text":"<ul> <li>Open the Package Center app from the Synology Web GUI.</li> </ul> <ul> <li>Type <code>docker</code> in the search bar and once it comes up click \"Install\" to add Docker. and then click \"Open\" to bring it up.</li> </ul>"},{"location":"pmm/install/guides/synology/#installing-plex-meta-manager","title":"Installing Plex Meta Manager","text":"<ol> <li>Open the Docker app.</li> </ol> <ol> <li>Search and Download the Image.</li> <li>Click Registry.</li> <li>Search for <code>meisnate12/plex-meta-manager</code>.</li> <li>Select the Repository.</li> <li>Click Download.</li> </ol> <ol> <li>Select the tag you want to run from the dropdown and click \"Select\".</li> </ol> <p>The options are:     - <code>latest</code> - most recent official release; typically the most stable.     - <code>develop</code> - development release, contains new features that haven't made it to latest yet, but may have minor problems.     - <code>nightly</code> - bleeding-edge development version; latest fixes go here, but breakage should be expected.</p> <p></p> <ol> <li>Select the Image and Create a Container.</li> <li>Click Image.</li> <li>Select the <code>meisnate12/plex-meta-manager</code> Image.</li> <li>Click Launch.</li> </ol> <p></p> <p>From this point on the setup looks a little different depending on if the Synology is running DiskStation Manager 7 or DiskStation Manager 6.</p> DiskStation Manager 7DiskStation Manager 6 <ol> <li>Specify your docker network type. Then click \"Next\".</li> </ol> <p></p> <ol> <li> <p>You can name the Container whatever you want using the \"Container Name\" text Box.</p> <p></p> </li> <li> <p>To add Environment Variables and Command Line Arguments click \"Advanced Settings\". (Optional)</p> <p>Information on available Command Line Arguments and Environment Variables can be found here</p> <p>To add an Environment Variable click \"Environment\" then click Add\" and then fill in the Variable and Value.</p> <p></p> <p>To use Command Line Arguments click \"Execution Command\" put the arguments in the \"Command\" text field.</p> <p></p> <p>Click \"Save\" to save the settings and go back to the General Settings Screen.</p> </li> <li> <p>Click \"Next\" from the General Settings Screen to get to the Port Settings Screen where you just want to click \"Next\" as Plex Meta Manager has no Ports.</p> <p></p> </li> <li> <p>Next we need to add you config folder to the container. From the Volume Settings Screen click \"Add Folder\".</p> <p></p> </li> <li> <p>Select from your Synology File System where you want to store your Plex Meta Manager config files and then enter <code>/config</code> as the \"Mount path\". Then click \"Next\" to go to the Summary Page.</p> <p></p> </li> <li> <p>From the Summary Page select \"Done\" to finish and creating the container.</p> <p></p> </li> </ol> <ol> <li>You can name the Container whatever you want using the \"Container Name\" text Box. Then click \"Advanced Settings\".</li> </ol> <p></p> <ol> <li> <p>Next we need to add you config folder to the container. Select the \"Volume\" Tab, click \"Add Folder\", and select from your Synology File System where you want to store your Plex Meta Manager config files.</p> <p></p> </li> <li> <p>Enter <code>/config</code> as the \"Mount Point\".</p> <p></p> </li> <li> <p>Select the \"Environment\" Tab. (Optional)</p> <p>Environment Variables and Command Line Arguments can be added here.</p> <ul> <li>To add an Environment Variable Click \"Add\" and then fill in the Variable and Value.</li> <li>To use Command Line Arguments put the arguments in the \"Command\" text field.</li> </ul> <p>Information on available Command Line Arguments and Environment Variables can be found here</p> <p></p> </li> <li> <p>Select \"Apply\" to save the \"Advanced Settings\", select \"Next\" to go to the Summary, and select \"Done\" to finish and creating the container.</p> <p></p> </li> </ol>"},{"location":"pmm/install/guides/unraid/","title":"unRAID Walkthrough","text":"<p>Thankfully, getting Plex Meta Manager working on unRAID is a fairly simple task. unRAID works mostly with docker containers, so the pre-built container available on docker hub works perfectly with a little configuration. To install a container from docker hub, you will need community applications - a very popular plugin for unRAID servers. If you don't already have this installed, you can install it here</p>"},{"location":"pmm/install/guides/unraid/#basic-installation","title":"Basic Installation","text":"<ol> <li> <p>Head to the <code>Apps</code> tab of unRAID (Community Applications), and search <code>Plex Meta Manager</code> in the upper right search box. There will be a couple of results shown, but you should ignore them (Why?) and use the official image.</p> </li> <li> <p>Click the <code>Install</code> button on the Template from Sohjiro's Repository Tools.</p> </li> <li> <p>Choose which branch you want to run <code>latest</code>, <code>develop</code>, or <code>nightly</code>. </p> </li> <li> <p>Click <code>Show more settings...</code> to set any Environmental Variables you wish to use. None are required for Plex Meta Manager to work.</p> </li> <li> <p>For example if you wish to have the container perform a run immediately and then shut down set <code>Run Immediately (--run)</code> to <code>true</code>.</p> </li> <li> <p>Hit <code>Apply</code>, and allow unRAID to download the docker container.</p> </li> <li> <p>Navigate to the <code>Docker</code> tab in unRAID, and stop the <code>plex-meta-manager</code> container if it has auto-started.</p> </li> <li> <p>Create <code>config.yml</code> and <code>library.yml</code> files as-per the documentation in the Host Path you set (/mnt/user/appdata/plex-meta-manager by default)</p> </li> <li> <p>Once finished, run the container. Voila! Logs are located in <code>yourhostpath/logs</code>.</p> </li> </ol>"},{"location":"pmm/install/guides/unraid/#advanced-installation-authenticating-trakt-or-myanimelist","title":"Advanced Installation (Authenticating Trakt or MyAnimeList)","text":"<p>Due to how unRAID handles docker containers, it can be a little confusing at first to enable Trakt, MyAnimeList, and other sources. At this time, these sources require you to follow through to a URL, and provide a code or link to Plex Meta Manager. unRAID doesn't have a built-in way to interact with the terminals of docker containers, so a workaround must be used:</p> <ol> <li> <p>Stop the Plex Meta Manager docker container if it's currently running.</p> </li> <li> <p>Follow the instructions for either Trakt or MyAnimeList, and add the relevant values to your <code>config.yml</code></p> </li> <li> <p>Edit the <code>Time to Run</code> variable to reflect a time that is NOT the current time. We don't want Plex Meta Manager to be running right now. Set <code>Run</code> to <code>false</code> if you've chosen to add that variable. Then, start the container.</p> </li> <li> <p>Click the Terminal button in the upper right corner of the unRAID WebUI (<code>&gt;_</code>)</p> </li> <li> <p>Run <code>docker exec -it plex-meta-manager /bin/bash</code></p> </li> </ol> <p>Note: this name is case-sensitive.  If this gives you an error like \"Error: No such container: plex-meta-manager\"; check the container config to see if you've named it something like \"Plex-Meta-Manager\",  If that's the case, change the name in the command to match your container.</p> <ol> <li> <p>Run <code>ls</code> to make sure you're in the same directory as <code>plex_meta_manager.py</code>. If you don't see Plex Meta Manager, run <code>cd /</code></p> </li> <li> <p>Run <code>python plex_meta_manager.py -r</code>, and watch as Plex Meta Manager comes to life.</p> </li> <li> <p>You'll now notice, as per the configuration documentation on these sources, Plex Meta Manager will ask you to click a URL and return an input. Go ahead and do so in this terminal window.</p> </li> <li> <p>Once finished, and Plex Meta Manager succeeds in connecting to your source, press <code>Ctrl + C</code> to cancel Plex Meta Manager - and close out of the terminal window. Go ahead and stop the docker container, restore your container settings to your original preferences (restore <code>Time to Run</code>), and start the container.</p> </li> </ol>"},{"location":"pmm/install/guides/wt/wt-01-basic-config/","title":"Wt 01 basic config","text":"<p>Next you\u2019ll set up the config file.  This tells PMM how to connect to Plex and a variety of other services.</p> <p>Before you do this you\u2019ll need:</p> <ol> <li>TMDb API key.  They\u2019re free.</li> <li>Plex URL and Token</li> </ol> <p>There are a bunch of other services you can configure in the config file, but these two are the bare minimum.</p>"},{"location":"pmm/install/guides/wt/wt-01-basic-config/#getting-a-tmdb-api-key","title":"Getting a TMDb API Key","text":"<p>Note that if you already have an API key, you can use that one.  You don\u2019t need another.</p> <p>Go to https://www.themoviedb.org/.  Log into your account [or create one if you don\u2019t have one already], then go to \u201cSettings\u201d under your account menu.</p> <p>In the sidebar menu on the left, select \u201cAPI\u201d.</p> <p>Click to generate a new API key under \"Request an API Key\".  If there is already one there, copy it and go to the next step.</p> <p>There will be a form to fill out; the answers are arbitrary.  The URL can be your personal website, or probably even google.com or the like.</p> <p>Once you\u2019ve done that there should be an API Key available on this screen.  If you see v3 and v4, you want the v3 key.</p> <p>Copy that value, you\u2019ll need it for the config file.</p>"},{"location":"pmm/install/guides/wt/wt-01-basic-config/#getting-a-plex-url-and-token","title":"Getting a Plex URL and Token","text":"<p>The Plex URL is whatever URL you\u2019d use from this machine to connect directly to your Plex server [i.e. NOT app.plex.tv].</p> <p>As with the TMDb API Key, if you already have a Plex Token, you can use that one.</p> <p>This article will describe how to get a token: Finding an authentication token</p>"},{"location":"pmm/install/guides/wt/wt-02-config-bad-library/","title":"Wt 02 config bad library","text":"<p>Scroll down a bit and update the three things you just collected; Plex URL, Plex Token, and TMDb API Key.</p> <pre><code>plex:                                           # Can be individually specified per library as well\nurl: http://bing.bang.boing                &lt;&lt;&lt; ENTER YOUR PLEX URL HERE\ntoken: XXXXXXXXXXXXXXXXXXXX                &lt;&lt;&lt; ENTER YOUR PLEX TOKEN HERE\ntimeout: 60\nclean_bundles: false\nempty_trash: false\noptimize: false\ntmdb:\napikey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   &lt;&lt;&lt; ENTER YOUR TMDb API KEY HERE\nlanguage: en\n</code></pre> <p>Now scroll up and look at the top section:</p> <pre><code>## This file is a template remove the .template to use the file\n\nlibraries:                       # This is called out once within the config.yml file\nMovies:                        # Each library must match the Plex library name\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\noverlay_path:\n- remove_overlays: false   # Set this to true to remove all overlays\n- pmm: ribbon              # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\nTV Shows:\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\noverlay_path:\n- remove_overlays: false   # Set this to true to remove all overlays\n- pmm: ribbon              # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\nAnime:\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: anilist             # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\nMusic:\nmetadata_path:\n- file: config/Music.yml   # This is a local file THAT YOU MIGHT CREATE\n</code></pre> <p>You will ultimately need an entry here for each of the libraries on which you want PMM to act.  Those top-level elements [Movies, TV Shows, Anime, Music] are names of libraries on your Plex server.</p> <p>For now, delete the \u201cTV Shows\u201d, \u201cAnime\u201d, and \"Music\" sections and change the name of the \u201cMovies\u201d section to \u201cMovies-NOSUCHLIBRARY\":</p> <pre><code>libraries:\nMovies-NOSUCHLIBRARY:                         ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n</code></pre> <p>This is intended to cause an error for illustration that you will then fix.</p>"},{"location":"pmm/install/guides/wt/wt-03-lib-err-and-fix/","title":"Wt 03 lib err and fix","text":"<p>I\u2019ve removed some of the lines for space, but have left the important bits:</p> <pre><code>...\n|                                            Starting Run|\n...\n| Locating config...\n|\n| Using /Users/mroche/Plex-Meta-Manager/config/config.yml as config\n...\n| Connecting to TMDb...\n| TMDb Connection Successful\n...\n| Connecting to Plex Libraries...\n...\n| Connecting to Movies-NOSUCHLIBRARY Library...                                                      |\n...\n| Plex Error: Plex Library Movies-NOSUCHLIBRARY not found                                            |\n| Movies-NOSUCHLIBRARY Library Connection Failed                                                     |\n|====================================================================================================|\n| Plex Error: No Plex libraries were connected to                                                    |\n...\n</code></pre> <p>You can see there that PMM found its config file, was able to connect to TMDb, was able to connect to Plex, and then failed trying to read the \u201cMovies-NOSUCHLIBRARY\" library, which of course doesn\u2019t exist.</p> <p>Open the config file again and change \"Movies-NOSUCHLIBRARY\" to reflect your own Movie library in Plex.</p> <p>My Movies library is called \u201cMain Movies\", so mine looks like this:</p> <pre><code>libraries:\nMain Movies:                            ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n</code></pre>"},{"location":"pmm/install/guides/wt/wt-04-default-intro/","title":"Wt 04 default intro","text":"<p>Plex-Meta-Manager provides an extensive collection of \"default\" metadata files.</p> <p>These files provide a simple way for you to create collections based on franchises or awards or actors, etc.</p> <p>The default config links to two of them:</p> <pre><code>      - pmm: basic\n      - pmm: imdb\n</code></pre> <p>The first will create:</p> <ul> <li>Newly Released</li> <li>New Episodes [TV libraries only]</li> </ul> <p>The second will create:</p> <ul> <li>IMDb Popular</li> <li>IMDb Top 250</li> <li>IMDb Lowest Rated</li> </ul>"},{"location":"pmm/install/guides/wt/wt-04b-default-after/","title":"Wt 04b default after","text":"<p>Depending on the size of the library, this may take a while.</p> <p>As it builds the collections, you should see a fair amount of logging about which movies are being added and which ones aren\u2019t found.  Once it completes, go to Plex, go to your Movies library, and click \u201cCollections\u201d at the top.</p> <p>On my test library, this created four collections.  You may see fewer depending on what specific movies are in that library.</p> <p></p> <p>Perhaps you can do everything you want with the defaults.  You can investigate what they can provide under the \"Defaults\" heading at the top.</p>"},{"location":"pmm/install/guides/wt/wt-05-local-file/","title":"Wt 05 local file","text":"<p>If the default metadata files do not allow you to create the collections you want, you can define your own collections in your own metadata files to do whatever you like within the capabilities of PMM.  We will create a simple collection that will contain 20 comedy movies since 2012.</p> <p>First, open the metadata file [this will create the file if it doesn't already exist]:</p>  Linux macOS Windows <p>[type this into your terminal]</p> <pre><code>nano \"config/Movies.yml\"\n</code></pre> <p>[type this into your terminal]</p> <pre><code>nano \"config/Movies.yml\"\n</code></pre> <p>[type this into your terminal]</p> <pre><code>notepad \"config\\Movies.yml\"\n</code></pre> <p>In this file, add the following, exactly as it is shown here:</p> <pre><code>collections:\nRecent Comedy:\nplex_search:\nall:\ngenre: Comedy\nyear.gte: 2012\nlimit: 20\n</code></pre> <p>Save the file:</p>  Linux macOS Windows <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>notepad</code>, type control-<code>s</code> or choose <code>Save</code> from the <code>File</code> menu.</p> <p>Next, add a reference to this file to your config file.</p> <p>Open the config file again and add the last line shown below:</p> <pre><code>libraries:\nMain Movies:                            ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n- file: config/Movies.yml\n</code></pre> <p>That line needs to match the path you used when you created the file a moment ago.</p>"},{"location":"pmm/install/guides/wt/wt-06-local-after/","title":"Wt 06 local after","text":"<p>You should see that the metadata file gets loaded:</p> <pre><code>| Loading Metadata File: config/Movies.yml\n| Metadata File Loaded Successfully\n</code></pre> <p>As it builds the collection, you should see a fair amount of logging about which movies are being added and which ones aren\u2019t found.  Once it completes, go to Plex, go to your Movies library, and click \u201cCollections\u201d at the top.</p> <p>You should see the new collection:</p> <p></p> <p>When you click into each, you\u2019ll see the movies that PMM added to each collection.</p> <p>Each time you run Plex Meta Manager, new movies that match the collection definitions will be added.  For example, if you don\u2019t have \u201cThe ShawShank Redemption\u201d now, when you download it and run PMM again it will be added to the IMDB 250 collection.</p>"},{"location":"pmm/install/guides/wt/wt-07-overlay-add/","title":"Wt 07 overlay add","text":"<p>The default metadata files include a set of overlays you can add to your posters.</p> <p>We'll add resolution overlays to the movies in this library as an example.</p> <p>Open the config file again and add the last three lines shown below:</p> <pre><code>libraries:\nMain Movies:                            ## &lt;&lt;&lt; CHANGE THIS LINE\nmetadata_path:\n- pmm: basic               # This is a file within the defaults folder in the Repository\n- pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n- file: config/Movies.yml\noverlay_path:\n- remove_overlays: false\n- pmm: resolution\n</code></pre>"},{"location":"pmm/install/guides/wt/wt-08-overlay-after/","title":"Wt 08 overlay after","text":"<p>While it runs this time you should see the previous collections go by pretty quickly, since they aren't changing, and then a lot of logging as PMM decides which overlays apply to which movies.</p> <p>This may take quite a while depending on the size of this library.</p> <p>Eventually, you'll see it start applying overlays to all your movies:</p> <pre><code>|=========================================================|\n|     Applying Overlays for the Movies - 4K Library       |\n|=========================================================|\n|                                                         |\n| 10 Cloverfield Lane         | Overlays Applied: 4K-HDR  |\n| 10 Minutes Gone             | Overlays Applied: 4K-HDR  |\n| 10 Things I Hate About You  | Overlays Applied: 4K-HDR  |\n| 12 Mighty Orphans           | Overlays Applied: 4K-HDR  |\n| 12 Monkeys                  | Overlays Applied: 4K-DV   |\n| 12 Strong                   | Overlays Applied: 4K-HDR  |\n...\n</code></pre> <p>When it finishes, go to the Library tab in this library in Plex:</p> <p></p>"},{"location":"pmm/install/guides/wt/wt-09-next-steps/","title":"Wt 09 next steps","text":""},{"location":"pmm/install/guides/wt/wt-09-next-steps/#what-comes-next","title":"What comes next:","text":"<p>If you want to remove those overlays, open the config file, change the value of <code>remove_overlays</code> to <code>true</code>, and rerun PMM.</p> <pre><code>    overlay_path:\n      - remove_overlays: true\n      - pmm: resolution\n</code></pre> <p>If you want to remove those collections, open the config file, remove or comment out [add <code>#</code> to the beginning] any or all of those lines under <code>metadata_path</code>, and delete the collections manually from Plex.</p> <pre><code>libraries:\nMain Movies:\nmetadata_path:\n# - pmm: basic               # This is a file within the defaults folder in the Repository\n# - pmm: imdb                # This is a file within the defaults folder in the Repository\n# see the wiki for how to use local files, folders, URLs, or files from git\n# - file: config/Movies.yml\noverlay_path:\n- remove_overlays: false\n- pmm: resolution\n</code></pre> <p>Edit <code>Movies.yml</code> to reflect the actions you want PMM to perform on your libraries. Edit <code>Movies.yml</code> to reflect the actions you want PMM to perform on your libraries.</p> <p>TV Shows and other libraries work the same way as you've seen above.  Create a section under <code>Libraries:</code> in the config.yml, refer to default files or create a metadata file, define collections, run Plex Meta Manager.</p> <p>Investigate the rest of the wiki to learn about everything Plex-Meta-Manager can do for you.</p>"},{"location":"pmm/install/guides/wt/wt-09-next-steps/#runtime-and-environment-flags","title":"Runtime and Environment Flags","text":"<p>The command in this walkthrough will run all collections and libraries immediately.  If you want to modify that behavior to run just one or some collections, or just one library, or just overlays or the like, review the Run Commands &amp; Environment Variables.</p>"},{"location":"pmm/install/guides/wt/wt-09-next-steps/#creating-collections-overlays-playlists-etc","title":"Creating Collections, Overlays, Playlists, etc.","text":"<p>These things are all generally defined in metadata files that are referred to in the config file.  The starting point for creating these files is here.</p>"},{"location":"pmm/install/guides/wt/wt-10-scheduling/","title":"Wt 10 scheduling","text":"<p>The commands you've been using in this walkthrough run Plex-Meta-Manager immediately then quit.</p> <p>Plex Meta Manager also features multiple layers of scheduling, which you can leverage to control when various activities take place.</p> <ul> <li>You can run PMM in the background, telling it to wake up and process your libraries at fixed times during the day.  The default behavior in this regard is to wake up at 5AM and process the config.  If you leave the <code>-r</code> off the commands you have been using in this walkthrough, that's what will happen.</li> </ul> <p>You can control when PMM wakes up with the time-to-run env-var/runtime flag.</p> <ul> <li>You can skip using that internal schedule and just do manual runs as you have been doing throughout this walkthrough using standard tools available in your OS.</li> </ul> <p>Details on setting this up are found here.</p> <ul> <li>In addition, individual items within the configuration can be scheduled to take place at certain times provided PMM is running at that time.  For example, you can tell PMM only to apply overlays on Tuesdays or the like.  YOu can then schedule manual runs every day at noon and overlays will only get processed when it runs on Tuesday.  This sort of schedule will not make PMM start up if it is not already running.  If you don't arrange for PMM to be run on Tuesday, your overlays would never be processed in this example.</li> </ul> <p>Details on this level of scheduling are found here</p>"},{"location":"pmm/install/guides/wt/wt-editor/","title":"Wt editor","text":"Linux macOS Windows <p>[type this into your terminal]</p> <pre><code>nano config/config.yml\n</code></pre> <p>I\u2019m using <code>nano</code> here mostly because it\u2019s simpler than any other editor on Linux.</p> <p>If you see something like: <pre><code> $ nano config/config.yml\nzsh: command not found: nano\n</code></pre></p> <p>You need to install <code>nano</code>, which you would do with:</p> <p>[type this into your terminal]</p> <pre><code>sudo apt install nano\n</code></pre> <p>You can use any other text editor you wish, provided it saves files as PLAIN TEXT.  <code>vi</code>, <code>emacs</code>, etc.</p> <p>[type this into your terminal]</p> <pre><code>nano config/config.yml\n</code></pre> <p>I\u2019m using <code>nano</code> here simply because it\u2019s built into OSX.  You can use any other text editor you wish, provided it saves files as PLAIN TEXT.  BBedit, TextMate, VSCode, etc.</p> <p>A common mistake is using TextEdit.app, which saves files as RTF by default.</p> <p>[type this into your terminal]</p> <p><pre><code>notepad .\\config\\config.yml\n</code></pre> I\u2019m using <code>notepad</code> here simply because it\u2019s built into Windows.  You can use any other text editor you wish, provided it saves files as PLAIN TEXT.</p> <p>From here on in, when this walkthrough says \"open the config file\", I mean this <code>nano</code> or <code>notepad</code> command.  Don't copy the template again.</p>"},{"location":"pmm/install/guides/wt/wt-run-docker/","title":"Wt run docker","text":"<p>[type this into your terminal]</p> <pre><code>docker run --rm -it -v \"PMM_PATH_GOES_HERE:/config:rw\" meisnate12/plex-meta-manager --run\n</code></pre>"},{"location":"pmm/install/guides/wt/wt-run-shell/","title":"Wt run shell","text":"<p>[type this into your terminal]</p> <pre><code>python plex_meta_manager.py -r\n</code></pre>"},{"location":"pmm/install/guides/wt/wt-save/","title":"Wt save","text":"Linux macOS Windows <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>nano</code>, type control-<code>x</code>, then <code>y</code>, then the enter key.</p> <p>If you're using <code>notepad</code>, type control-<code>s</code> or choose <code>Save</code> from the <code>File</code> menu.</p>"},{"location":"pmm/install/guides/wt/wt-test-library/","title":"Wt test library","text":"<p>While going through this process, Plex-Meta-Manager is going to load the movies in your library, create some collections, and apply some overlays.  If you have a large library, this will be very time-consuming.</p> <p>For learning and testing, you would be well-advised to create a small test library of a reasonable size, where reasonable it probably below a thousand.</p> <p>The author has a small library of 10 movies that is used for fast tests.</p> <p>For best results with this walkthrough, your test library will contain:</p> <ul> <li>At least two comedy movies released since 2012.</li> <li>At least two movies from the IMDB top 250.</li> <li>At least two movies from IMDB's Popular list.</li> <li>At least two movies from IMDB's Lowest Rated.</li> <li>A couple different resolutions among the movies.</li> </ul> <p>That will ensure there's something to go into each of the example collections that will be created.</p> <p>The advantage of the small test library is that it will reduce the time needed to see results.  Running some of these default collections against a library of a few thousand movies can take hours, and for iterative testing it's useful to have something that will run in a few minutes or seconds.</p> <p>You can set up a test library like this using symlinks without copying files.</p>"}]}